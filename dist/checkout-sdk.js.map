{"version":3,"sources":["webpack://checkoutKit/webpack/bootstrap","webpack://checkoutKit/external \"tslib\"","webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkoutKit/external \"lodash\"","webpack://checkoutKit/external \"rxjs\"","webpack://checkoutKit/external \"@bigcommerce/memoize\"","webpack://checkoutKit/./src/shipping/consignment-actions.ts","webpack://checkoutKit/./src/customer/customer-strategy-actions.ts","webpack://checkoutKit/./src/payment/payment-strategy-actions.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-actions.ts","webpack://checkoutKit/./src/common/error/errors/missing-data-error.ts","webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkoutKit/./src/checkout/checkout-actions.ts","webpack://checkoutKit/./src/order/order-actions.ts","webpack://checkoutKit/./src/payment/payment-method-actions.ts","webpack://checkoutKit/./src/billing/billing-address-actions.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-actions.ts","webpack://checkoutKit/./src/coupon/coupon-actions.ts","webpack://checkoutKit/./src/payment/instrument/instrument-actions.ts","webpack://checkoutKit/./src/coupon/gift-certificate-actions.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout-events.ts","webpack://checkoutKit/./src/common/error/errors/standard-error.ts","webpack://checkoutKit/./src/common/utility/set-prototype-of.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-actions.ts","webpack://checkoutKit/./src/common/error/errors/request-error.ts","webpack://checkoutKit/./src/config/config-actions.ts","webpack://checkoutKit/./src/common/utility/is-plain-object.ts","webpack://checkoutKit/./src/geography/country-actions.ts","webpack://checkoutKit/./src/shipping/shipping-country-actions.ts","webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkoutKit/./src/payment/payment-status-types.ts","webpack://checkoutKit/./src/store-credit/store-credit-actions.ts","webpack://checkoutKit/./src/payment/errors/payment-method-client-unavailable-error.ts","webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkoutKit/./src/common/http-request/content-type.ts","webpack://checkoutKit/./src/payment/payment-actions.ts","webpack://checkoutKit/./src/common/error/errors/invalid-argument-error.ts","webpack://checkoutKit/./src/payment/payment-method-types.ts","webpack://checkoutKit/./src/embedded-checkout/is-iframe-event.ts","webpack://checkoutKit/external \"shallowequal\"","webpack://checkoutKit/./src/common/utility/is-equal.ts","webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkoutKit/external \"local-storage-fallback\"","webpack://checkoutKit/external \"reselect\"","webpack://checkoutKit/./src/embedded-checkout/iframe-event-poster.ts","webpack://checkoutKit/./src/customer/customer-actions.ts","webpack://checkoutKit/./src/order/spam-protection/spam-protection-actions.ts","webpack://checkoutKit/./src/common/selector/with-memoized-combiner.ts","webpack://checkoutKit/./src/common/error/error-actions.ts","webpack://checkoutKit/./src/payment/payment-method-action-creator.ts","webpack://checkoutKit/./src/payment/payment-method-request-sender.ts","webpack://checkoutKit/./src/embedded-checkout/loading-indicator.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-listener.ts","webpack://checkoutKit/./src/checkout/checkout-default-includes.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-items.ts","webpack://checkoutKit/./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkoutKit/./src/common/http-request/internal-api-headers.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-item.ts","webpack://checkoutKit/./src/common/error/errors/not-initialized-error.ts","webpack://checkoutKit/./src/common/error/throw-error-action.ts","webpack://checkoutKit/./src/common/utility/amount-transformer.ts","webpack://checkoutKit/./src/common/url/parse-url.ts","webpack://checkoutKit/./src/common/data-store/cache-action.ts","webpack://checkoutKit/./src/common/data-store/is-action-options.ts","webpack://checkoutKit/./src/common/data-store/cachable-action-decorator.ts","webpack://checkoutKit/./src/common/utility/bind-decorator.ts","webpack://checkoutKit/external \"iframe-resizer\"","webpack://checkoutKit/external \"iframe-resizer/js/iframeResizer.contentWindow\"","webpack://checkoutKit/./src/common/utility/omit-deep.ts","webpack://checkoutKit/./src/checkout/checkout-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-request-sender.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/get-callback-url.ts","webpack://checkoutKit/./src/shipping/map-to-internal-shipping-option.ts","webpack://checkoutKit/./src/common/utility/is-private.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/embedded-content-events.ts","webpack://checkoutKit/./src/common/error/errors/unrecoverable-error.ts","webpack://checkoutKit/./src/common/error/errors/map-from-internal-error-response.ts","webpack://checkoutKit/./src/common/error/errors/map-from-payment-error-response.ts","webpack://checkoutKit/./src/common/error/request-error-factory.ts","webpack://checkoutKit/./src/common/error/errors/map-from-storefront-error-response.ts","webpack://checkoutKit/./src/common/error/clear-error-reducer.ts","webpack://checkoutKit/./src/common/utility/replace.ts","webpack://checkoutKit/./src/common/utility/object-set.ts","webpack://checkoutKit/./src/billing/billing-address-state.ts","webpack://checkoutKit/./src/billing/billing-address-reducer.ts","webpack://checkoutKit/./src/common/utility/array-replace.ts","webpack://checkoutKit/./src/common/utility/object-merge.ts","webpack://checkoutKit/./src/cart/cart-state.ts","webpack://checkoutKit/./src/cart/cart-reducer.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-state.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-reducer.ts","webpack://checkoutKit/./src/config/config-state.ts","webpack://checkoutKit/./src/config/config-reducer.ts","webpack://checkoutKit/./src/coupon/coupon-state.ts","webpack://checkoutKit/./src/coupon/coupon-reducer.ts","webpack://checkoutKit/./src/coupon/gift-certificate-state.ts","webpack://checkoutKit/./src/coupon/gift-certificate-reducer.ts","webpack://checkoutKit/./src/customer/customer-state.ts","webpack://checkoutKit/./src/customer/customer-reducer.ts","webpack://checkoutKit/./src/customer/customer-strategy-state.ts","webpack://checkoutKit/./src/customer/customer-strategy-reducer.ts","webpack://checkoutKit/./src/geography/country-state.ts","webpack://checkoutKit/./src/geography/country-reducer.ts","webpack://checkoutKit/./src/order/order-state.ts","webpack://checkoutKit/./src/order/order-reducer.ts","webpack://checkoutKit/./src/payment/payment-reducer.ts","webpack://checkoutKit/./src/payment/payment-method-state.ts","webpack://checkoutKit/./src/payment/payment-method-reducer.ts","webpack://checkoutKit/./src/common/utility/merge-or-push.ts","webpack://checkoutKit/./src/payment/payment-strategy-state.ts","webpack://checkoutKit/./src/payment/payment-strategy-reducer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-state.ts","webpack://checkoutKit/./src/payment/instrument/instrument-reducer.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-state.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-state.ts","webpack://checkoutKit/./src/shipping/consignment-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-country-state.ts","webpack://checkoutKit/./src/shipping/shipping-country-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-state.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-reducer.ts","webpack://checkoutKit/./src/store-credit/store-credit-reducer.ts","webpack://checkoutKit/./src/checkout/checkout-state.ts","webpack://checkoutKit/./src/checkout/checkout-reducer.ts","webpack://checkoutKit/./src/common/utility/create-freeze-proxy.ts","webpack://checkoutKit/./src/form/form-selector.ts","webpack://checkoutKit/./src/address/is-address-equal.ts","webpack://checkoutKit/./src/shipping/consignment-selector.ts","webpack://checkoutKit/./src/store-credit/store-credit-state.ts","webpack://checkoutKit/./src/checkout/create-internal-checkout-selectors.ts","webpack://checkoutKit/./src/billing/billing-address-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-selector.ts","webpack://checkoutKit/./src/coupon/coupon-selector.ts","webpack://checkoutKit/./src/customer/customer-selector.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-selector.ts","webpack://checkoutKit/./src/shipping/shipping-address-selector.ts","webpack://checkoutKit/./src/payment/payment-selector.ts","webpack://checkoutKit/./src/cart/cart-selector.ts","webpack://checkoutKit/./src/config/config-selector.ts","webpack://checkoutKit/./src/geography/country-selector.ts","webpack://checkoutKit/./src/customer/customer-strategy-selector.ts","webpack://checkoutKit/./src/coupon/gift-certificate-selector.ts","webpack://checkoutKit/./src/payment/instrument/instrument-selector.ts","webpack://checkoutKit/./src/payment/payment-method-selector.ts","webpack://checkoutKit/./src/payment/payment-strategy-selector.ts","webpack://checkoutKit/./src/shipping/shipping-country-selector.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-selector.ts","webpack://checkoutKit/./src/checkout/checkout-selector.ts","webpack://checkoutKit/./src/order/order-selector.ts","webpack://checkoutKit/./src/store-credit/store-credit-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-store.ts","webpack://checkoutKit/./src/checkout/create-action-transformer.ts","webpack://checkoutKit/./src/common/error/create-request-error-factory.ts","webpack://checkoutKit/./src/checkout/create-checkout-store-reducer.ts","webpack://checkoutKit/./src/checkout/errors/checkout-not-available-error.ts","webpack://checkoutKit/./src/checkout/checkout-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-params.ts","webpack://checkoutKit/./src/coupon/map-to-internal-coupon.ts","webpack://checkoutKit/./src/address/map-to-internal-address.ts","webpack://checkoutKit/./src/billing/is-billing-address-like.ts","webpack://checkoutKit/./src/common/selector/selector-decorator.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack://checkoutKit/./src/common/dom/is-element-id.ts","webpack://checkoutKit/./src/common/dom/set-unique-element-id.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkoutKit/./src/embedded-checkout/errors/not-embeddable-error.ts","webpack://checkoutKit/./src/common/storage/browser-storage.ts","webpack://checkoutKit/./src/embedded-checkout/errors/invalid-login-token-error.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout.ts","webpack://checkoutKit/./src/embedded-checkout/resizable-iframe-creator.ts","webpack://checkoutKit/./src/embedded-checkout/embed-checkout.ts","webpack://checkoutKit/./src/common/utility/cache-key-maps.ts","webpack://checkoutKit/./src/common/utility/cache-key-resolver.ts","webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkoutKit/external \"messageformat\"","webpack://checkoutKit/./src/common/error/errors/timeout-error.ts","webpack://checkoutKit/./src/payment/errors/payment-method-invalid-error.ts","webpack://checkoutKit/./src/common/selector/create-selector.ts","webpack://checkoutKit/./src/common/http-request/join-includes.ts","webpack://checkoutKit/./src/config/config-action-creator.ts","webpack://checkoutKit/./src/config/config-request-sender.ts","webpack://checkoutKit/./src/billing/billing-address-request-sender.ts","webpack://checkoutKit/./src/common/registry/registry.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://checkoutKit/./src/customer/map-to-internal-customer.ts","webpack://checkoutKit/./src/coupon/map-to-internal-gift-certificate.ts","webpack://checkoutKit/./src/order/map-to-internal-order.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkoutKit/./src/common/iframe/iframe-resizer.ts","webpack://checkoutKit/./src/common/error/error-action-creator.ts","webpack://checkoutKit/./src/common/utility/get-environment.ts","webpack://checkoutKit/./src/common/log/console-logger.ts","webpack://checkoutKit/./src/common/log/noop-logger.ts","webpack://checkoutKit/./src/common/log/get-default-logger.ts","webpack://checkoutKit/./src/common/log/create-logger.ts","webpack://checkoutKit/./src/coupon/coupon-action-creator.ts","webpack://checkoutKit/./src/coupon/coupon-request-sender.ts","webpack://checkoutKit/./src/coupon/gift-certificate-action-creator.ts","webpack://checkoutKit/./src/coupon/gift-certificate-request-sender.ts","webpack://checkoutKit/./src/customer/customer-strategy-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkoutKit/./src/customer/customer-action-creator.ts","webpack://checkoutKit/./src/customer/customer-request-sender.ts","webpack://checkoutKit/./src/common/error/errors/not-implemented-error.ts","webpack://checkoutKit/./src/customer/strategies/amazon/amazon-pay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/braintree/braintree-visacheckout-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/chasepay/chasepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/default/default-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/googlepay/googlepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/masterpass/masterpass-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/square/square-customer-strategy.ts","webpack://checkoutKit/./src/geography/country-action-creator.ts","webpack://checkoutKit/./src/geography/country-request-sender.ts","webpack://checkoutKit/./src/order/order-request-sender.ts","webpack://checkoutKit/./src/order/order-action-creator.ts","webpack://checkoutKit/./src/common/dom/mutation-observer.ts","webpack://checkoutKit/./src/order/spam-protection/errors/spam-protection-failed-error.ts","webpack://checkoutKit/./src/order/spam-protection/errors/spam-protection-not-loaded-error.ts","webpack://checkoutKit/./src/order/spam-protection/errors/spam-protection-not-completed-error.ts","webpack://checkoutKit/./src/order/spam-protection/google-recaptcha.ts","webpack://checkoutKit/./src/order/spam-protection/google-recaptcha-script-loader.ts","webpack://checkoutKit/./src/order/spam-protection/spam-protection-action-creator.ts","webpack://checkoutKit/./src/order/errors/order-finalization-not-required-error.ts","webpack://checkoutKit/./src/payment/payment-strategy-type.ts","webpack://checkoutKit/./src/payment/payment-strategy-action-creator.ts","webpack://checkoutKit/./src/cart/cart-comparator.ts","webpack://checkoutKit/./src/cart/errors/cart-changed-error.ts","webpack://checkoutKit/./src/checkout/checkout-validator.ts","webpack://checkoutKit/./src/store-credit/store-credit-action-creator.ts","webpack://checkoutKit/./src/store-credit/store-credit-request-sender.ts","webpack://checkoutKit/./src/payment/payment-action-creator.ts","webpack://checkoutKit/./src/payment/payment-request-sender.ts","webpack://checkoutKit/./src/payment/is-vaulted-instrument.ts","webpack://checkoutKit/./src/payment/payment-request-transformer.ts","webpack://checkoutKit/./src/payment/strategies/adyenv2/adyenv2.ts","webpack://checkoutKit/./src/payment/payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/errors/payment-argument-invalid-error.ts","webpack://checkoutKit/./src/payment/strategies/adyenv2/adyenv2-payment-strategy.ts","webpack://checkoutKit/./src/order/order-params.ts","webpack://checkoutKit/./src/payment/strategies/adyenv2/adyenv2-script-loader.ts","webpack://checkoutKit/./src/payment/errors/payment-method-cancelled-error.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirmJs.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkoutKit/./src/address/is-internal-address-equal.ts","webpack://checkoutKit/./src/common/utility/omit-private.ts","webpack://checkoutKit/./src/address/map-from-internal-address.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/overlay/overlay.ts","webpack://checkoutKit/./src/common/modal/modal.ts","webpack://checkoutKit/./src/payment/strategies/barclaycard/barclaycard-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/barclaycard/barclaycard.ts","webpack://checkoutKit/./src/common/utility/cancellable-promise.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/errors/payment-method-failed-error.ts","webpack://checkoutKit/./src/payment/is-credit-card-like.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/cardinal/cardinal.ts","webpack://checkoutKit/./src/payment/strategies/braintree/is-braintree-error.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/cardinal/cardinal-three-d-secure-flow.ts","webpack://checkoutKit/./src/payment/strategies/cardinal/cardinal-client.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay.ts","webpack://checkoutKit/./src/payment/strategies/cardinal/cardinal-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-form.ts","webpack://checkoutKit/./src/payment/strategies/converge/converge-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/credit-card/credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/cybersource/cybersource-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/legacy/legacy-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/no-payment/no-payment-data-required-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offline/offline-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offsite/offsite-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/sage-pay/sage-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/error/errors/unsupported-browser-error.ts","webpack://checkoutKit/./src/payment/strategies/square/square-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/stripev3/stripev3-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/stripev3/stripev3-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/errors/payment-method-declined-error.ts","webpack://checkoutKit/./src/payment/strategies/zip/zip-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/zip/zip-script-loader.ts","webpack://checkoutKit/./src/payment/create-payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkoutKit/./src/common/data-store/create-data-store-projection.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-creator.ts","webpack://checkoutKit/./src/common/date-time/add-minutes.ts","webpack://checkoutKit/./src/common/date-time/is-future.ts","webpack://checkoutKit/./src/payment/instrument/instrument-response-transformer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-creator.ts","webpack://checkoutKit/./src/shipping/shipping-country-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-action-creator.ts","webpack://checkoutKit/./src/shipping/strategies/amazon/amazon-pay-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/default/default-shipping-strategy.ts","webpack://checkoutKit/./src/common/utility/clone-result.ts","webpack://checkoutKit/./src/common/selector/create-shallow-equal-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-selectors.ts","webpack://checkoutKit/./src/checkout/checkout-store-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-error-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-status-selector.ts","webpack://checkoutKit/./src/common/error/error-message-transformer.ts","webpack://checkoutKit/./src/common/utility/to-single-line.ts","webpack://checkoutKit/./src/checkout/checkout-service.ts","webpack://checkoutKit/./src/checkout/create-checkout-service-error-transformer.ts","webpack://checkoutKit/./src/checkout/create-checkout-service.ts","webpack://checkoutKit/./src/order/spam-protection/create-spam-protection.ts","webpack://checkoutKit/./src/payment/create-payment-client.ts","webpack://checkoutKit/./src/customer/create-customer-strategy-registry.ts","webpack://checkoutKit/./src/shipping/create-shipping-strategy-registry.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/handle-frame-loaded-event.ts","webpack://checkoutKit/./src/common/error/errors/custom-error.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/iframe-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/noop-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/create-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/locale/language-service.ts","webpack://checkoutKit/./src/locale/create-language-service.ts","webpack://checkoutKit/./src/currency/currency-formatter.ts","webpack://checkoutKit/./src/currency/currency-service.ts","webpack://checkoutKit/./src/currency/create-currency-service.ts","webpack://checkoutKit/./src/index.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://checkoutKit/./src/cart/map-to-internal-cart.ts","webpack://checkoutKit/./src/promotion/map-to-discount-notifications.ts","webpack://checkoutKit/./src/billing/errors/unable-to-continue-as-guest-error.ts","webpack://checkoutKit/./src/billing/billing-address-action-creator.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ConsignmentActionType","CustomerStrategyActionType","PaymentStrategyActionType","ShippingStrategyActionType","MissingDataErrorType","subtype","type","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","MissingSpamProtectionToken","getErrorMessage","CheckoutActionType","OrderActionType","PaymentMethodActionType","BillingAddressActionType","CheckoutButtonActionType","CouponActionType","InstrumentActionType","GiftCertificateActionType","EmbeddedCheckoutEventType","message","setPrototypeOf","__proto__","Error","captureStackTrace","stack","RemoteCheckoutActionType","DEFAULT_RESPONSE","body","headers","status","response","errors","ConfigActionType","isPlainObject","CountryActionType","ShippingCountryActionType","ACKNOWLEDGE","FINALIZE","StoreCreditActionType","ContentType","PaymentActionType","HOSTED","OFFLINE","isIframeEvent","isEqual","objectA","objectB","options","Array","isArray","length","index","isArrayEqual","Date","getTime","isDateEqual","RegExp","toString","isRegExpEqual","filter","keyFilter","keysA","keys","keysB","isObjectEqual","targetOrigin","_targetWindow","this","_targetOrigin","origin","post","event","window","postMessage","setTarget","CustomerActionType","SpamProtectionActionType","withMemoizedCombiner","creator","combiner","args","pop","result","combinerArgs","ErrorActionType","_requestSender","loadPaymentMethods","observer","next","LoadPaymentMethodsRequested","then","meta","deviceSessionId","sessionHash","LoadPaymentMethodsSucceeded","complete","catch","error","LoadPaymentMethodsFailed","loadPaymentMethod","methodId","LoadPaymentMethodRequested","undefined","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","timeout","Accept","JsonV1","url","DEFAULT_STYLES","size","color","backgroundColor","ROTATION_ANIMATION","_styles","styles","_defineAnimation","_container","_buildContainer","_indicator","_buildIndicator","appendChild","show","parentId","document","getElementById","style","visibility","opacity","hide","handleTransitionEnd","removeEventListener","addEventListener","container","createElement","display","bottom","left","height","width","position","right","top","transition","indicator","borderRadius","border","borderColor","margin","transform","transformStyle","animation","id","head","sheet","CSSStyleSheet","insertRule","sourceOrigin","_sourceOrigin","_isListening","_listeners","listen","_handleMessage","stopListen","addListener","listener","listeners","push","removeListener","indexOf","splice","trigger","forEach","data","mapToInternalLineItems","itemMap","decimalPlaces","idKey","reduce","map","item","amountTransformer","imageUrl","amount","amountAfterDiscount","discount","integerAmount","toInteger","integerAmountAfterDiscount","integerDiscount","quantity","sender","recipient","attributes","variantId","mapGiftCertificateToInternalLineItem","mapToInternalLineItemType","INTERNAL_USE_ONLY","_scriptLoader","_window","loadClient","loadScript","braintree","client","load3DS","threeDSecure","loadDataCollector","dataCollector","loadPaypal","paypal","loadPaypalCheckout","paypalCheckout","loadVisaCheckout","visaCheckout","loadGooglePayment","googlePayment","_braintreeScriptLoader","_dataCollectors","initialize","clientToken","_clientToken","getClient","PaymentNotInitialized","_client","authorization","getPaypal","_paypal","Promise","all","getPaypalCheckout","_paypalCheckout","get3DS","_3ds","getDataCollector","cacheKey","cached","kount","code","deviceData","teardown","resolve","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","_teardown","default","mod","mapToInternalLineItem","extendedListPrice","extendedSalePrice","discountAmount","downloadsPageUrl","downloadPageUrl","brand","categoryNames","productId","option","addedByPromotion","NotInitializedErrorType","CustomerNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","throwErrorAction","action","payload","_decimalPlaces","Math","round","pow","parseUrl","test","anchor","href","port","hostname","hash","protocol","pathname","search","cacheAction","fn","pipe","store","isActionOptions","param","useCache","cachableActionDecorator","_","descriptor","memoizedMethods","WeakMap","decorateMethod","method","lastArg","instanceMethods","set","bindMethodDecorator","boundMethod","target","decoratedTarget","getOwnPropertyNames","getOwnPropertyDescriptor","bindClassDecorator","omitDeep","predicate","_checkoutRequestSender","_configActionCreator","loadCheckout","LoadCheckoutRequested","loadConfig","LoadCheckoutSucceeded","LoadCheckoutFailed","loadDefaultCheckout","state","getState","context","config","getContextConfig","checkoutId","updateCheckout","checkout","getCheckout","UpdateCheckoutRequested","UpdateCheckoutSucceeded","UpdateCheckoutFailed","loadCurrentCheckout","_consignmentRequestSender","unassignItemsByAddress","consignment","existingConsignment","consignments","getConsignmentByAddress","shippingAddress","lineItems","_removeLineItems","cart","getCart","updateConsignment","deleteConsignment","assignItemsByAddress","_createOrUpdateConsignment","_addLineItems","selectShippingOption","getConsignments","consignmentUpdateBody","shippingOptionId","consignmentMeta","UpdateShippingOptionRequested","UpdateShippingOptionSucceeded","UpdateShippingOptionFailed","loadShippingOptions","LoadShippingOptionsRequested","params","include","AvailableShippingOptions","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","updateAddress","address","_getConsignmentRequestBody","createConsignments","CreateConsignmentsRequested","CreateConsignmentsSucceeded","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentSucceeded","UpdateConsignmentFailed","consignmentId","DeleteConsignmentRequested","DeleteConsignmentSucceeded","DeleteConsignmentFailed","updateShippingOption","_isUpdateConsignmentRequest","physicalItems","itemId","_hydrateLineItems","lineItemIds","existingItem","sharedItem","lineItem","concat","request","DEFAULT_PARAMS","join","put","delete","getCallbackUrl","location","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","isPrivate","EmbeddedContentEventType","joinErrors","_factoryMethods","register","detail","title","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","mapFromPaymentErrorResponse","factoryMethod","createError","_getType","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","split","errorResponse","storefrontErrorResponse","internalErrorResponse","clearErrorReducer","ClearError","isClearErrorAction","replace","currentValue","newValue","objectSet","DEFAULT_STATE","statuses","billingAddressReducer","dataReducer","errorsReducer","statusesReducer","reducer","UpdateBillingAddressSucceeded","ContinueAsGuestSucceeded","LoadOrderSucceeded","billingAddress","UpdateBillingAddressRequested","UpdateBillingAddressFailed","ContinueAsGuestRequested","ContinueAsGuestFailed","arrayReplace","currentArray","newArray","matchObject","sameAsCurrentCount","sameAsNewCount","countSameAsReplaced","replacedValue","newItem","currentItem","objectMerge","currentObject","newObject","cartReducer","ApplyCouponSucceeded","RemoveCouponSucceeded","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","DEFAULT_DATA_STATE","initializedContainers","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","InitializeButtonSucceeded","containerId","DeinitializeButtonSucceeded","InitializeButtonRequested","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonFailed","configReducer","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","couponReducer","coupons","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","giftCertificateReducer","giftCertificates","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","customerReducer","customer","customerStrategyReducer","InitializeSucceeded","isInitialized","DeinitializeSucceeded","InitializeRequested","initializeError","initializeMethodId","InitializeFailed","DeinitializeRequested","deinitializeError","deinitializeMethodId","DeinitializeFailed","SignInRequested","SignInSucceeded","signInError","signInMethodId","SignInFailed","SignOutRequested","SignOutSucceeded","signOutError","signOutMethodId","SignOutFailed","WidgetInteractionStarted","WidgetInteractionFinished","widgetInteractionError","widgetInteractionMethodId","WidgetInteractionFailed","isInitializing","isDeinitializing","isSigningIn","isSigningOut","isWidgetInteracting","countryReducer","LoadCountriesSucceeded","LoadCountriesRequested","LoadCountriesFailed","orderReducer","metaReducer","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","SubmitOrderSucceeded","callbackUrl","order","orderToken","token","payment","Completed","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","ExecuteRequested","SubmitFailed","paymentReducer","SubmitPaymentSucceeded","paymentMethodReducer","array","defaultPredicate","mergeOrPush","gateway","methodA","methodB","loadMethodId","loadMethodError","isLoadingMethod","paymentStrategyReducer","ExecuteSucceeded","executeError","executeMethodId","ExecuteFailed","FinalizeRequested","FinalizeSucceeded","finalizeError","finalizeMethodId","FinalizeFailed","isExecuting","isFinalizing","instrumentReducer","LoadInstrumentsSucceeded","vaultedInstruments","DeleteInstrumentSucceeded","instrument","bigpayToken","instrumentId","LoadInstrumentsRequested","DeleteInstrumentRequested","deleteError","failedInstrument","LoadInstrumentsFailed","DeleteInstrumentFailed","isDeleting","deletingInstrument","remoteCheckoutReducer","InitializeRemoteBillingSucceeded","billing","InitializeRemoteShippingSucceeded","shipping","LoadRemoteSettingsSucceeded","UpdateRemoteCheckout","updateShippingOptionError","updateError","isUpdating","isUpdatingShippingOption","consignmentReducer","SignOutCustomerSucceeded","shippingCountryReducer","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","shippingStrategyReducer","UpdateAddressRequested","UpdateAddressSucceeded","updateAddressError","updateAddressMethodId","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","selectOptionError","selectOptionMethodId","SelectOptionFailed","isUpdatingAddress","isSelectingOption","storeCreditReducer","ApplyStoreCreditRequested","ApplyStoreCreditSucceeded","ApplyStoreCreditFailed","checkoutReducer","orderId","createFreezeProxy","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","charAt","createProxy","createFormSelectorFactory","getShippingAddressFields","countries","countryCode","selectedCountry","storeConfig","formFields","shippingAddressFields","field","processField","getBillingAddressFields","billingAddressFields","country","items","label","fieldType","itemtype","processCountry","subdivisions","required","processProvince","hasPostalCodes","Boolean","processsPostCode","normalize","firstName","lastName","company","address1","address2","city","stateOrProvince","postalCode","phone","customFields","createConsignmentSelectorFactory","getConsignmentById","addressA","addressB","getShippingOption","selectedShippingOption","getLoadError","loadError","getCreateError","getLoadShippingOptionsError","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getUpdateError","getDeleteError","getItemAssignmentError","getUpdateShippingOptionError","isLoading","isLoadingShippingOptions","isCreating","isAssigningItems","createInternalCheckoutSelectorsFactory","getBillingAddress","getContinueAsGuestError","isContinuingAsGuest","getInitializeError","getDeinitializeError","getCoupons","getRemoveError","getApplyError","isApplying","isRemoving","getCustomer","getShippingAddress","getInternalPayment","getGatewayPayment","getHostedPayment","getPaymentId","getPaymentStatus","getPaymentToken","getPaymentRedirectUrl","isPaymentDataRequired","isPaymentDataSubmitted","createBillingAddressSelector","continueAsGuestError","createCartSelector","createCartSelectorFactory","createCheckoutButtonSelector","createConfigSelector","getConfig","getStoreConfig","getExternalSource","externalSource","createConfigSelectorFactory","createCountrySelector","getCountries","createCountrySelectorFactory","createCouponSelector","removeCouponError","applyCouponError","isApplyingCoupon","isRemovingCoupon","createCustomerSelector","createCustomerStrategySelector","getSignInError","getSignOutError","getWidgetInteractionError","createCustomerStrategySelectorFactory","createGiftCertificateSelector","getGiftCertificates","removeGiftCertificateError","applyGiftCertificateError","isApplyingGiftCertificate","isRemovingGiftCertificate","createGiftCertificateSelectorFactory","createInstrumentSelector","getInstruments","instruments","getInstrumentsMeta","createInstrumentSelectorFactory","createFormSelector","createPaymentMethodSelector","getPaymentMethods","paymentMethods","getPaymentMethodsMeta","getPaymentMethod","gatewayId","getLoadMethodError","createPaymentMethodSelectorFactory","createPaymentStrategySelector","getExecuteError","getFinalizeError","getWidgetInteractingError","createPaymentStrategySelectorFactory","createRemoteCheckoutSelector","createShippingAddressSelector","createShippingCountrySelector","getShippingCountries","createShippingCountrySelectorFactory","createShippingStrategySelector","getUpdateAddressError","getSelectOptionError","createShippingStrategySelectorFactory","createConsignmentSelector","createCheckoutSelector","getOutstandingBalance","useStoreCredit","grandTotal","storeCredit","max","outstandingBalance","createCheckoutSelectorFactory","createOrderSelector","getOrder","getOrderMeta","isSpamProtectionExecuting","createOrderSelectorFactory","createPaymentSelector","payments","providerId","providerType","internalPayment","step","redirectUrl","paymentMethod","nonce","createStoreCreditSelector","applyError","createStoreCreditSelectorFactory","checkoutButton","customerStrategies","form","paymentStrategies","remoteCheckout","shippingCountries","shippingStrategies","selectors","shouldWarnMutation","createCheckoutStore","initialState","requestErrorFactory","factory","actionTransformer","action$","every","createInternalCheckoutSelectors","stateTransformer","CheckoutIncludes","couponTypes","mapToInternalCoupon","coupon","displayName","discountType","couponType","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","stateOrProvinceCode","postCode","selectorDecorator","resolver","memoizedMethod","cachedValue","getUsedCount","cache","getKey","selectorMethodDecorator","_checkoutButton","getInitializeButtonError","getDeinitializeButtonError","CheckoutButtonErrorSelector","isInitializingButton","isDeinitializingButton","CheckoutButtonStatusSelector","createCheckoutButtonSelectors","CheckoutButtonMethodType","_store","_buttonStrategyActionCreator","_state","subscribe","subscriber","filters","initializeButton","containerIds","selector","idPrefix","containers","querySelectorAll","slice","setUniqueElementId","queueId","dispatch","deinitializeButton","deinitialize","CheckoutButtonInitializer","_registry","_paymentMethodActionCreator","_checkoutActionCreator","_braintreeSDKCreator","_paypalScriptLoader","_formPoster","_offerCredit","paypalOptions","braintreepaypalcredit","braintreepaypal","_paymentMethod","allowedSources","disallowedSources","allowCredit","FUNDING","CREDIT","Button","render","env","testMode","commit","shouldProcessPayment","funding","allowed","disallowed","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","onError","addresses","CheckoutButtonNotInitialized","createPayment","flow","enableShippingAddress","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","currency","offerCredit","tokenizePayment","postForm","payment_type","provider","device_data","shipping_address","JSON","stringify","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","email","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","_googlePayPaymentProcessor","_methodId","_getMethodId","_walletButton","_createSignInButton","parentNode","removeChild","googlePayButton","createButton","_handleWalletButtonClick","preventDefault","displayWallet","paymentData","handleSuccess","updateShippingAddress","_onPaymentSelectComplete","_onError","_masterpassScriptLoader","initializationData","load","masterpass","_masterpassClient","_signInButton","buttonContainer","button","src","_createMasterpassPayload","allowedCardTypes","cartAmount","cartId","suppressShippingAddress","_host","merchantId","clientId","actions","res","paymentID","payerID","paymentId","payerId","payerInfo","payer","payer_info","createCheckoutButtonInitializer","host","requestSender","formPoster","registry","scriptLoader","checkoutActionCreator","BRAINTREE_PAYPAL","BRAINTREE_PAYPAL_CREDIT","MASTERPASS","GOOGLEPAY_BRAINTREE","GOOGLEPAY_STRIPE","PAYPALEXPRESS","createCheckoutButtonRegistry","NotEmbeddableErrorType","_namespace","getItem","rawValue","withNamespace","parse","removeItem","getItemOnce","setItem","UnknownError","_iframeCreator","_messageListener","_messagePoster","_loadingIndicator","_storage","_location","_options","_isAttached","onComplete","CheckoutComplete","CheckoutError","onLoad","CheckoutLoaded","onFrameLoad","FrameLoaded","onSignOut","SignedOut","_configureStyles","attach","_allowCookie","_attemptLogin","createFrame","iframe","_iframe","_retryAllowCookie","FrameError","detach","iFrameResizer","close","contentWindow","StyleConfigured","reject","now","encodeURIComponent","lastAttempt","Number","MissingContent","EmbeddedCheckout","MissingContainer","allowPaymentRequest","_toResizableFrame","timeoutInterval","setTimeout","handleMessage","contentId","iframes","scrolling","sizeWidth","heightCalculationMethod","clearTimeout","STORAGE_PREFIX","embedCheckout","loadingIndicator","isTerminalCacheKeyMap","_lastId","_map","maps","_usedMaps","maxSize","onExpire","_resolveMap","parentMap","usedCount","_generateMap","_removeLeastUsedMap","isMatched","mapIndex","unshift","parent","terminalMap","recentlyUsedMap","_removeMap","isRootCacheKeyMap","joinIncludes","includes","_configRequestSender","createAddress","_factories","_instances","defaultToken","cacheToken","_getInstance","_hasFactory","_hasInstance","hasShippingAddress","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parseResponse","paymentMethodData","tokenizationData","androidPayCards","cardType","lastFour","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","merchantInfo","authJwt","merchantName","googleMerchantName","googleMerchantId","transactionInfo","currencyCode","totalPriceStatus","totalPrice","toFixed","cardRequirements","billingAddressRequired","billingAddressFormat","shippingAddressRequired","emailRequired","phoneNumberRequired","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","apiVersion","apiVersionMinor","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","billingAddressParameters","format","tokenizationSpecification","paymentMethodTokenizationParameters","shippingAddressParameters","_mapGooglePayStripeDataRequestToGooglePayDataRequestV2","card","last4","err","stripeVersion","stripePublishableKey","mapToInternalCustomer","customerId","isGuest","fullName","customerGroupName","customerGroup","mapToInternalGiftCertificate","giftCertificate","discountedAmount","used","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","orderMeta","customerCanBeCreated","mapToInternalOrderPayment","subtotal","baseAmount","sum","discountNotifications","totalDiscountedAmount","appliedGiftCertificates","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","mapToStoreCredit","taxes","taxTotal","handling","handlingCostTotal","orderAmount","orderAmountAsInteger","mapToInternalPaymentStatus","isDefaultOrderPayment","helpText","instructions","returnUrl","socialDataObject","digitalItems","socialMedia","image","link","shareText","text","sharingLink","channelName","channel","channelCode","iframeResizer","originalIframeResizer","setupContentWindowForIframeResizer","clearError","getEnvironment","process","NODE_ENV","e","_console","log","_logToConsole","messages","info","warn","debug","isEnabled","logger","console","getDefaultLogger","_couponRequestSender","applyCoupon","removeCoupon","couponCode","_giftCertificateRequestSender","applyGiftCertificate","removeGiftCertificate","giftCertificateCode","_strategyRegistry","signIn","credentials","signOut","widgetInteraction","loadWidget","onPaymentReady","region","toLowerCase","_configureWidget","onLoginReady","amazon","Login","setClientId","setUseCookie","onAmazonLoginReady","OffAmazonPayments","onAmazonPaymentsReady","createInitOptions","settings","locale","collectShipping","paymentRequest","String","braintreeVisaCheckout","tokenize","tokenizedPayload","_postForm","userData","userEmail","card_information","_getCardInformation","cardInformation","_getAddress","_toVisaCheckoutAddress","phoneNumber","streetAddress","extendedAddress","locality","number","createBraintreeVisaCheckoutPaymentProcessor","braintreeScriptLoader","braintreeSDKCreator","V","JPMC","initializeBilling","methodName","initializeShipping","initializePayment","loadSettings","generateToken","trackAuthorizationEvent","_remoteCheckoutRequestSender","InitializeRemoteBillingRequested","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","_customerRequestSender","signInCustomer","SignInCustomerRequested","SignInCustomerSucceeded","SignInCustomerFailed","signOutCustomer","SignOutCustomerRequested","SignOutCustomerFailed","_remoteCheckoutActionCreator","amazonOptions","useAmazonAddressBook","_handleAuthorization","authorize","popup","scope","tokenPrefix","_customerStrategyActionCreator","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","_buttonClassName","braintreevisacheckout","visaCheckoutOptions","initOptions","storeProfile","storeLanguage","signInButton","init","on","paymentSuccessPayload","_paymentInstrumentSelected","buttonClass","querySelector","_insertVisaCheckoutButton","visaCheckoutButton","className","innerHTML","_chasePayScriptLoader","chasepay","chasePayOptions","digitalSessionId","ChasePay","configure","language","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","startCheckout","COMPLETE_CHECKOUT","requestId","merchantRequestId","_setExternalCheckoutData","_reloadPage","sessionToken","sendRequest","fromChasePay","_customerActionCreator","googlePayOptions","_getGooglePayOptions","googlepaybraintree","googlepaystripe","masterpassOptions","Masterpass","_countryRequestSender","loadCountries","_config","loadOrder","submitOrder","finalizeOrder","_orderRequestSender","_checkoutValidator","_spamProtectionActionCreator","loadOrderPayments","loadCurrentOrder","_getCurrentOrderId","SubmitOrderRequested","spamProtectionToken","isSpamProtectionEnabled","validate","_mapToOrderRequestBody","customerMessage","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","executeSpamProtection","execute","callback","MutationObserver","googleRecaptchaScriptLoader","mutationObserverFactory","sitekey","event$","_event$","recaptcha","getResponse","reset","_recaptcha","element","_watchRecaptchaChallengeWindow","iframeContainer","parentElement","observe","attributeFilter","_loadPromise","_loadScript","grecaptcha","_googleRecaptcha","recaptchaSitekey","checkoutSettings","googleRecaptchaSitekey","PaymentStrategyType","_orderActionCreator","strategy","getByMethod","NO_PAYMENT_DATA_REQUIRED","finalize","_loadOrderPaymentsIfNeeded","cartA","cartB","_normalize","sort","itemA","itemB","localeCompare","giftWrapping","comparator","_compareCoupons","_compareGiftCertificates","couponsA","couponsB","giftCertificatesA","giftCertificatesB","_storeCreditRequestSender","applyStoreCredit","removeStoreCredit","_paymentRequestSender","_paymentRequestTransformer","submitPayment","SubmitPaymentRequested","SubmitPaymentFailed","initializeOffsitePayment","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","_transformResponse","statusText","isVaultedInstrument","ThreeDS2ComponentType","ResultCode","checkoutState","_getPaymentMethod","shippingOption","contextConfig","instrumentMeta","paymentMeta","internalCustomer","authToken","vaultAccessToken","quoteMeta","geoCountryCode","source","paymentMethodSelector","_getToken","_hasFactoryForMethod","_isLegacyMethod","LEGACY","OFFSITE","CREDIT_CARD","clientSidePaymentProviders","invalidFields","OrderIncludes","_paymentActionCreator","_adyenV2ScriptLoader","_locale","adyenv2","_adyenv2","configuration","environment","originKey","paymentMethodsResponse","adyenCheckout","_adyenCheckout","adyenComponent","onChange","_updateStateContainer","mount","_adyenComponent","shouldSaveInstrument","paymentPayload","_getStateContainer","three_ds_result","result_code","IdentifyShopper","_handle3DS2Fingerprint","ChallengeShopper","_handle3DS2Challenge","acs_url","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","unmount","_getAdyenV2PaymentInitializeOptions","_stateContainer","_getThreeDS2ChallengeWidgetSize","widgetSize","resultObject","paymentMethodId","threeDS2Component","ThreeDS2Challenge","challengeToken","challengeData","challengePaymentPayload","payment_data","threeDS2Container","threeDS2ContainerId","ThreeDS2DeviceFingerprint","fingerprintToken","fingerprintData","fingerprintPaymentPayload","newState","isValid","_stylesheetLoader","loadStylesheet","AdyenCheckout","_affirmScriptLoader","publicKey","affirm","_affirm","requestOptions","PhysicalItemsCategories","DigitalItemsCategories","_getCheckoutInformation","open","onFail","failObject","reason","onSuccess","successObject","ui","checkout_token","_getBillingAddress","merchant","user_confirmation_url","links","checkoutLink","user_cancel_url","user_confirmation_url_action","_getShippingAddress","_getItems","metadata","shipping_type","_getShippingType","platform_type","platform_version","platform_affirm","discounts","_getDiscounts","order_id","shipping_amount","tax_amount","total","first","last","full","zipcode","display_name","sku","unit_price","salePrice","qty","item_image_url","item_url","categories","_getCategories","customItems","listPrice","line","discount_amount","discount_display_name","DISCOUNTED_AMOUNT","categoryTree","category","Function","apikey","scriptURI","_getScriptURI","_storeCreditActionCreator","_afterpayScriptLoader","storeCountryName","storeCountry","_mapCountryToISO2","_afterpaySdk","_redirectToAfterpay","countryName","redirect","SCRIPTS_DEFAULT","SCRIPTS_US","AfterPay","isInternalAddressEqual","ignoredKeys","mapFromInternalAddress","_billingAddressActionCreator","_isPaymentMethodSelected","_walletOptions","_createWallet","referenceId","_getOrderReferenceId","sellerId","_getMerchantId","is3dsEnabled","_processPaymentWith3ds","_getOrderReferenceIdFromInitializationData","orderReferenceId","onPaymentSelect","onReady","walletOptions","amazonOrderReferenceId","design","designMode","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remoteAddress","internalBillingAddress","getAmazonOrderReferenceId","initConfirmationFlow","confirmationFlow","success","_element","_createElement","_registerClick","remove","_unregisterClick","_removeAfterTransition","background","transitionDuration","zIndex","onClick","handeTransition","propertyName","overlay","closeCallback","openCallback","showCloseButton","hideCloseButton","_closeCallback","_closeButton","contentsId","minWidth","minHeight","padding","_createCloseButton","contents","_createContents","cssFloat","innerText","modal","iframeContainerId","_createPaymentIframe","frameContainer","promise","cancellable","cancel","race","_overlay","_threeDSecureOptions","preloadPaypal","tokenizeCard","requestData","_mapToCreditCard","creditCards","focusWindow","useraction","verifyCard","addFrame","removeFrame","cancelVerifyCard","verification","appendSessionId","processedPayment","creditCard","cardholderName","ccName","ccNumber","cvv","ccCvv","expirationDate","ccExpiry","month","year","endpoint","isCreditCardLike","_braintreePaymentProcessor","_is3dsEnabled","_handleError","orderRequest","_preparePaymentData","_isUsingVaulting","tokenizedCard","CardinalInitializationType","CardinalEventType","CardinalValidatedAction","CardinalPaymentType","CardinalTriggerEvents","CardinalPaymentBrand","CardinalSignatureVerification","_credit","braintreeOptions","isBraintreeError","_paymentStrategyActionCreator","visaInitOptions","_cardinalClient","prepare","start","runBinProcess","_getBinNumber","getThreeDSecureData","_getOrderData","entry","iin","CardinalSignatureValidationErrors","ChasePayEventType","_sdk","_getClientSDK","SetupCompleted","off","Validated","ActionCode","ErrorNumber","ErrorDescription","setup","Init","jwt","binNumber","BinProcess","Status","threeDSecureData","orderData","Success","NoAction","Payment","ExtendedData","SignatureVerification","Yes","Failure","continueObject","AcsUrl","Payload","partialOrder","_mapToPartialOrder","continue","CCA","transactionId","consumer","BillingAddress","_mapToCardinalAddress","Account","_mapToCardinalAccount","Email1","ShippingAddress","Consumer","OrderDetails","OrderNumber","Amount","CurrencyCode","OrderChannel","TransactionId","AccountNumber","ExpirationMonth","ExpirationYear","NameOnAccount","CardCode","cardinalAddress","FirstName","LastName","Address1","City","State","PostalCode","CountryCode","Address2","Phone1","Cardinal","CardBrand","DigitalWalletType","_wepayRiskClient","_walletEvent$","walletButton","_configureWallet","_chasePayClient","_getPayment","_displayWallet","_createOrder","logoContainer","insertBrandings","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","showLoadingAnimation","getRiskToken","riskToken","paymentCryptogram","cryptogramId","eci","btoa","reqTokenId","expDate","substr","accountNum","accountMask","extraData","_threeDSecureFlow","_googlePayOptions","statusCode","_klarnaScriptLoader","_supportedEUCountries","klarnaCredit","_klarnaCredit","_unsubscribe","_loadWidget","_authorize","authorization_token","authorizationToken","klarna","client_token","_getUpdateSessionData","_mapToKlarnaAddress","klarnaAddress","street_address","given_name","family_name","street_address2","updateSessionData","approved","show_form","Klarna","Credit","orderPayload","_shouldSubmitFullPayload","_isPaymentAcknowledged","_useRedirectFlow","paypalexpress","useRedirectFlow","_isInContextEnabled","_paypalSdk","closeFlow","_isAcknowledgedOrFinalized","initXO","startFlow","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","_getNonceInstrument","_getCountryCode","toUpperCase","_deferredRequestNonce","requestCardNonce","deferred","square","squareOptions","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","requestShippingAddress","requestBillingInfo","storeName","pending","setPostalCode","masterpassBtn","elementId","SqPaymentForm","_stripeScriptLoader","stripeOptions","stripev3","stripeJs","_stripeV3Client","cardElement","elements","_cardElement","_getStripeJs","handleCardPayment","stripeResponse","paymentIntent","createPaymentMethod","_mapStripePaymentMethodOptions","stripePaymentMethod","stripeCardPaymentOptions","_mapStripeCardPaymentOptions","payment_method","_mapStripeBillingAddress","_mapStripeShippingAddress","_mapStripeBillingDetails","stripeBillingDetails","_mapStripeShippingDetails","stripeShippingDetails","_getCustomer","shippingDetails","receipt_email","save_payment_method","billing_details","publishableKey","Stripe","betas","_riskClient","WePay","risk","generate_risk_token","get_risk_token","orderActionCreator","paymentActionCreator","payloadWithToken","_zipScriptLoader","zip","_zipClient","zipClient","Checkout","_prepareForReferredRegistration","onCheckout","openModal","externalId","Zip","createPaymentStrategyRegistry","paymentClient","spamProtection","paymentRequestTransformer","paymentRequestSender","billingAddressActionCreator","braintreePaymentProcessor","createBraintreePaymentProcessor","checkoutRequestSender","checkoutValidator","spamProtectionActionCreator","storeCreditActionCreator","paymentMethodActionCreator","remoteCheckoutActionCreator","configActionCreator","paymentStrategyActionCreator","ADYENV2","AFFIRM","AFTERPAY","AMAZON","CYBERSOURCE","KLARNA","PAYPAL","PAYPAL_EXPRESS","PAYPAL_EXPRESS_CREDIT","SAGE_PAY","SQUARE","BRAINTREE","BRAINTREE_VISA_CHECKOUT","CHASE_PAY","BRAINTREE_GOOGLE_PAY","WE_PAY","STRIPE_GOOGLE_PAY","ZIP","CONVERGE","STRIPEV3","BARCLAYCARD","ProjectionActionType","_instrumentRequestSender","loadInstruments","session","_getSessionContext","_getCurrentAccessToken","_getValidAccessToken","currentToken","deleteInstrument","_isValidVaultAccessToken","date","newDate","valueOf","isFuture","vaultAccessExpiry","setMinutes","getMinutes","getVaultAccessToken","storeId","transformResponse","_transformVaultedInstruments","vaulted_instruments","transformErrorResponse","transformVaultAccessResponse","expires_at","bigpay_token","defaultInstrument","default_instrument","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","trustedShippingAddress","trusted_shipping_address","_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","loadInstrumentsWithAddress","_shippingCountryRequestSender","selectOption","mergedOptions","_consignmentActionCreator","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","cloneDeep","input","cloneDeepSafe","cloneResult","createShallowEqualSelector","a","b","createCheckoutSelectorsFactory","getShippingOptions","getSelectedShippingOption","getBillingCountries","getSelectedPaymentMethod","getError","getSelectShippingOptionError","isPending","isSelectingShippingOption","isCustomerStepPending","isPaymentStepPending","isSubmittingOrder","createCheckoutStoreSelector","availableShippingOptions","createCheckoutStoreErrorSelector","getLoadCheckoutError","getUpdateCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getInitializeCustomerError","getUpdateBillingAddressError","getUpdateShippingAddressError","getDeleteConsignmentError","getUpdateConsignmentError","getCreateConsignmentsError","getInitializeShippingError","getApplyStoreCreditError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","createCheckoutStoreStatusSelector","some","isLoadingCheckout","isUpdatingCheckout","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isInitializingCustomer","isUpdatingBillingAddress","isUpdatingShippingAddress","isUpdatingConsignment","isDeletingConsignment","isCreatingConsignments","isInitializingShipping","isApplyingStoreCredit","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","_messageCustomizer","trim","_countryActionCreator","_couponActionCreator","_errorActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","isDevelopment","projection","_errorTransformer","isCheckoutServiceError","_selectorsFactory","_storeProjection","Synchronize","initial","notifyState","_dispatch","loadCheckoutAction","loadConfigAction","finalizeOrderIfNeeded","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","continueAsGuest","deinitializeShipping","assignItemsToAddress","unassignItemsToAddress","selectConsignmentShippingOption","updateBillingAddress","initializeSpamProtection","CheckoutService","createCheckoutService","setHost","paymentSettings","bigpayBaseUrl","createPaymentClient","orderRequestSender","MutationObserverFactory","remoteCheckoutRequestSender","createCustomerStrategyRegistry","consignmentRequestSender","consignmentActionCreator","createShippingStrategyRegistry","handleFrameLoadedEvent","hasAttribute","setAttribute","isCustomError","_untargetedMessagePoster","_messageHandlers","postComplete","_postMessage","postError","_transformError","postFrameError","untargeted","postFrameLoaded","postLoaded","postSignedOut","receiveStyles","handler","_notifyMessageHandlers","IframeEmbeddedCheckoutMessenger","NoopEmbeddedCheckoutMessenger","createEmbeddedCheckoutMessenger","parentWindow","parentOrigin","_logger","locales","translations","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","compile","_transformData","_transformConfig","output","defaultTranslations","_flattenObject","parentKey","resultKey","LanguageService","createLanguageService","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","positiveAmount","abs","decimalAmount","parsedIntegerAmount","_toFixed","precision","_storeConfig","_customerFormatter","shopperCurrency","_storeFormatter","toCustomerCurrency","exchangeRate","toStoreCurrency","CurrencyService","createCurrencyService","ButtonType","ButtonColor","_googlePayScriptLoader","_googlePayInitializer","_consigmentActionCreator","buttonType","buttonColor","Short","Default","_googlePayClient","loadPaymentData","_getPaymentDataRequest","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","google","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","companyName","address3","administrativeArea","postPaymentData","remoteBillingAddress","googlePayAddressMapped","createGooglePayPaymentProcessor","initializer","mapToInternalCart","promotions","notifications","promotion","banners","banner","placeholders","messageHtml","certificate","isShippingRequired","taxSubtotal","billingAddressRequestBody","existingBillingAddressRequestBody","_createOrUpdateBillingAddress"],"mappings":"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AN,MAIR17B,EAASzjB,SAAS,GAAoB4jB,kBAAkB,WACpD,WAAI,GACAlrB,EACAslD,EACAC,EACAwB,EACAN,MAIR17B,EAASzjB,SAAS,GAAoB6jB,yBAAyB,WAC3D,WAAI,GACAnrB,EACAslD,EACAC,EACAwB,EACAN,GACA,MAIR17B,EAASzjB,SAAS,GAAoBygD,yBAAyB,WAC3D,WAAI,GACA/nD,EACAirB,EACA87B,EACAG,EACA3B,EACAD,EACAlpB,EAA4CpR,EAAcH,GAC1D,IAAI,EAAyBG,OAIrCD,EAASzjB,SAAS,GAAoB0gD,WAAW,WAC7C,WAAI,GACAhoD,EACAirB,EACAq6B,EACAC,EACAwB,EACAG,EACAr8B,EACA,IAAI,EAAqBG,GACzB,IAAI,GAAgBA,OAI5BD,EAASzjB,SAAS,GAAoB2gD,sBAAsB,WACxD,WAAI,GACAjoD,EACAirB,EACA87B,EACAG,EACA3B,EACAD,EACA,YACItlD,EACA,IAAI,IACA,IAAI,IACA,IAAI,IAAsBgrB,UAO9CD,EAASzjB,SAAS,GAAoB4gD,QAAQ,WAC1C,WAAI,GACAloD,EACAslD,EACAC,EACA,IAAI,GAAgBv6B,OAI5BD,EAASzjB,SAAS,GAAoB8jB,YAAY,WAC9C,WAAI,GACAprB,EACAslD,EACAC,EACA,IAAI,IAAuBv6B,OAInCD,EAASzjB,SAAS,GAAoB6gD,mBAAmB,WACrD,WAAI,GACAnoD,EACAirB,EACA87B,EACAG,EACA3B,EACAD,EACA,YACItlD,EACA,IAAI,SAKhB+qB,EAASzjB,SAAS,GAAoB8gD,KAAK,WACvC,WAAI,GACApoD,EACAslD,EACAC,EACAwB,EACAD,EACA,IAAI,GAAgB97B,GACpBH,MAIRE,EAASzjB,SAAS,GAAoB+gD,UAAU,WAC5C,WAAI,GACAroD,EACAslD,EACAC,EACAz6B,MAIRC,EAASzjB,SAAS,GAAoBghD,UAAU,WAC5C,WAAI,GACAtoD,EACA+mD,EACAxB,EACAD,EACA,IAAI,GAAmBt6B,OAI/BD,EAASzjB,SAAS,GAAoBihD,aAAa,WAC/C,WAAI,GACAvoD,EACAslD,EA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","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 153);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","module.exports = require(\"rxjs\");","module.exports = require(\"@bigcommerce/memoize\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentMethod,\n    MissingPaymentToken,\n    MissingShippingAddress,\n    MissingSpamProtectionToken,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentToken:\n        return 'Unable to proceed because the token required to submit a payment is missing.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    case MissingDataErrorType.MissingShippingAddress:\n        return 'Unable to proceed because shipping address data is unavailable.';\n\n    case MissingDataErrorType.MissingSpamProtectionToken:\n        return 'Unable to proceed because spam protection token is not provided.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","module.exports = require(\"rxjs/operators\");","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken & { instrumentId: string }> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import EmbeddedCheckoutError from './embedded-checkout-error';\nimport { EmbeddedContentOptions } from './iframe-content';\n\nexport enum EmbeddedCheckoutEventType {\n    CheckoutComplete = 'CHECKOUT_COMPLETE',\n    CheckoutError = 'CHECKOUT_ERROR',\n    CheckoutLoaded = 'CHECKOUT_LOADED',\n    FrameError = 'FRAME_ERROR',\n    FrameLoaded = 'FRAME_LOADED',\n    SignedOut = 'SIGNED_OUT',\n}\n\nexport interface EmbeddedCheckoutEventMap {\n    [EmbeddedCheckoutEventType.CheckoutComplete]: EmbeddedCheckoutCompleteEvent;\n    [EmbeddedCheckoutEventType.CheckoutError]: EmbeddedCheckoutErrorEvent;\n    [EmbeddedCheckoutEventType.CheckoutLoaded]: EmbeddedCheckoutLoadedEvent;\n    [EmbeddedCheckoutEventType.FrameError]: EmbeddedCheckoutFrameErrorEvent;\n    [EmbeddedCheckoutEventType.FrameLoaded]: EmbeddedCheckoutFrameLoadedEvent;\n    [EmbeddedCheckoutEventType.SignedOut]: EmbeddedCheckoutSignedOutEvent;\n}\n\nexport type EmbeddedCheckoutEvent = (\n    EmbeddedCheckoutCompleteEvent |\n    EmbeddedCheckoutErrorEvent |\n    EmbeddedCheckoutFrameErrorEvent |\n    EmbeddedCheckoutFrameLoadedEvent |\n    EmbeddedCheckoutLoadedEvent |\n    EmbeddedCheckoutSignedOutEvent\n);\n\nexport interface EmbeddedCheckoutCompleteEvent {\n    type: EmbeddedCheckoutEventType.CheckoutComplete;\n}\n\nexport interface EmbeddedCheckoutErrorEvent {\n    type: EmbeddedCheckoutEventType.CheckoutError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutLoadedEvent {\n    type: EmbeddedCheckoutEventType.CheckoutLoaded;\n}\n\nexport interface EmbeddedCheckoutFrameErrorEvent {\n    type: EmbeddedCheckoutEventType.FrameError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutFrameLoadedEvent {\n    type: EmbeddedCheckoutEventType.FrameLoaded;\n    payload?: EmbeddedContentOptions;\n}\n\nexport interface EmbeddedCheckoutSignedOutEvent {\n    type: EmbeddedCheckoutEventType.SignedOut;\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        { message, errors }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {}\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { isPlainObject as lodashIsPlainObject } from 'lodash';\n\n// We need this wrapper because Lodash's version doesn't act as a type guard\nexport default function isPlainObject(value: any): value is object {\n    return lodashIsPlainObject(value);\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum StoreCreditActionType {\n    ApplyStoreCreditRequested = 'APPLY_STORE_CREDIT_REQUESTED',\n    ApplyStoreCreditSucceeded = 'APPLY_STORE_CREDIT_SUCCEEDED',\n    ApplyStoreCreditFailed = 'APPLY_STORE_CREDIT_FAILED',\n}\n\nexport type StoreCreditAction =\n    ApplyStoreCreditAction;\n\nexport type ApplyStoreCreditAction =\n    ApplyStoreCreditRequestedAction |\n    ApplyStoreCreditSucceededAction |\n    ApplyStoreCreditFailedAction;\n\nexport interface ApplyStoreCreditRequestedAction extends Action {\n    type: StoreCreditActionType.ApplyStoreCreditRequested;\n}\n\nexport interface ApplyStoreCreditSucceededAction extends Action<Checkout> {\n    type: StoreCreditActionType.ApplyStoreCreditSucceeded;\n}\n\nexport interface ApplyStoreCreditFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: StoreCreditActionType.ApplyStoreCreditFailed;\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed because the client library of a payment method is not loaded or ready to be used.');\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","module.exports = require(\"@bigcommerce/script-loader\");","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType\n): object is TEvent {\n    return object.type === type;\n}\n","module.exports = require(\"shallowequal\");","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","module.exports = require(\"local-storage-fallback\");","module.exports = require(\"reselect\");","import { parseUrl } from '../common/url';\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(\n        targetOrigin: string,\n        private _targetWindow?: Window\n    ) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void {\n        if (window === this._targetWindow) {\n            return;\n        }\n\n        if (!this._targetWindow) {\n            throw new Error('Unable to post message becauset target window is not set.');\n        }\n\n        this._targetWindow.postMessage(event, this._targetOrigin);\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum SpamProtectionActionType {\n    InitializeFailed = 'SPAM_PROTECTION_INITIALIZE_FAILED',\n    InitializeSucceeded = 'SPAM_PROTECTION_INITIALIZE_SUCCEEDED',\n    InitializeRequested = 'SPAM_PROTECTION_INITIALIZE_REQUESTED',\n    ExecuteRequested = 'SPAM_PROTECTION_EXECUTE_REQUESTED',\n    Completed = 'SPAM_PROTECTION_COMPLETED',\n    SubmitFailed = 'SPAM_PROTECTION_SUBMIT_FAILED',\n}\n\nexport type SpamProtectionAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction |\n    ExecuteRequestedAction |\n    CompletedAction |\n    SubmitFailedAction;\n\nexport interface InitializeRequestedAction extends Action {\n    type: SpamProtectionActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: SpamProtectionActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.InitializeFailed;\n}\n\nexport interface ExecuteRequestedAction extends Action {\n    type: SpamProtectionActionType.ExecuteRequested;\n}\n\nexport interface CompletedAction extends Action<string> {\n    type: SpamProtectionActionType.Completed;\n}\n\nexport interface SubmitFailedAction extends Action {\n    type: SpamProtectionActionType.SubmitFailed;\n}\n","import { memoize } from '@bigcommerce/memoize';\nimport { createSelector as defaultSelectorCreator } from 'reselect';\n\n/**\n * Decorate selector creators with the ability to memoize the return value of\n * their combiner if it is a function (which effectively works as a partially\n * applied combiner).\n */\nexport default function withMemoizedCombiner<T extends typeof defaultSelectorCreator>(\n    creator: T\n): T {\n    return ((...args: any[]) => {\n        const combiner = args.pop();\n\n        // Reselect's default `createSelector` has many overloads. To avoid having\n        // to redefine all of them, we're using `any` to bypass the typechecker.\n        return (creator as any)(...args, (...combinerArgs: any[]) => {\n            // Although there are many overloads, all of them have the last argument\n            // as the combiner.\n            const result = combiner(...combinerArgs);\n\n            if (typeof result === 'function') {\n                return memoize(result);\n            }\n\n            return result;\n        });\n    }) as T;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    @cachableAction\n    loadPaymentMethod(methodId: string, options?: RequestOptions & ActionOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { LoadingIndicatorStyles } from './embedded-checkout-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\nexport default class LoadingIndicator {\n    private _container: HTMLElement;\n    private _indicator: HTMLElement;\n    private _styles: LoadingIndicatorStyles;\n\n    constructor(\n        options?: { styles?: LoadingIndicatorStyles }\n    ) {\n        this._styles = { ...DEFAULT_STYLES, ...options && options.styles };\n\n        this._defineAnimation();\n\n        this._container = this._buildContainer();\n        this._indicator = this._buildIndicator();\n\n        this._container.appendChild(this._indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error('Unable to attach the loading indicator because the parent ID is not valid.');\n            }\n\n            parent.appendChild(this._container);\n        }\n\n        this._container.style.visibility = 'visible';\n        this._container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this._container.style.visibility = 'hidden';\n\n            this._container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this._container.addEventListener('transitionend', handleTransitionEnd);\n\n        this._container.style.opacity = '0';\n    }\n\n    private _buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        return container;\n    }\n\n    private _buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this._styles.size}px`;\n        indicator.style.height = `${this._styles.size}px`;\n        indicator.style.borderRadius = `${this._styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this._styles.backgroundColor} ${this._styles.backgroundColor} ${this._styles.color} ${this._styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private _defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        document.head.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            // We need to provide the 2nd parameter for IE11, even though it is\n            // 0 by default for all other browsers.\n            style.sheet.insertRule(`\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `, 0);\n        }\n    }\n}\n","import { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigin: string;\n\n    constructor(\n        sourceOrigin: string\n    ) {\n        this._sourceOrigin = parseUrl(sourceOrigin).origin;\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        listeners.push(listener);\n    }\n\n    removeListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach(listener => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if ((event.origin !== this._sourceOrigin) ||\n            !isIframeEvent(event.data as TEventMap[keyof TEventMap], event.data.type)\n        ) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[key]) => void>;\n};\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'customer.customerGroup',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { GooglePayCreator } from '../googlepay';\n\nimport { BraintreeClientCreator, BraintreeDataCollectorCreator, BraintreeHostWindow, BraintreePaypalCheckoutCreator, BraintreePaypalCreator, BraintreeThreeDSecureCreator, BraintreeVisaCheckoutCreator } from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport { BraintreeClient, BraintreeDataCollector, BraintreeModule, BraintreePaypal, BraintreePaypalCheckout, BraintreeThreeDSecure, BraintreeVisaCheckout, GooglePayBraintreeSDK } from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>;\n        paypal?: Promise<BraintreeDataCollector>;\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.SpamProtectionNotInitialized:\n        return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","export default class AmountTransformer {\n    constructor(private _decimalPlaces: number) {}\n\n    toInteger(amount: number): number {\n        return Math.round(amount * Math.pow(10, this._decimalPlaces));\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    // IE11 returns 80 or 443 for the port number depending on the URL scheme,\n    // even if the port number is not specified in the URL.\n    const port = anchor.port && url.indexOf(`${anchor.hostname}:${anchor.port}`) !== -1 ?\n        anchor.port :\n        '';\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: `${anchor.protocol}//${anchor.hostname}${port ? ':' + port : ''}`,\n        pathname: anchor.pathname,\n        port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from '@bigcommerce/memoize';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(\n    fn: TFunction\n): TFunction {\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize(store => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(decoratedFn as TFunction);\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                throw new Error('Decorator should be used in functions');\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nfunction bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nfunction bindDecorator<T extends Constructor<object>>(target: T): T;\nfunction bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\nexport default bindDecorator;\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(_: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this) as T;\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","module.exports = require(\"iframe-resizer\");","module.exports = require(\"iframe-resizer/js/iframeResizer.contentWindow\");","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {} as { [key: string]: any });\n    }\n\n    return object;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({ ...options, useCache: true }),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig(),\n            defer(async () => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                const { body } = await this._checkoutRequestSender.loadCheckout(context.checkoutId, options);\n\n                return createAction(CheckoutActionType.LoadCheckoutSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { find } from 'lodash';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { CheckoutIncludes, CheckoutRequestSender, InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, { ConsignmentsRequestBody, ConsignmentAssignmentRequestBody, ConsignmentCreateRequestBody, ConsignmentLineItem, ConsignmentRequestBody, ConsignmentShippingOptionRequestBody, ConsignmentUpdateRequestBody } from './consignment';\nimport { ConsignmentActionType, CreateConsignmentsAction, DeleteConsignmentAction, LoadShippingOptionsAction, UpdateConsignmentAction, UpdateShippingOptionAction } from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = find(lineItems, lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = find(cart.lineItems.physicalItems, lineItem => lineItem.id === itemId);\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nexport enum EmbeddedContentEventType {\n    StyleConfigured = 'STYLE_CONFIGURED',\n}\n\nexport interface EmbeddedContentEventMap {\n    [EmbeddedContentEventType.StyleConfigured]: EmbeddedContentStyleConfiguredEvent;\n}\n\nexport type EmbeddedContentEvent = (\n    EmbeddedContentStyleConfiguredEvent\n);\n\nexport interface EmbeddedContentStyleConfiguredEvent {\n    type: EmbeddedContentEventType.StyleConfigured;\n    payload: EmbeddedCheckoutStyles;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if there is an unexpected error and it is not possible to\n * recover from unless the shopper creates a new checkout session.\n */\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, {\n            message: message || 'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.name = 'UnrecoverableError';\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length ?\n            errors.map(message => ({ code: body.type, message })) :\n            [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors.reduce((result: string[], error) => {\n        if (error) {\n            return [...result, error];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string; message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, { InternalErrorResponseBody, StorefrontErrorResponseBody } from './error-response-body';\nimport { mapFromInternalErrorResponse, mapFromPaymentErrorResponse, mapFromStorefrontErrorResponse, RequestError, TimeoutError } from './errors';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) => mapFromInternalErrorResponse(response, message));\n        this.register('storefront', (response, message) => mapFromStorefrontErrorResponse(response, message));\n        this.register('payment', (response, message) => mapFromPaymentErrorResponse(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): RequestError {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ?\n                internalType :\n                'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && error.code && this._factoryMethods[error.code]) {\n            return error.code;\n        }\n\n        return 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string';\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [{\n            code: body.code || body.type,\n            message: body.detail || body.title,\n        }],\n    });\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<TState extends { [key: string]: any }, TAction extends Action>(\n    state: TState,\n    action: TAction\n): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, value => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","import isEqual from './is-equal';\n\n/**\n * Replace the current value with a new value if the former is different to the\n * latter.\n */\nexport default function replace<T>(currentValue: T, newValue?: T): T {\n    if (newValue === undefined || isEqual(currentValue, newValue)) {\n        return currentValue;\n    }\n\n    return newValue;\n}\n","import isEqual from './is-equal';\n\n/**\n * Set a new value to an object under a key if the new value is different to the\n * current value of the key.\n */\nexport default function objectSet<T extends { [key: string]: any }, K extends keyof T>(\n    object: T | undefined,\n    key: K,\n    value: T[K]\n): T {\n    if (object && object.hasOwnProperty(key) && isEqual(object[key], value)) {\n        return object;\n    }\n\n    return {\n        ...object as any,\n        [key]: value,\n    };\n}\n","import BillingAddress from './billing-address';\n\nexport default interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport const DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet, replace } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState, DEFAULT_STATE } from './billing-address-state';\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return replace(data, action.payload && action.payload.billingAddress);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(errors, 'continueAsGuestError', undefined);\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return objectSet(errors, 'continueAsGuestError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return objectSet(statuses, 'isContinuingAsGuest', true);\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(statuses, 'isContinuingAsGuest', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { isArray } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\nimport replace from './replace';\n\nexport interface ArrayReplaceOptions {\n    matchObject(objectA: any, objectB: any): boolean;\n}\n\nfunction arrayReplace<T>(currentArray: T[] | undefined, newArray: T[], options?: ArrayReplaceOptions): T[];\nfunction arrayReplace<T>(currentArray: T[], newArray?: T[], options?: ArrayReplaceOptions): undefined;\nfunction arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined;\nfunction arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined {\n    const { matchObject = (a: any, b: any) => a.id !== undefined && a.id === b.id } = options || {};\n\n    // Return the new array if the current array does not exist\n    if (!currentArray) {\n        return newArray;\n    }\n\n    // If the new array does not exist, or the current array is strictly equal\n    // to the new array, exit early and return the current array so that the\n    // object reference doesn't change\n    if (!newArray || currentArray === newArray) {\n        return currentArray;\n    }\n\n    // Otherwise, try to replace the items of the current array with the new\n    // array. If the item from the two arrays are the same, keep the current\n    // one. Do it recursively until all arrays are replaced.\n    let sameAsCurrentCount = 0;\n    let sameAsNewCount = 0;\n\n    const countSameAsReplaced = <T>(replacedValue: T, currentValue: T, newValue: T): T => {\n        sameAsCurrentCount += replacedValue === currentValue ? 1 : 0;\n        sameAsNewCount += replacedValue === newValue ? 1 : 0;\n\n        return replacedValue;\n    };\n\n    const result = newArray.map((newItem, index) => {\n        const currentItem = currentArray && currentArray[index];\n\n        if (isPlainObject(currentItem) && isPlainObject(newItem)) {\n            if (matchObject(currentItem, newItem)) {\n                return countSameAsReplaced(\n                    objectMerge(currentItem, newItem),\n                    currentItem,\n                    newItem\n                );\n            }\n\n            return countSameAsReplaced(\n                replace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        if (isArray(currentItem) && isArray(newItem)) {\n            return countSameAsReplaced(\n                arrayReplace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        return countSameAsReplaced(\n            replace(currentItem, newItem),\n            currentItem,\n            newItem\n        );\n    }) as T[];\n\n    // If all items in the result are identical to the current array, and the\n    // current array and the new array have the same size, simply return the\n    // current array instead of the result.\n    if (sameAsCurrentCount === newArray.length && (currentArray && currentArray.length === newArray.length)) {\n        return currentArray;\n    }\n\n    // If all items in the result are identical to the new array, simply return\n    // the new array.\n    if (sameAsNewCount === newArray.length) {\n        return newArray;\n    }\n\n    return result;\n}\n\nexport default arrayReplace;\n","import { isArray } from 'lodash';\n\nimport arrayReplace from './array-replace';\nimport isPlainObject from './is-plain-object';\nimport objectSet from './object-set';\n\nfunction objectMerge<T extends object>(currentObject: T, newObject?: Partial<T>): T;\nfunction objectMerge<T extends object>(currentObject: T | undefined, newObject: Partial<T>): Partial<T>;\nfunction objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | undefined;\nfunction objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | Partial<T> | undefined {\n    if (!currentObject) {\n        return newObject;\n    }\n\n    // If the new object does not exist but the current object does, or the new\n    // object is strictly equal to the current object, return the current object\n    if (!newObject || currentObject === newObject) {\n        return currentObject;\n    }\n\n    // If both objects exist, but some values might be different, perform a merge.\n    // Retain values that are equal and only replace them with the new values if\n    // they are different.\n    return (Object.keys(newObject) as Array<keyof T>)\n        .reduce((result, key) => {\n            const currentValue = result[key];\n            const newValue = newObject[key];\n\n            if (isPlainObject(currentValue) && isPlainObject(newValue)) {\n                return objectSet(result, key, objectMerge(currentValue, newValue));\n            }\n\n            if (isArray(currentValue) && isArray(newValue)) {\n                return objectSet(result, key, arrayReplace(currentValue, newValue) as any);\n            }\n\n            return objectSet(result, key, newValue as any);\n        }, currentObject);\n}\n\nexport default objectMerge;\n","import Cart from './cart';\n\nexport default interface CartState {\n    data?: Cart;\n    errors: CartErrorsState;\n    statuses: CartStatusesState;\n}\n\nexport interface CartErrorsState {\n    loadError?: Error;\n}\n\nexport interface CartStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState, DEFAULT_STATE } from './cart-state';\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectMerge(data, action.payload && action.payload.cart);\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n","import { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonState {\n    data: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonDataState | undefined\n    };\n    errors: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonErrorsState | undefined\n    };\n    statuses: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonStatusesState | undefined\n    };\n}\n\nexport interface CheckoutButtonDataState {\n    initializedContainers: {\n        [key: string]: boolean;\n    };\n}\n\nexport interface CheckoutButtonErrorsState {\n    initializeError?: Error;\n    deinitializeError?: Error;\n}\n\nexport interface CheckoutButtonStatusesState {\n    isInitializing?: boolean;\n    isDeinitializing?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonDataState, CheckoutButtonErrorsState, CheckoutButtonStatusesState, DEFAULT_STATE } from './checkout-button-state';\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonDataState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        if (!action.meta || !action.meta.containerId) {\n            return data;\n        }\n\n        return objectMerge(data, {\n            initializedContainers: {\n                [action.meta.containerId]: true,\n            },\n        });\n\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(data, 'initializedContainers', {});\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(errors, 'initializeError', undefined);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return objectSet(errors, 'initializeError', action.payload);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(errors, 'deinitializeError', undefined);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return objectSet(errors, 'deinitializeError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return objectSet(statuses, 'isInitializing', true);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(statuses, 'isInitializing', false);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return objectSet(statuses, 'isDeinitializing', true);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(statuses, 'isDeinitializing', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Config from './config';\n\nexport default interface ConfigState {\n    data?: Config;\n    meta?: ConfigMetaState;\n    errors: ConfigErrorsState;\n    statuses: ConfigStatusesState;\n}\n\nexport interface ConfigMetaState {\n    externalSource?: string;\n}\n\nexport interface ConfigErrorsState {\n    loadError?: Error;\n}\n\nexport interface ConfigStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState, DEFAULT_STATE } from './config-state';\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport Coupon from './coupon';\n\nexport default interface CouponState {\n    data?: Coupon[];\n    errors: CouponErrorsState;\n    statuses: CouponStatusesState;\n}\n\nexport interface CouponErrorsState {\n    applyCouponError?: RequestError<StorefrontErrorResponseBody>;\n    removeCouponError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface CouponStatusesState {\n    isApplyingCoupon?: boolean;\n    isRemovingCoupon?: boolean;\n}\n\nexport const DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState, DEFAULT_STATE } from './coupon-state';\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return arrayReplace(data, action.payload && action.payload.coupons);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return objectSet(errors, 'applyCouponError', undefined);\n\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(errors, 'applyCouponError', action.payload);\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return objectSet(errors, 'removeCouponError', undefined);\n\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(errors, 'removeCouponError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return objectSet(statuses, 'isApplyingCoupon', true);\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(statuses, 'isApplyingCoupon', false);\n\n    case CouponActionType.RemoveCouponRequested:\n        return objectSet(statuses, 'isRemovingCoupon', true);\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(statuses, 'isRemovingCoupon', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport GiftCertificate from './gift-certificate';\n\nexport default interface GiftCertificateState {\n    data?: GiftCertificate[];\n    errors: GiftCertificateErrorsState;\n    statuses: GiftCertificateStatusesState;\n}\n\nexport interface GiftCertificateErrorsState {\n    applyGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n    removeGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface GiftCertificateStatusesState {\n    isApplyingGiftCertificate?: boolean;\n    isRemovingGiftCertificate?: boolean;\n}\n\nexport const DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { DEFAULT_STATE, GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return arrayReplace(data, action.payload && action.payload.giftCertificates);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return objectSet(errors, 'applyGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(errors, 'applyGiftCertificateError', action.payload);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectSet(errors, 'removeGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(errors, 'removeGiftCertificateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return objectSet(statuses, 'isApplyingGiftCertificate', true);\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(statuses, 'isApplyingGiftCertificate', false);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return objectSet(statuses, 'isRemovingGiftCertificate', true);\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(statuses, 'isRemovingGiftCertificate', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Customer from './customer';\n\nexport default interface CustomerState {\n    data?: Customer;\n}\n\nexport const DEFAULT_STATE: CustomerState = {};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { objectMerge } from '../common/utility';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectMerge(data, action.payload && action.payload.customer);\n\n    default:\n        return data;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyDataState, CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction\n): CustomerStrategyDataState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(errors, {\n            signInError: undefined,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n        return objectMerge(errors, {\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(errors, {\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return objectMerge(errors, {\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n        return objectMerge(statuses, {\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(statuses, {\n            isSigningIn: false,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return objectMerge(statuses, {\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(statuses, {\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         });\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         });\n\n    default:\n        return statuses;\n    }\n}\n","import Country from './country';\n\nexport default interface CountryState {\n    data?: Country[];\n    errors: CountryErrorsState;\n    statuses: CountryStatusesState;\n}\n\nexport interface CountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface CountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState, DEFAULT_STATE } from './country-state';\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport { InternalOrderMeta, InternalOrderPayment } from './internal-order';\nimport Order from './order';\n\nexport default interface OrderState {\n    data?: OrderDataState;\n    meta?: OrderMetaState;\n    errors: OrderErrorsState;\n    statuses: OrderStatusesState;\n}\n\nexport type OrderDataState = Omit<Order, 'billingAddress' | 'coupons'>;\n\nexport interface OrderMetaState extends InternalOrderMeta {\n    token?: string;\n    orderToken?: string;\n    callbackUrl?: string;\n    payment?: InternalOrderPayment;\n    spamProtectionToken?: string;\n}\n\nexport interface OrderErrorsState {\n    loadError?: Error;\n    submitError?: Error;\n    finalizeError?: Error;\n}\n\nexport interface OrderStatusesState {\n    isLoading?: boolean;\n    isSpamProtectionExecuting?: boolean;\n    isSubmitting?: boolean;\n    isFinalizing?: boolean;\n}\n\nexport const DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { DEFAULT_STATE, OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection';\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return objectMerge(data, omit(action.payload, ['billingAddress', 'coupons'])) as OrderDataState;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction | SpamProtectionAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectMerge(meta, {\n            ...action.meta,\n            callbackUrl: action.payload && action.payload.order.callbackUrl,\n            orderToken: action.payload && action.payload.order.token,\n            payment: action.payload && action.payload.order && action.payload.order.payment,\n        });\n\n    case SpamProtectionActionType.Completed:\n        return objectSet(meta, 'spamProtectionToken', action.payload);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction | SpamProtectionAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case SpamProtectionActionType.ExecuteRequested:\n        return objectSet(statuses, 'isSpamProtectionExecuting', true);\n\n    case SpamProtectionActionType.Completed:\n    case SpamProtectionActionType.SubmitFailed:\n        return objectSet(statuses, 'isSpamProtectionExecuting', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport default interface PaymentMethodState {\n    data?: PaymentMethod[];\n    meta?: PaymentMethodMeta;\n    errors: PaymentMethodErrorsState;\n    statuses: PaymentMethodStatusesState;\n}\n\nexport interface PaymentMethodErrorsState {\n    loadMethodId?: string;\n    loadError?: Error;\n    loadMethodError?: Error;\n}\n\nexport interface PaymentMethodStatusesState {\n    loadMethodId?: string;\n    isLoading?: boolean;\n    isLoadingMethod?: boolean;\n}\n\nexport const DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, mergeOrPush, objectMerge, objectSet } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE, PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return mergeOrPush(data || [], action.payload, action.payload && {\n            id: action.payload.id,\n            gateway: action.payload.gateway,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return arrayReplace(data, action.payload, {\n            matchObject: (methodA, methodB) => (\n                methodA.id === methodB.id && methodA.gateway === methodB.gateway\n            ),\n        });\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return objectMerge(errors, {\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(errors, {\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return objectMerge(statuses, {\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(statuses, {\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { findIndex, pick, pickBy, ValueKeyIteratee } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item?: T,\n    predicate?: ValueKeyIteratee<T>\n): T[] {\n    if (!item) {\n        return array;\n    }\n\n    const defaultPredicate = pick(item, 'id');\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : (predicate || defaultPredicate));\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        const existingItem = array[index];\n\n        newArray[index] = isPlainObject(existingItem) && isPlainObject(item) ?\n            objectMerge(existingItem, item) :\n            item;\n    }\n\n    return newArray;\n}\n","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyDataState, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction\n): PaymentStrategyDataState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(errors, {\n            executeError: undefined,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return objectMerge(errors, {\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(errors, {\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return objectMerge(errors, {\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return objectMerge(statuses, {\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(statuses, {\n            isExecuting: false,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return objectMerge(statuses, {\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(statuses, {\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import Instrument, { VaultAccessToken } from './instrument';\n\nexport default interface InstrumentState {\n    data?: Instrument[];\n    meta?: InstrumentMeta;\n    errors: InstrumentErrorState;\n    statuses: InstrumentStatusState;\n}\n\nexport interface InstrumentErrorState {\n    deleteError?: Error;\n    failedInstrument?: string;\n    loadError?: Error;\n    vaultError?: Error;\n}\n\nexport interface InstrumentStatusState {\n    isDeleting?: boolean;\n    isLoading?: boolean;\n    isVaulting?: boolean;\n    deletingInstrument?: string;\n}\n\nexport type InstrumentMeta = VaultAccessToken;\n\nexport const DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../../common/utility';\n\nimport Instrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { DEFAULT_STATE, InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Instrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): Instrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return arrayReplace(data, action.payload && action.payload.vaultedInstruments || []);\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return arrayReplace(data, data.filter(instrument =>\n            instrument.bigpayToken !== (action.meta && action.meta.instrumentId)\n        ));\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(errors, {\n            deleteError: undefined,\n            failedInstrument: undefined,\n        });\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(errors, {\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return objectMerge(statuses, {\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        });\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(statuses, {\n            isDeleting: false,\n            deletingInstrument: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { AmazonPayRemoteCheckout } from './methods';\n\nexport default interface RemoteCheckoutState {\n    data: RemoteCheckoutStateData;\n}\n\nexport interface RemoteCheckoutStateData {\n    amazon?: AmazonPayRemoteCheckout;\n}\n\nexport const DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return objectSet(data, 'billing' as any, action.payload && action.payload.billing);\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return objectSet(data, 'shipping' as any, action.payload && action.payload.shipping);\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return objectSet(data, 'settings', action.payload);\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n","import Consignment from './consignment';\n\nexport default interface ConsignmentState {\n    data?: Consignment[];\n    errors: ConsignmentErrorsState;\n    statuses: ConsignmentStatusesState;\n}\n\nexport interface ConsignmentErrorsState {\n    loadError?: Error;\n    loadShippingOptionsError?: Error;\n    createError?: Error;\n    updateError: { [key: string]: Error | undefined };\n    deleteError: { [key: string]: Error | undefined };\n    updateShippingOptionError: { [key: string]: Error | undefined };\n}\n\nexport interface ConsignmentStatusesState {\n    isLoading?: boolean;\n    isLoadingShippingOptions?: boolean;\n    isCreating?: boolean;\n    isUpdating: { [key: string]: boolean };\n    isDeleting: { [key: string]: boolean };\n    isUpdatingShippingOption: { [key: string]: boolean };\n}\n\nexport const DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState, DEFAULT_STATE } from './consignment-state';\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n        return arrayReplace(data, action.payload && action.payload.consignments);\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return arrayReplace(data, []);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return objectSet(errors, 'createError', undefined);\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(errors, 'createError', action.payload);\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(statuses, 'isLoadingShippingOptions', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(statuses, 'isLoadingShippingOptions', false);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return objectSet(statuses, 'isCreating', true);\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(statuses, 'isCreating', false);\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { Country } from '../geography';\n\nexport default interface ShippingCountryState {\n    data?: Country[];\n    errors: ShippingCountryErrorsState;\n    statuses: ShippingCountryStatusesState;\n}\n\nexport interface ShippingCountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface ShippingCountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { DEFAULT_STATE, ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyDataState, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction\n): ShippingStrategyDataState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(errors, {\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return objectMerge(errors, {\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(errors, {\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return objectMerge(errors, {\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return objectMerge(statuses, {\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(statuses, {\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return objectMerge(statuses, {\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(statuses, {\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditState, { StoreCreditErrorsState, StoreCreditStatusesState } from './store-credit-state';\n\nconst DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function storeCreditReducer(\n    state: StoreCreditState = DEFAULT_STATE,\n    action: Action\n): StoreCreditState {\n    const reducer = combineReducers<StoreCreditState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: StoreCreditErrorsState = DEFAULT_STATE.errors,\n    action: StoreCreditAction\n): StoreCreditErrorsState {\n    switch (action.type) {\n    case StoreCreditActionType.ApplyStoreCreditRequested:\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n        return objectSet(errors, 'applyError', undefined);\n\n    case StoreCreditActionType.ApplyStoreCreditFailed:\n        return objectSet(errors, 'applyError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: StoreCreditStatusesState = DEFAULT_STATE.statuses,\n    action: StoreCreditAction\n): StoreCreditStatusesState {\n    switch (action.type) {\n    case StoreCreditActionType.ApplyStoreCreditRequested:\n        return objectSet(statuses, 'isApplying', true);\n\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n    case StoreCreditActionType.ApplyStoreCreditFailed:\n        return objectSet(statuses, 'isApplying', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport Checkout from './checkout';\n\nexport default interface CheckoutState {\n    data?: CheckoutDataState;\n    errors: CheckoutErrorsState;\n    statuses: CheckoutStatusesState;\n}\n\nexport type CheckoutDataState = Omit<Checkout, 'billingAddress' | 'cart' | 'consignments' | 'coupons' | 'giftCertificates'>;\n\nexport interface CheckoutErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n}\n\nexport interface CheckoutStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\nimport { StoreCreditAction, StoreCreditActionType } from '../store-credit';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState, DEFAULT_STATE } from './checkout-state';\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction |\n        GiftCertificateAction | OrderAction | StoreCreditAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectMerge(data, omit(action.payload, [\n            'billingAddress',\n            'cart',\n            'consignments',\n            'customer',\n            'coupons',\n            'giftCertificates',\n        ])) as CheckoutDataState;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectSet(data, 'orderId', action.payload && action.payload.order.orderId) ;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends object, TMap extends { [key: string]: T }>(map: TMap): TMap {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as { [key: string]: T }) as TMap;\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { ConfigState, DEFAULT_STATE } from '../config';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\nexport default interface FormSelector {\n    getShippingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getBillingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n}\n\nexport type FormSelectorFactory = (state: ConfigState) => FormSelector;\n\nexport function createFormSelectorFactory(): FormSelectorFactory {\n    const getShippingAddressFields = createSelector(\n        (state: ConfigState) => state.data,\n        config => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = config ? config.storeConfig.formFields.shippingAddressFields : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    const getBillingAddressFields = createSelector(\n        (state: ConfigState) => state.data,\n        config => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = config ? config.storeConfig.formFields.billingAddressFields : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    function processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    function processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE\n    ): FormSelector => {\n        return {\n            getShippingAddressFields: getShippingAddressFields(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n        };\n    });\n}\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { createSelector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\nimport ShippingOption from './shipping-option';\n\nexport default interface ConsignmentSelector {\n    getConsignments(): Consignment[] | undefined;\n    getConsignmentById(id: string): Consignment | undefined;\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined;\n    getShippingOption(): ShippingOption | undefined;\n    getLoadError(): Error | undefined;\n    getCreateError(): Error | undefined;\n    getLoadShippingOptionsError(): Error | undefined;\n    getUnassignedItems(): PhysicalItem[];\n    getUpdateError(consignmentId?: string): Error | undefined;\n    getDeleteError(consignmentId?: string): Error | undefined;\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined;\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingShippingOptions(): boolean;\n    isCreating(): boolean;\n    isUpdating(consignmentId?: string): boolean;\n    isDeleting(consignmentId?: string): boolean;\n    isAssigningItems(address: AddressRequestBody): boolean;\n    isUpdatingShippingOption(consignmentId?: string): boolean;\n}\n\nexport type ConsignmentSelectorFactory = (\n    state: ConsignmentState,\n    cart: CartSelector\n) => ConsignmentSelector;\n\ninterface ConsignmentSelectorDependencies {\n    cart: CartSelector;\n}\n\nexport function createConsignmentSelectorFactory(): ConsignmentSelectorFactory {\n    const getConsignments = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => consignments\n    );\n\n    const getConsignmentById = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (id: string) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, { id });\n        }\n    );\n\n    const getConsignmentByAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (address: AddressRequestBody) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, consignment =>\n                isAddressEqual(consignment.shippingAddress, address)\n            );\n        }\n    );\n\n    const getShippingOption = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (consignments && consignments.length) {\n                return consignments[0].selectedShippingOption;\n            }\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: ConsignmentState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getCreateError = createSelector(\n        (state: ConsignmentState) => state.errors.createError,\n        error => () => error\n    );\n\n    const getLoadShippingOptionsError = createSelector(\n        (state: ConsignmentState) => state.errors.loadShippingOptionsError,\n        error => () => error\n    );\n\n    const getUnassignedItems = createSelector(\n        getConsignments,\n        (_: ConsignmentState, { cart }: ConsignmentSelectorDependencies) => cart.getCart,\n        (getConsignments, getCart) => () => {\n            const cart = getCart();\n\n            if (!cart) {\n                return [];\n            }\n\n            const assignedLineItemIds = (getConsignments() || []).reduce(\n                (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n                [] as string[]\n            );\n\n            return (cart.lineItems.physicalItems || []).filter(\n                item => assignedLineItemIds.indexOf(item.id as string) < 0\n            );\n        }\n    );\n\n    const getUpdateError = createSelector(\n        (state: ConsignmentState) => state.errors.updateError,\n        updateError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateError[consignmentId];\n            }\n\n            return find(updateError);\n        }\n    );\n\n    const getDeleteError = createSelector(\n        (state: ConsignmentState) => state.errors.deleteError,\n        deleteError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return deleteError[consignmentId];\n            }\n\n            return find(deleteError);\n        }\n    );\n\n    const getItemAssignmentError = createSelector(\n        getConsignmentByAddress,\n        getUpdateError,\n        getCreateError,\n        (getConsignmentByAddress, getUpdateError, getCreateError) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? getUpdateError(consignment.id) : getCreateError();\n        }\n    );\n\n    const getUpdateShippingOptionError = createSelector(\n        (state: ConsignmentState) => state.errors.updateShippingOptionError,\n        updateShippingOptionError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateShippingOptionError[consignmentId];\n            }\n\n            return find(updateShippingOptionError);\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isLoadingShippingOptions = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoadingShippingOptions,\n        isLoadingShippingOptions => () => isLoadingShippingOptions === true\n    );\n\n    const isCreating = createSelector(\n        (state: ConsignmentState) => state.statuses.isCreating,\n        isCreating => () => isCreating === true\n    );\n\n    const isUpdating = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdating,\n        isUpdating => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdating[consignmentId] === true;\n            }\n\n            return find(isUpdating) === true;\n        }\n    );\n\n    const isDeleting = createSelector(\n        (state: ConsignmentState) => state.statuses.isDeleting,\n        isDeleting => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isDeleting[consignmentId] === true;\n            }\n\n            return find(isDeleting) === true;\n        }\n    );\n\n    const isAssigningItems = createSelector(\n        getConsignmentByAddress,\n        isUpdating,\n        isCreating,\n        (getConsignmentByAddress, isUpdating, isCreating) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? isUpdating(consignment.id) : isCreating();\n        }\n    );\n\n    const isUpdatingShippingOption = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdatingShippingOption,\n        isUpdatingShippingOption => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdatingShippingOption[consignmentId] === true;\n            }\n\n            return find(isUpdatingShippingOption) === true;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE,\n        cart: CartSelector\n    ): ConsignmentSelector => {\n        return {\n            getConsignments: getConsignments(state),\n            getConsignmentById: getConsignmentById(state),\n            getConsignmentByAddress: getConsignmentByAddress(state),\n            getShippingOption: getShippingOption(state),\n            getLoadError: getLoadError(state),\n            getCreateError: getCreateError(state),\n            getLoadShippingOptionsError: getLoadShippingOptionsError(state),\n            getUnassignedItems: getUnassignedItems(state, { cart }),\n            getUpdateError: getUpdateError(state),\n            getDeleteError: getDeleteError(state),\n            getItemAssignmentError: getItemAssignmentError(state),\n            getUpdateShippingOptionError: getUpdateShippingOptionError(state),\n            isLoading: isLoading(state),\n            isLoadingShippingOptions: isLoadingShippingOptions(state),\n            isCreating: isCreating(state),\n            isUpdating: isUpdating(state),\n            isDeleting: isDeleting(state),\n            isAssigningItems: isAssigningItems(state),\n            isUpdatingShippingOption: isUpdatingShippingOption(state),\n        };\n    });\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport default interface StoreCreditState {\n    errors: StoreCreditErrorsState;\n    statuses: StoreCreditStatusesState;\n}\n\nexport interface StoreCreditErrorsState {\n    applyError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface StoreCreditStatusesState {\n    isApplying?: boolean;\n}\n\nexport const DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n","import { createBillingAddressSelectorFactory } from '../billing';\nimport { createCartSelectorFactory } from '../cart';\nimport { createCheckoutButtonSelectorFactory } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { createConfigSelectorFactory } from '../config';\nimport { createCouponSelectorFactory, createGiftCertificateSelectorFactory } from '../coupon';\nimport { createCustomerSelectorFactory, createCustomerStrategySelectorFactory } from '../customer';\nimport { createFormSelectorFactory } from '../form';\nimport { createCountrySelectorFactory } from '../geography';\nimport { createOrderSelectorFactory } from '../order';\nimport { createPaymentMethodSelectorFactory, createPaymentSelectorFactory, createPaymentStrategySelectorFactory } from '../payment';\nimport { createInstrumentSelectorFactory } from '../payment/instrument';\nimport { createRemoteCheckoutSelectorFactory } from '../remote-checkout';\nimport { createConsignmentSelectorFactory, createShippingAddressSelectorFactory, createShippingCountrySelectorFactory, createShippingStrategySelectorFactory } from '../shipping';\nimport { createStoreCreditSelectorFactory } from '../store-credit';\n\nimport { createCheckoutSelectorFactory } from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport type InternalCheckoutSelectorsFactory = (\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n) => InternalCheckoutSelectors;\n\nexport function createInternalCheckoutSelectorsFactory(): InternalCheckoutSelectorsFactory {\n    const createBillingAddressSelector = createBillingAddressSelectorFactory();\n    const createCartSelector = createCartSelectorFactory();\n    const createCheckoutButtonSelector = createCheckoutButtonSelectorFactory();\n    const createConfigSelector = createConfigSelectorFactory();\n    const createCountrySelector = createCountrySelectorFactory();\n    const createCouponSelector = createCouponSelectorFactory();\n    const createCustomerSelector = createCustomerSelectorFactory();\n    const createCustomerStrategySelector = createCustomerStrategySelectorFactory();\n    const createGiftCertificateSelector = createGiftCertificateSelectorFactory();\n    const createInstrumentSelector = createInstrumentSelectorFactory();\n    const createFormSelector = createFormSelectorFactory();\n    const createPaymentMethodSelector = createPaymentMethodSelectorFactory();\n    const createPaymentStrategySelector = createPaymentStrategySelectorFactory();\n    const createRemoteCheckoutSelector = createRemoteCheckoutSelectorFactory();\n    const createShippingAddressSelector = createShippingAddressSelectorFactory();\n    const createShippingCountrySelector = createShippingCountrySelectorFactory();\n    const createShippingStrategySelector = createShippingStrategySelectorFactory();\n    const createConsignmentSelector = createConsignmentSelectorFactory();\n    const createCheckoutSelector = createCheckoutSelectorFactory();\n    const createOrderSelector = createOrderSelectorFactory();\n    const createPaymentSelector = createPaymentSelectorFactory();\n    const createStoreCreditSelector = createStoreCreditSelectorFactory();\n\n    return (state, options = {}) => {\n        const billingAddress = createBillingAddressSelector(state.billingAddress);\n        const cart = createCartSelector(state.cart);\n        const checkoutButton = createCheckoutButtonSelector(state.checkoutButton);\n        const config = createConfigSelector(state.config);\n        const countries = createCountrySelector(state.countries);\n        const coupons = createCouponSelector(state.coupons);\n        const customer = createCustomerSelector(state.customer);\n        const customerStrategies = createCustomerStrategySelector(state.customerStrategies);\n        const form = createFormSelector(state.config);\n        const giftCertificates = createGiftCertificateSelector(state.giftCertificates);\n        const instruments = createInstrumentSelector(state.instruments);\n        const paymentMethods = createPaymentMethodSelector(state.paymentMethods);\n        const paymentStrategies = createPaymentStrategySelector(state.paymentStrategies);\n        const remoteCheckout = createRemoteCheckoutSelector(state.remoteCheckout);\n        const shippingAddress = createShippingAddressSelector(state.consignments);\n        const shippingCountries = createShippingCountrySelector(state.shippingCountries);\n        const shippingStrategies = createShippingStrategySelector(state.shippingStrategies);\n        const storeCredit = createStoreCreditSelector(state.storeCredit);\n\n        // Compose selectors\n        const consignments = createConsignmentSelector(state.consignments, cart);\n        const checkout = createCheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n        const order = createOrderSelector(state.order, billingAddress, coupons);\n        const payment = createPaymentSelector(checkout, order);\n\n        const selectors = {\n            billingAddress,\n            cart,\n            checkout,\n            checkoutButton,\n            config,\n            consignments,\n            countries,\n            coupons,\n            customer,\n            customerStrategies,\n            form,\n            giftCertificates,\n            instruments,\n            order,\n            payment,\n            paymentMethods,\n            paymentStrategies,\n            remoteCheckout,\n            shippingAddress,\n            shippingCountries,\n            shippingStrategies,\n            storeCredit,\n        };\n\n        return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n    };\n}\n\nexport default function createInternalCheckoutSelectors(\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n): InternalCheckoutSelectors {\n    return createInternalCheckoutSelectorsFactory()(state, options);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState, { DEFAULT_STATE } from './billing-address-state';\n\nexport default interface BillingAddressSelector {\n    getBillingAddress(): BillingAddress | undefined;\n    getUpdateError(): Error | undefined;\n    getContinueAsGuestError(): Error | undefined;\n    getLoadError(): Error | undefined;\n    isUpdating(): boolean;\n    isContinuingAsGuest(): boolean;\n    isLoading(): boolean;\n}\n\nexport type BillingAddressSelectorFactory = (state: BillingAddressState) => BillingAddressSelector;\n\nexport function createBillingAddressSelectorFactory(): BillingAddressSelectorFactory {\n    const getBillingAddress = createSelector(\n        (state: BillingAddressState) => state.data,\n        data => () => data\n    );\n\n    const getUpdateError = createSelector(\n        (state: BillingAddressState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const getContinueAsGuestError = createSelector(\n        (state: BillingAddressState) => state.errors.continueAsGuestError,\n        error => () => error\n    );\n\n    const getLoadError = createSelector(\n        (state: BillingAddressState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isUpdating = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isUpdating,\n        status => () => status\n    );\n\n    const isContinuingAsGuest = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isContinuingAsGuest,\n        status => () => status\n    );\n\n    const isLoading = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: BillingAddressState = DEFAULT_STATE\n    ): BillingAddressSelector => {\n        return {\n            getBillingAddress: getBillingAddress(state),\n            getUpdateError: getUpdateError(state),\n            getContinueAsGuestError: getContinueAsGuestError(state),\n            getLoadError: getLoadError(state),\n            isUpdating: isUpdating(state),\n            isContinuingAsGuest: isContinuingAsGuest(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoize, memoizeOne } from '@bigcommerce/memoize';\nimport { find, some, values } from 'lodash';\n\nimport { createSelector } from '../common/selector';\n\nimport CheckoutButtonState, { DEFAULT_STATE } from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonSelector {\n    getState(): CheckoutButtonState;\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean;\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean;\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean;\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n}\n\nexport type CheckoutButtonSelectorFactory = (state: CheckoutButtonState) => CheckoutButtonSelector;\n\nexport function createCheckoutButtonSelectorFactory(): CheckoutButtonSelectorFactory {\n    const getState = createSelector(\n        (state: CheckoutButtonState) => state,\n        state => () => state\n    );\n\n    const isInitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isInitializing) === true;\n            }\n\n            return some(statuses, { isInitializing: true });\n        })\n    );\n\n    const isInitialized = createSelector(\n        (state: CheckoutButtonState) => state.data,\n        data => memoize((methodId: CheckoutButtonMethodType, containerId?: string) => {\n            const method = data[methodId];\n\n            if (!method) {\n                return false;\n            }\n\n            if (!containerId) {\n                return some(method.initializedContainers, isInitialized => isInitialized === true);\n            }\n\n            return method.initializedContainers[containerId] === true;\n        })\n    );\n\n    const isDeinitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isDeinitializing) === true;\n            }\n\n            return some(statuses, { isDeinitializing: true });\n        })\n    );\n\n    const getInitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.initializeError));\n\n            return method && method.initializeError;\n        })\n    );\n\n    const getDeinitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.deinitializeError));\n\n            return method && method.deinitializeError;\n        })\n    );\n\n    return memoizeOne((\n        state: CheckoutButtonState = DEFAULT_STATE\n    ): CheckoutButtonSelector => {\n        return {\n            getState: getState(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isDeinitializing: isDeinitializing(state),\n            getInitializeError: getInitializeError(state),\n            getDeinitializeError: getDeinitializeError(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState, { DEFAULT_STATE } from './coupon-state';\n\nexport default interface CouponSelector {\n    getCoupons(): Coupon[] | undefined;\n    getRemoveError(): RequestError | undefined;\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type CouponSelectorFactory = (state: CouponState) => CouponSelector;\n\nexport function createCouponSelectorFactory(): CouponSelectorFactory {\n    const getCoupons = createSelector(\n        (state: CouponState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: CouponState) => state.errors.removeCouponError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: CouponState) => state.errors.applyCouponError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: CouponState) => !!state.statuses.isApplyingCoupon,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: CouponState) => !!state.statuses.isRemovingCoupon,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CouponState = DEFAULT_STATE\n    ): CouponSelector => {\n        return {\n            getCoupons: getCoupons(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default interface CustomerSelector {\n    getCustomer(): Customer | undefined;\n}\n\nexport type CustomerSelectorFactory = (state: CustomerState) => CustomerSelector;\n\nexport function createCustomerSelectorFactory(): CustomerSelectorFactory {\n    const getCustomer = createSelector(\n        (state: CustomerState) => state.data,\n        customer => () => customer\n    );\n\n    return memoizeOne((\n        state: CustomerState = DEFAULT_STATE\n    ): CustomerSelector => {\n        return {\n            getCustomer: getCustomer(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default interface RemoteCheckoutSelector {\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined;\n}\n\nexport type RemoteCheckoutSelectorFactory = (state: RemoteCheckoutState) => RemoteCheckoutSelector;\n\nexport function createRemoteCheckoutSelectorFactory(): RemoteCheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: RemoteCheckoutState) => state.data,\n        data => <TMethodId extends keyof RemoteCheckoutStateData>(methodId: TMethodId) => {\n            return data[methodId];\n        }\n    );\n\n    return memoizeOne((\n        state: RemoteCheckoutState = DEFAULT_STATE\n    ): RemoteCheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { Address } from '../address';\nimport { createSelector } from '../common/selector';\n\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\n\nexport default interface ShippingAddressSelector {\n    getShippingAddress(): Address | undefined;\n}\n\nexport type ShippingAddressSelectorFactory = (state: ConsignmentState) => ShippingAddressSelector;\n\nexport function createShippingAddressSelectorFactory(): ShippingAddressSelectorFactory {\n    const getShippingAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (!consignments || !consignments[0]) {\n                return;\n            }\n\n            return consignments[0].shippingAddress;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE\n    ): ShippingAddressSelector => {\n        return {\n            getShippingAddress: getShippingAddress(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { CheckoutSelector } from '../checkout';\nimport { createSelector } from '../common/selector';\nimport { GatewayOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\nexport default interface PaymentSelector {\n    getPaymentId(): { providerId: string; gatewayId?: string } | undefined;\n    getPaymentStatus(): string | undefined;\n    getPaymentToken(): string | undefined;\n    getPaymentRedirectUrl(): string | undefined;\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean;\n}\n\nexport type PaymentSelectorFactory = (\n    checkout: CheckoutSelector,\n    order: OrderSelector\n) => PaymentSelector;\n\ninterface PaymentSelectorDependencies {\n    checkout: CheckoutSelector;\n    order: OrderSelector;\n}\n\nexport function createPaymentSelectorFactory(): PaymentSelectorFactory {\n    const getInternalPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.payment;\n        }\n    );\n\n    const getGatewayPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrder,\n        getOrder => () => {\n            const order = getOrder();\n\n            return find(order && order.payments, ({ providerId }) =>\n                providerId !== 'giftcertificate' && providerId !== 'storecredit'\n            ) as GatewayOrderPayment;\n        }\n    );\n\n    const getHostedPayment = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getCheckout,\n        getCheckout => () => {\n            const checkout = getCheckout();\n\n            return find(checkout && checkout.payments, ({ providerType }) =>\n                providerType === HOSTED\n            );\n        }\n    );\n\n    const getPaymentId = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.id) {\n                return {\n                    providerId: internalPayment.id,\n                    gatewayId: internalPayment.gateway,\n                };\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment && payment.providerId) {\n                return {\n                    providerId: payment.providerId,\n                    gatewayId: payment.gatewayId,\n                };\n            }\n        }\n    );\n\n    const getPaymentStatus = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.status) {\n                return internalPayment.status.replace('PAYMENT_STATUS_', '');\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment) {\n                return payment.detail.step;\n            }\n        }\n    );\n\n    const getPaymentToken = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.token;\n        }\n    );\n\n    const getPaymentRedirectUrl = createSelector(\n        getInternalPayment,\n        getInternalPayment => () => {\n            const payment = getInternalPayment();\n\n            return payment && payment.redirectUrl;\n        }\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getOutstandingBalance,\n        getOutstandingBalance => (useStoreCredit: boolean = false) => {\n            const grandTotal = getOutstandingBalance(useStoreCredit);\n\n            return grandTotal ? grandTotal > 0 : false;\n        }\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        getPaymentStatus,\n        getPaymentStatus => (paymentMethod?: PaymentMethod) => {\n            if (paymentMethod && paymentMethod.nonce) {\n                return true;\n            }\n\n            return getPaymentStatus() === ACKNOWLEDGE || getPaymentStatus() === FINALIZE;\n        }\n    );\n\n    return memoizeOne((\n        checkout: CheckoutSelector,\n        order: OrderSelector\n    ): PaymentSelector => {\n        return {\n            getPaymentId: getPaymentId({ checkout, order }),\n            getPaymentStatus: getPaymentStatus({ checkout, order }),\n            getPaymentToken: getPaymentToken({ checkout, order }),\n            getPaymentRedirectUrl: getPaymentRedirectUrl({ checkout, order }),\n            isPaymentDataRequired: isPaymentDataRequired({ checkout, order }),\n            isPaymentDataSubmitted: isPaymentDataSubmitted({ checkout, order }),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState, { DEFAULT_STATE } from './cart-state';\n\nexport default interface CartSelector {\n    getCart(): Cart | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CartSelectorFactory = (state: CartState) => CartSelector;\n\nexport function createCartSelectorFactory() {\n    const getCart = createSelector(\n        (state: CartState) => state.data,\n        cart => () => cart\n    );\n\n    const getLoadError = createSelector(\n        (state: CartState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CartState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CartState = DEFAULT_STATE\n    ): CartSelector => {\n        return {\n            getCart: getCart(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState, { DEFAULT_STATE } from './config-state';\n\nexport default interface ConfigSelector {\n    getConfig(): Config | undefined;\n    getStoreConfig(): StoreConfig | undefined;\n    getContextConfig(): ContextConfig | undefined;\n    getExternalSource(): string | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ConfigSelectorFactory = (state: ConfigState) => ConfigSelector;\n\nexport function createConfigSelectorFactory(): ConfigSelectorFactory {\n\n    const getConfig = createSelector(\n        (state: ConfigState) => state.data,\n        data => () => data\n    );\n\n    const getStoreConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.storeConfig,\n        data => () => data\n    );\n\n    const getContextConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.context,\n        data => () => data\n    );\n\n    const getExternalSource = createSelector(\n        (state: ConfigState) => state.meta && state.meta.externalSource,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ConfigState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ConfigState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE\n    ): ConfigSelector => {\n        return {\n            getConfig: getConfig(state),\n            getStoreConfig: getStoreConfig(state),\n            getContextConfig: getContextConfig(state),\n            getExternalSource: getExternalSource(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState, { DEFAULT_STATE } from './country-state';\n\nexport default interface CountrySelector {\n    getCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CountrySelectorFactory = (state: CountryState) => CountrySelector;\n\nexport function createCountrySelectorFactory(): CountrySelectorFactory {\n    const getCountries = createSelector(\n        (state: CountryState) => state.data,\n        countries => () => countries\n    );\n\n    const getLoadError = createSelector(\n        (state: CountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CountryState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CountryState = DEFAULT_STATE\n    ): CountrySelector => {\n        return {\n            getCountries: getCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport CustomerStrategyState, { DEFAULT_STATE } from './customer-strategy-state';\n\nexport default interface CustomerStrategySelector {\n    getSignInError(methodId?: string): Error | undefined;\n    getSignOutError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isSigningIn(methodId?: string): boolean;\n    isSigningOut(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type CustomerStrategySelectorFactory = (state: CustomerStrategyState) => CustomerStrategySelector;\n\nexport function createCustomerStrategySelectorFactory(): CustomerStrategySelectorFactory {\n    const getSignInError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signInMethodId,\n        (state: CustomerStrategyState) => state.errors.signInError,\n        (signInMethodId, signInError) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return;\n            }\n\n            return signInError;\n        }\n    );\n\n    const getSignOutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signOutMethodId,\n        (state: CustomerStrategyState) => state.errors.signOutError,\n        (signOutMethodId, signOutError) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return;\n            }\n\n            return signOutError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: CustomerStrategyState) => state.errors.initializeMethodId,\n        (state: CustomerStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: CustomerStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isSigningIn = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signInMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningIn,\n        (signInMethodId, isSigningIn) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningIn;\n        }\n    );\n\n    const isSigningOut = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signOutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningOut,\n        (signOutMethodId, isSigningOut) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningOut;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: CustomerStrategyState) => state.statuses.initializeMethodId,\n        (state: CustomerStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: CustomerStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: CustomerStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: CustomerStrategyState = DEFAULT_STATE\n    ): CustomerStrategySelector => {\n        return {\n            getSignInError: getSignInError(state),\n            getSignOutError: getSignOutError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isSigningIn: isSigningIn(state),\n            isSigningOut: isSigningOut(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState, { DEFAULT_STATE } from './gift-certificate-state';\n\nexport default interface GiftCertificateSelector {\n    getGiftCertificates(): GiftCertificate[] | undefined;\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type GiftCertificateSelectorFactory = (state: GiftCertificateState) => GiftCertificateSelector;\n\nexport function createGiftCertificateSelectorFactory(): GiftCertificateSelectorFactory {\n    const getGiftCertificates = createSelector(\n        (state: GiftCertificateState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: GiftCertificateState) => state.errors.removeGiftCertificateError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: GiftCertificateState) => state.errors.applyGiftCertificateError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isApplyingGiftCertificate,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isRemovingGiftCertificate,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: GiftCertificateState = DEFAULT_STATE\n    ): GiftCertificateSelector => {\n        return {\n            getGiftCertificates: getGiftCertificates(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../../common/selector';\n\nimport Instrument from './instrument';\nimport InstrumentState, { DEFAULT_STATE, InstrumentMeta } from './instrument-state';\n\nexport default interface InstrumentSelector {\n    getInstruments(): Instrument[] | undefined;\n    getInstrumentsMeta(): InstrumentMeta | undefined;\n    getLoadError(): Error | undefined;\n    getDeleteError(instrumentId?: string): Error | undefined;\n    isLoading(): boolean ;\n    isDeleting(instrumentId?: string): boolean;\n}\n\nexport type InstrumentSelectorFactory = (state: InstrumentState) => InstrumentSelector;\n\nexport function createInstrumentSelectorFactory(): InstrumentSelectorFactory {\n    const getInstruments = createSelector(\n        (state: InstrumentState) => state.data,\n        instruments => () => instruments\n    );\n\n    const getInstrumentsMeta = createSelector(\n        (state: InstrumentState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: InstrumentState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getDeleteError = createSelector(\n        (state: InstrumentState) => state.errors.failedInstrument,\n        (state: InstrumentState) => state.errors.deleteError,\n        (failedInstrument, deleteError) => (instrumentId?: string) => {\n            if (instrumentId && failedInstrument !== instrumentId) {\n                return;\n            }\n\n            return deleteError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: InstrumentState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isDeleting = createSelector(\n        (state: InstrumentState) => state.statuses.deletingInstrument,\n        (state: InstrumentState) => state.statuses.isDeleting,\n        (deletingInstrument, isDeleting) => (instrumentId?: string) => {\n            if (instrumentId && deletingInstrument !== instrumentId) {\n                return false;\n            }\n\n            return !!isDeleting;\n        }\n    );\n\n    return memoizeOne((\n        state: InstrumentState = DEFAULT_STATE\n    ): InstrumentSelector => {\n        return {\n            getInstruments: getInstruments(state),\n            getInstrumentsMeta: getInstrumentsMeta(state),\n            getLoadError: getLoadError(state),\n            getDeleteError: getDeleteError(state),\n            isLoading: isLoading(state),\n            isDeleting: isDeleting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE } from './payment-method-state';\n\nexport default interface PaymentMethodSelector {\n    getPaymentMethods(): PaymentMethod[] | undefined;\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined;\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n    getLoadError(): Error | undefined;\n    getLoadMethodError(methodId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingMethod(methodId?: string): boolean;\n}\n\nexport type PaymentMethodSelectorFactory = (state: PaymentMethodState) => PaymentMethodSelector;\n\nexport function createPaymentMethodSelectorFactory(): PaymentMethodSelectorFactory {\n    const getPaymentMethods = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => () => paymentMethods\n    );\n\n    const getPaymentMethodsMeta = createSelector(\n        (state: PaymentMethodState) => state.meta,\n        meta => () => meta\n    );\n\n    const getPaymentMethod = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => (methodId: string, gatewayId?: string) => {\n            return gatewayId ?\n                find(paymentMethods, { id: methodId, gateway: gatewayId }) :\n                find(paymentMethods, { id: methodId });\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getLoadMethodError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadMethodId,\n        (state: PaymentMethodState) => state.errors.loadMethodError,\n        (loadMethodId, loadMethodError) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return;\n            }\n\n            return loadMethodError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: PaymentMethodState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isLoadingMethod = createSelector(\n        (state: PaymentMethodState) => state.statuses.loadMethodId,\n        (state: PaymentMethodState) => state.statuses.isLoadingMethod,\n        (loadMethodId, isLoadingMethod) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isLoadingMethod;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentMethodState = DEFAULT_STATE\n    ): PaymentMethodSelector => {\n        return {\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethodsMeta: getPaymentMethodsMeta(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getLoadError: getLoadError(state),\n            getLoadMethodError: getLoadMethodError(state),\n            isLoading: isLoading(state),\n            isLoadingMethod: isLoadingMethod(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\nexport default interface PaymentStrategySelector {\n    getInitializeError(methodId?: string): Error | undefined;\n    getExecuteError(methodId?: string): Error | undefined;\n    getFinalizeError(methodId?: string): Error | undefined;\n    getWidgetInteractingError(methodId?: string): Error | undefined;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isExecuting(methodId?: string): boolean;\n    isFinalizing(methodId?: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type PaymentStrategySelectorFactory = (state: PaymentStrategyState) => PaymentStrategySelector;\n\nexport function createPaymentStrategySelectorFactory(): PaymentStrategySelectorFactory {\n    const getInitializeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.initializeMethodId,\n        (state: PaymentStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getExecuteError = createSelector(\n        (state: PaymentStrategyState) => state.errors.executeMethodId,\n        (state: PaymentStrategyState) => state.errors.executeError,\n        (executeMethodId, executeError) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return;\n            }\n\n            return executeError;\n        }\n    );\n\n    const getFinalizeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.finalizeMethodId,\n        (state: PaymentStrategyState) => state.errors.finalizeError,\n        (finalizeMethodId, finalizeError) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return;\n            }\n\n            return finalizeError;\n        }\n    );\n\n    const getWidgetInteractingError = createSelector(\n        (state: PaymentStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.initializeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: PaymentStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isExecuting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.executeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isExecuting,\n        (executeMethodId, isExecuting) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isExecuting;\n        }\n    );\n\n    const isFinalizing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.finalizeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isFinalizing,\n        (finalizeMethodId, isFinalizing) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isFinalizing;\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentStrategyState = DEFAULT_STATE\n    ): PaymentStrategySelector => {\n        return {\n            getInitializeError: getInitializeError(state),\n            getExecuteError: getExecuteError(state),\n            getFinalizeError: getFinalizeError(state),\n            getWidgetInteractingError: getWidgetInteractingError(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isExecuting: isExecuting(state),\n            isFinalizing: isFinalizing(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState, { DEFAULT_STATE } from './shipping-country-state';\n\nexport default interface ShippingCountrySelector {\n    getShippingCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ShippingCountrySelectorFactory = (state: ShippingCountryState) => ShippingCountrySelector;\n\nexport function createShippingCountrySelectorFactory(): ShippingCountrySelectorFactory {\n    const getShippingCountries = createSelector(\n        (state: ShippingCountryState) => state.data,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ShippingCountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ShippingCountryState) => state.statuses.isLoading,\n        status => () => !!status\n    );\n\n    return memoizeOne((\n        state: ShippingCountryState = DEFAULT_STATE\n    ): ShippingCountrySelector => {\n        return {\n            getShippingCountries: getShippingCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport ShippingStrategyState, { DEFAULT_STATE } from './shipping-strategy-state';\n\nexport default interface ShippingStrategySelector {\n    getUpdateAddressError(methodId?: string): Error | undefined;\n    getSelectOptionError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    isUpdatingAddress(methodId?: string): boolean;\n    isSelectingOption(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n}\n\nexport type ShippingStrategySelectorFactory = (state: ShippingStrategyState) => ShippingStrategySelector;\n\nexport function createShippingStrategySelectorFactory(): ShippingStrategySelectorFactory {\n    const getUpdateAddressError = createSelector(\n        (state: ShippingStrategyState) => state.errors.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.errors.updateAddressError,\n        (updateAddressMethodId, updateAddressError) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return;\n            }\n\n            return updateAddressError;\n        }\n    );\n\n    const getSelectOptionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.errors.selectOptionError,\n        (selectOptionMethodId, selectOptionError) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return;\n            }\n\n            return selectOptionError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: ShippingStrategyState) => state.errors.initializeMethodId,\n        (state: ShippingStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const isUpdatingAddress = createSelector(\n        (state: ShippingStrategyState) => state.statuses.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.statuses.isUpdatingAddress,\n        (updateAddressMethodId, isUpdatingAddress) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isUpdatingAddress;\n        }\n    );\n\n    const isSelectingOption = createSelector(\n        (state: ShippingStrategyState) => state.statuses.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isSelectingOption,\n        (selectOptionMethodId, isSelectingOption) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSelectingOption;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: ShippingStrategyState) => state.statuses.initializeMethodId,\n        (state: ShippingStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: ShippingStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: ShippingStrategyState = DEFAULT_STATE\n    ): ShippingStrategySelector => {\n        return {\n            getUpdateAddressError: getUpdateAddressError(state),\n            getSelectOptionError: getSelectOptionError(state),\n            getInitializeError: getInitializeError(state),\n            isUpdatingAddress: isUpdatingAddress(state),\n            isSelectingOption: isSelectingOption(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { createSelector } from '../common/selector';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState, { DEFAULT_STATE } from './checkout-state';\n\nexport default interface CheckoutSelector {\n    getCheckout(): Checkout | undefined;\n    getOutstandingBalance(useStoreCredit?: boolean): number | undefined;\n    getLoadError(): Error | undefined;\n    getUpdateError(): Error | undefined;\n    isLoading(): boolean;\n    isUpdating(): boolean;\n}\n\nexport type CheckoutSelectorFactory = (\n    state: CheckoutState,\n    billingAddress: BillingAddressSelector,\n    cart: CartSelector,\n    consignments: ConsignmentSelector,\n    coupons: CouponSelector,\n    customer: CustomerSelector,\n    giftCertificates: GiftCertificateSelector\n) => CheckoutSelector;\n\ninterface CheckoutSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    cart: CartSelector;\n    consignments: ConsignmentSelector;\n    coupons: CouponSelector;\n    customer: CustomerSelector;\n    giftCertificates: GiftCertificateSelector;\n}\n\nexport function createCheckoutSelectorFactory(): CheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: CheckoutState) => state.data,\n        (_: CheckoutState, { billingAddress }: CheckoutSelectorDependencies) => billingAddress.getBillingAddress,\n        (_: CheckoutState, { cart }: CheckoutSelectorDependencies) => cart.getCart,\n        (_: CheckoutState, { customer }: CheckoutSelectorDependencies) => customer.getCustomer,\n        (_: CheckoutState, { consignments }: CheckoutSelectorDependencies) => consignments.getConsignments,\n        (_: CheckoutState, { coupons }: CheckoutSelectorDependencies) => coupons.getCoupons,\n        (_: CheckoutState, { giftCertificates }: CheckoutSelectorDependencies) => giftCertificates.getGiftCertificates,\n        (data, getBillingAddress, getCart, getCustomer, getConsignments, getCoupons, getGiftCertificates) => () => {\n            const billingAddress = getBillingAddress();\n            const cart = getCart();\n            const customer = getCustomer();\n            const consignments = getConsignments() || [];\n            const coupons = getCoupons() || [];\n            const giftCertificates = getGiftCertificates() || [];\n\n            if (!data || !cart || !customer) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                cart,\n                customer,\n                consignments,\n                coupons,\n                giftCertificates,\n            };\n        }\n    );\n\n    const getOutstandingBalance = createSelector(\n        getCheckout,\n        getCheckout => (useStoreCredit?: boolean) => {\n            const checkout = getCheckout();\n\n            if (!checkout) {\n                return;\n            }\n\n            const grandTotal = checkout.grandTotal || 0;\n            const storeCredit = checkout.customer.storeCredit || 0;\n\n            return useStoreCredit ? Math.max(grandTotal - storeCredit, 0) : checkout.outstandingBalance;\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: CheckoutState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getUpdateError = createSelector(\n        (state: CheckoutState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CheckoutState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isUpdating = createSelector(\n        (state: CheckoutState) => state.statuses.isUpdating,\n        isUpdating => () => isUpdating === true\n    );\n\n    return memoizeOne((\n        state: CheckoutState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        cart: CartSelector,\n        consignments: ConsignmentSelector,\n        coupons: CouponSelector,\n        customer: CustomerSelector,\n        giftCertificates: GiftCertificateSelector\n    ): CheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getOutstandingBalance: getOutstandingBalance(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getLoadError: getLoadError(state),\n            getUpdateError: getUpdateError(state),\n            isLoading: isLoading(state),\n            isUpdating: isUpdating(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { createSelector } from '../common/selector';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { DEFAULT_STATE, OrderMetaState } from './order-state';\n\nexport default interface OrderSelector {\n    getOrder(): Order | undefined;\n    getOrderMeta(): OrderMetaState | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n    isSpamProtectionExecuting(): boolean;\n}\n\nexport type OrderSelectorFactory = (\n    state: OrderState,\n    billingAddress: BillingAddressSelector,\n    coupons: CouponSelector\n) => OrderSelector;\n\ninterface OrderSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    coupons: CouponSelector;\n}\n\nexport function createOrderSelectorFactory(): OrderSelectorFactory {\n    const getOrder = createSelector(\n        (state: OrderState) => state.data,\n        (_: OrderState, { billingAddress }: OrderSelectorDependencies) => billingAddress.getBillingAddress(),\n        (_: OrderState, { coupons }: OrderSelectorDependencies) => coupons.getCoupons(),\n        (data, billingAddress, coupons = []) => () => {\n            if (!data || !billingAddress) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                coupons,\n            };\n        }\n    );\n\n    const getOrderMeta = createSelector(\n        (state: OrderState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: OrderState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: OrderState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    const isSpamProtectionExecuting = createSelector(\n        (state: OrderState) => !!state.statuses.isSpamProtectionExecuting,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: OrderState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        coupons: CouponSelector\n    ): OrderSelector => {\n        return {\n            getOrder: getOrder(state, { billingAddress, coupons }),\n            getOrderMeta: getOrderMeta(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n            isSpamProtectionExecuting: isSpamProtectionExecuting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport StoreCreditState, { DEFAULT_STATE } from './store-credit-state';\n\nexport default interface StoreCreditSelector {\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n}\n\nexport type StoreCreditSelectorFactory = (state: StoreCreditState) => StoreCreditSelector;\n\nexport function createStoreCreditSelectorFactory(): StoreCreditSelectorFactory {\n    const getApplyError = createSelector(\n        (state: StoreCreditState) => state.errors.applyError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: StoreCreditState) => !!state.statuses.isApplying,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: StoreCreditState = DEFAULT_STATE\n    ): StoreCreditSelector => {\n        return {\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n        };\n    });\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport { createInternalCheckoutSelectorsFactory } from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const createInternalCheckoutSelectors = createInternalCheckoutSelectorsFactory();\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            const message = action.payload.body && action.payload.body.detail;\n\n            throw { ...action, payload: requestErrorFactory.createError(action.payload, message) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\nimport { storeCreditReducer } from '../store-credit';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n        storeCredit: storeCreditReducer,\n    });\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error when we are unable to retrieve a checkout object from the\n * server using the provided ID. It could be because the shopper does not have\n * permission to view the object, or the ID itself is invalid.\n */\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'CheckoutNotAvailableError';\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        }).catch(error => {\n            if (error.status >= 400 && error.status < 500) {\n                throw new CheckoutNotAvailableError(error);\n            }\n\n            throw error;\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[];\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import { isBillingAddressLike, BillingAddress } from '../billing';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(\n    address: Address | BillingAddress,\n    consignments?: Consignment[]\n): InternalAddress<any> {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { Address } from '../address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","import { memoize } from '@bigcommerce/memoize';\n\nimport { bindDecorator, isEqual, isPrivate, CacheKeyResolver } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method);\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method);\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\n@bind\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId) ?\n            [options.containerId] :\n            setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map(containerId => {\n                const action = this._buttonStrategyActionCreator.initialize({ ...options, containerId });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            })\n        )\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n}\n","enum CheckoutButtonMethodType {\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n}\n\nexport default CheckoutButtonMethodType;\n","export default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(`Unable to find any element with the specified selector: ${selector}`);\n    }\n\n    return Array.prototype.slice.call(containers)\n        .map((container: HTMLElement) => {\n            if (!container.id) {\n                container.id = uniqueId(idPrefix);\n            }\n\n            return container.id;\n        });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId, containerId: options.containerId };\n\n            if (store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n                this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, { timeout: options.timeout, useCache: true }),\n                defer(() => this._registry.get(options.methodId).initialize(options)\n                    .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n            );\n        };\n    }\n\n    deinitialize(options: CheckoutButtonOptions): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n                defer(() => this._registry.get(options.methodId).deinitialize()\n                    .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n            );\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.shippingAddress, paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(\n        address?: Address | null,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const shippingAddress = address === undefined ?\n                    customer && customer.addresses && customer.addresses[0] :\n                    address;\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: shippingAddress ? this._mapToBraintreeAddress(shippingAddress) : undefined,\n                    amount: checkout.outstandingBalance,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(() => this._googlePayPaymentProcessor.initialize(this._getMethodId()))\n            .then(() => {\n                this._walletButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { getCallbackUrl, Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._masterpassScriptLoader.load(paymentMethod.config.testMode);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = ''\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        return this._paypalScriptLoader.loadPaypal()\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: (_, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(`${this._host}/api/storefront/payment/paypalexpress`, { merchantId, cartId }, {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    },\n                });\n            })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        _onError?: (error: StandardError) => void // FIXME: This parameter seems to be unused\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const host = options && options.host;\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, host),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { BraintreePaypalButtonStrategy } from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    host?: string\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            host\n        )\n    );\n\n    return registry;\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport enum NotEmbeddableErrorType {\n    MissingContainer = 'missing_container',\n    MissingContent = 'missing_content',\n    UnknownError = 'unknown_error',\n}\n\n/**\n * Throw this error if we are not able to embed the checkout form as an iframe.\n * This can be due to the fact that the provided container ID is invalid, or the\n * checkout form fails to load inside the iframe. It can also be due to an\n * unknown reason.\n */\nexport default class NotEmbeddableError extends StandardError {\n    constructor(\n        message?: string,\n        public subtype: NotEmbeddableErrorType = NotEmbeddableErrorType.UnknownError\n    ) {\n        super(message || 'Unable to embed the checkout form.');\n\n        this.name = 'NotEmbeddableError';\n        this.type = 'not_embeddable';\n    }\n}\n","import { default as storage } from 'local-storage-fallback';\n\nexport default class BrowserStorage {\n    constructor(\n        private _namespace: string\n    ) {}\n\n    getItem<TValue = any>(key: string): TValue | null {\n        const rawValue = storage.getItem(this.withNamespace(key));\n\n        if (rawValue === null) {\n            return null;\n        }\n\n        try {\n            return JSON.parse(rawValue);\n        } catch (error) {\n            // Clean up invalid values\n            this.removeItem(this.withNamespace(key));\n\n            return null;\n        }\n    }\n\n    getItemOnce<TValue = any>(key: string): TValue | null {\n        const value = this.getItem(key);\n\n        this.removeItem(key);\n\n        return value;\n    }\n\n    setItem<TValue = any>(key: string, value: TValue): void {\n        return storage.setItem(this.withNamespace(key), JSON.stringify(value));\n    }\n\n    removeItem(key: string): void {\n        return storage.removeItem(this.withNamespace(key));\n    }\n\n    private withNamespace(key: string): string {\n        return `${this._namespace}.${key}`;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error we are not able to sign in a shopper because the provided\n * login token is invalid.\n */\nexport default class InvalidLoginTokenError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'InvalidLoginTokenError';\n        this.type = 'invalid_login_token';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { IFrameComponent } from '../common/iframe';\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport EmbeddedCheckoutError from './embedded-checkout-error';\nimport { EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { InvalidLoginTokenError, NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport { EmbeddedContentEvent, EmbeddedContentEventType } from './iframe-content';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nexport const ALLOW_COOKIE_ATTEMPT_INTERVAL = 10 * 60 * 1000;\nexport const IS_COOKIE_ALLOWED_KEY = 'isCookieAllowed';\nexport const LAST_ALLOW_COOKIE_ATTEMPT_KEY = 'lastAllowCookieAttempt';\n\n@bind\nexport default class EmbeddedCheckout {\n    private _iframe?: IFrameComponent;\n    private _isAttached: boolean;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _iframeCreator: ResizableIframeCreator,\n        private _messageListener: IframeEventListener<EmbeddedCheckoutEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedContentEvent>,\n        private _loadingIndicator: LoadingIndicator,\n        private _requestSender: RequestSender,\n        private _storage: BrowserStorage,\n        private _location: Location,\n        private _options: EmbeddedCheckoutOptions\n    ) {\n        this._isAttached = false;\n\n        if (this._options.onComplete) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutComplete, this._options.onComplete);\n        }\n\n        if (this._options.onError) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutError, this._options.onError);\n        }\n\n        if (this._options.onLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutLoaded, this._options.onLoad);\n        }\n\n        if (this._options.onFrameLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, this._options.onFrameLoad);\n        }\n\n        if (this._options.onSignOut) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.SignedOut, this._options.onSignOut);\n        }\n\n        this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, () => this._configureStyles());\n    }\n\n    attach(): Promise<this> {\n        if (this._isAttached) {\n            return Promise.resolve(this);\n        }\n\n        this._isAttached = true;\n        this._messageListener.listen();\n        this._loadingIndicator.show(this._options.containerId);\n\n        return this._allowCookie()\n            .then(() => this._attemptLogin())\n            .then(url => this._iframeCreator.createFrame(url, this._options.containerId))\n            .then(iframe => {\n                this._iframe = iframe;\n\n                this._configureStyles();\n                this._loadingIndicator.hide();\n            })\n            .catch(error => {\n                this._isAttached = false;\n\n                return this._retryAllowCookie(error)\n                    .catch(() => {\n                        this._messageListener.trigger({\n                            type: EmbeddedCheckoutEventType.FrameError,\n                            payload: error,\n                        });\n\n                        this._loadingIndicator.hide();\n\n                        throw error;\n                    });\n            })\n            .then(() => this);\n    }\n\n    detach(): void {\n        if (!this._isAttached) {\n            return;\n        }\n\n        this._isAttached = false;\n        this._messageListener.stopListen();\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe.iFrameResizer.close();\n        }\n    }\n\n    private _configureStyles(): void {\n        if (!this._iframe || !this._iframe.contentWindow || !this._options.styles) {\n            return;\n        }\n\n        this._messagePoster.setTarget(this._iframe.contentWindow);\n\n        this._messagePoster.post({\n            type: EmbeddedContentEventType.StyleConfigured,\n            payload: this._options.styles,\n        });\n    }\n\n    private _attemptLogin(): Promise<string> {\n        if (!/^\\/login\\/token/.test(parseUrl(this._options.url).pathname)) {\n            return Promise.resolve(this._options.url);\n        }\n\n        return this._requestSender.post(this._options.url)\n            .then(({ body: { redirectUrl } }) => redirectUrl)\n            .catch(response => Promise.reject(new InvalidLoginTokenError(response)));\n    }\n\n    /**\n     * This workaround is required for certain browsers (namely Safari) that\n     * prevent session cookies to be set for a third party website unless the\n     * user has recently visited such website. Therefore, before we attempt to\n     * login or set an active cart in the session, we need to first redirect the\n     * user to the domain of Embedded Checkout.\n     */\n    private _allowCookie(): Promise<void> {\n        if (this._storage.getItem(IS_COOKIE_ALLOWED_KEY)) {\n            return Promise.resolve();\n        }\n\n        this._storage.setItem(IS_COOKIE_ALLOWED_KEY, true);\n\n        // It could be possible that the flag is set to true but the browser has\n        // already removed the permission to store third-party cookies. In that\n        // case, we should try to redirect the user again. But we only want to\n        // do it once within a fixed interval. This is to avoid getting into a\n        // redirect loop if the shopper actually doesn't have a valid card\n        // session.\n        this._storage.setItem(LAST_ALLOW_COOKIE_ATTEMPT_KEY, Date.now());\n\n        const { origin } = parseUrl(this._options.url);\n        const redirectUrl = `${origin}/embedded-checkout/allow-cookie?returnUrl=${encodeURIComponent(this._location.href)}`;\n\n        document.body.style.visibility = 'hidden';\n        this._location.replace(redirectUrl);\n\n        return new Promise<never>(() => {});\n    }\n\n    private _retryAllowCookie(error: EmbeddedCheckoutError): Promise<void> {\n        const lastAttempt = Number(this._storage.getItem(LAST_ALLOW_COOKIE_ATTEMPT_KEY));\n        const canRetry = (\n            (!lastAttempt || Date.now() - lastAttempt > ALLOW_COOKIE_ATTEMPT_INTERVAL) &&\n            error instanceof NotEmbeddableError &&\n            error.subtype === NotEmbeddableErrorType.MissingContent\n        );\n\n        if (!canRetry) {\n            return Promise.reject();\n        }\n\n        this._storage.removeItem(LAST_ALLOW_COOKIE_ATTEMPT_KEY);\n        this._storage.removeItem(IS_COOKIE_ALLOWED_KEY);\n\n        return this._allowCookie();\n    }\n}\n","import { iframeResizer, IFrameComponent } from '../common/iframe';\nimport { parseUrl } from '../common/url';\n\nimport { EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport { NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class ResizableIframeCreator {\n    constructor(\n        private _options?: { timeout: number }\n    ) {}\n\n    createFrame(src: string, containerId: string): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new NotEmbeddableError(\n                'Unable to embed the iframe because the container element could not be found.',\n                NotEmbeddableErrorType.MissingContainer\n            );\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n        iframe.allowPaymentRequest = true;\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout)\n            .catch(error => {\n                container.removeChild(iframe);\n\n                throw error;\n            });\n    }\n\n    private _toResizableFrame(iframe: HTMLIFrameElement, timeoutInterval: number): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                reject(new NotEmbeddableError('Unable to embed the iframe because the content could not be loaded.'));\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (event.origin !== parseUrl(iframe.src).origin) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameError)) {\n                    teardown();\n                    reject(new NotEmbeddableError(event.data.payload.message, NotEmbeddableErrorType.MissingContent));\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameLoaded)) {\n                    iframe.style.display = '';\n\n                    const contentId = event.data.payload && event.data.payload.contentId;\n                    const iframes = iframeResizer({\n                        scrolling: false,\n                        sizeWidth: false,\n                        heightCalculationMethod: contentId ? 'taggedElement' : 'lowestElement',\n                    }, iframe);\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckout from './embedded-checkout';\nimport { EmbeddedCheckoutEventMap } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent } from './iframe-content';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst STORAGE_PREFIX = 'BigCommerce.EmbeddedCheckout';\n\n/**\n * Embed the checkout form in an iframe.\n *\n * @remarks\n * Once the iframe is embedded, it will automatically resize according to the\n * size of the checkout form. It will also notify the parent window when certain\n * events have occurred. i.e.: when the form is loaded and ready to be used.\n *\n * ```js\n * embedCheckout({\n *     url: 'https://checkout/url',\n *     containerId: 'container-id',\n * });\n * ```\n *\n * @param options - Options for embedding the checkout form.\n * @returns A promise that resolves to an instance of `EmbeddedCheckout`.\n */\nexport default function embedCheckout(options: EmbeddedCheckoutOptions): Promise<EmbeddedCheckout> {\n    const origin = parseUrl(options.url).origin;\n    const embeddedCheckout = new EmbeddedCheckout(\n        new ResizableIframeCreator(),\n        new IframeEventListener<EmbeddedCheckoutEventMap>(origin),\n        new IframeEventPoster<EmbeddedContentEvent>(origin),\n        new LoadingIndicator({ styles: options.styles && options.styles.loadingIndicator }),\n        createRequestSender(),\n        new BrowserStorage(STORAGE_PREFIX),\n        window.location,\n        options\n    );\n\n    return embeddedCheckout.attach();\n}\n","export interface RootCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n}\n\nexport interface IntermediateCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    usedCount: number;\n    value: any;\n}\n\nexport interface TerminalCacheKeyMap extends IntermediateCacheKeyMap {\n    cacheKey: string;\n}\n\nexport type ChildCacheKeyMap = IntermediateCacheKeyMap | TerminalCacheKeyMap;\n\nexport function isTerminalCacheKeyMap(map: ChildCacheKeyMap): map is TerminalCacheKeyMap {\n    return map.hasOwnProperty('cacheKey');\n}\n\nexport function isRootCacheKeyMap(map: RootCacheKeyMap | ChildCacheKeyMap): map is RootCacheKeyMap {\n    return map.hasOwnProperty('parentMap');\n}\n","import { noop } from 'lodash';\nimport * as shallowEqual from 'shallowequal';\n\nimport { isRootCacheKeyMap, isTerminalCacheKeyMap, ChildCacheKeyMap, IntermediateCacheKeyMap, RootCacheKeyMap, TerminalCacheKeyMap } from './cache-key-maps';\n\nexport interface CacheKeyResolverOptions {\n    maxSize?: number;\n    onExpire?(key: string): void;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    map?: TerminalCacheKeyMap;\n}\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _map: RootCacheKeyMap = { maps: [] };\n    private _usedMaps: TerminalCacheKeyMap[] = [];\n    private _options: Required<CacheKeyResolverOptions>;\n\n    constructor(options?: CacheKeyResolverOptions) {\n        this._options = {\n            maxSize: 0,\n            isEqual: shallowEqual,\n            onExpire: noop,\n            ...options,\n        };\n    }\n\n    getKey(...args: any[]): string {\n        const result = this._resolveMap(...args);\n        const { index, parentMap } = result;\n        let { map } = result;\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n        } else {\n            map = this._generateMap(parentMap, args.slice(index));\n        }\n\n        // Keep track of the least used map so we can remove it if the size of\n        // the stack exceeds the maximum size.\n        this._removeLeastUsedMap(map);\n\n        return map.cacheKey;\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMap = this._map;\n\n        // Traverse the tree to find the linked list of maps that match the\n        // arguments of the call. Each intermediate or terminal map contains a\n        // value that could be used to match with the arguments. The last map in\n        // the list (the terminal) should contain a cache key. If it can does\n        // not exist, we will return a falsy value so that the caller could\n        // handle and generate a new cache key.\n        while (parentMap.maps.length) {\n            let isMatched = false;\n\n            for (let mapIndex = 0; mapIndex < parentMap.maps.length; mapIndex++) {\n                const map = parentMap.maps[mapIndex];\n\n                if (!this._options.isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                // Move the most recently used map to the top of the stack for\n                // quicker access\n                parentMap.maps.unshift(...parentMap.maps.splice(mapIndex, 1));\n\n                if ((args.length === 0 || index === args.length - 1) && isTerminalCacheKeyMap(map)) {\n                    return { index, map, parentMap };\n                }\n\n                isMatched = true;\n                parentMap = map;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMap };\n    }\n\n    private _generateMap(parent: RootCacheKeyMap | IntermediateCacheKeyMap, args: any[]): TerminalCacheKeyMap {\n        let index = 0;\n        let parentMap = parent;\n        let map: IntermediateCacheKeyMap;\n\n        do {\n            map = {\n                maps: [],\n                parentMap,\n                usedCount: 1,\n                value: args[index],\n            };\n\n            // Continue to build the tree of maps so that it could be resolved\n            // next time when the function is called with the same set of\n            // arguments.\n            parentMap.maps.unshift(map);\n\n            parentMap = map;\n            index++;\n        } while (index < args.length);\n\n        const terminalMap = map as TerminalCacheKeyMap;\n\n        terminalMap.cacheKey = `${++this._lastId}`;\n\n        return terminalMap;\n    }\n\n    private _removeLeastUsedMap(recentlyUsedMap: TerminalCacheKeyMap): void {\n        if (!this._options.maxSize) {\n            return;\n        }\n\n        const index = this._usedMaps.indexOf(recentlyUsedMap);\n\n        this._usedMaps.splice(\n            index === -1 ? 0 : index,\n            index === -1 ? 0 : 1,\n            recentlyUsedMap\n        );\n\n        if (this._usedMaps.length <= this._options.maxSize) {\n            return;\n        }\n\n        const map = this._usedMaps.pop();\n\n        if (!map) {\n            return;\n        }\n\n        this._removeMap(map);\n        this._options.onExpire(map.cacheKey);\n    }\n\n    private _removeMap(map: ChildCacheKeyMap): void {\n        if (!map.parentMap) {\n            return;\n        }\n\n        map.parentMap.maps.splice(map.parentMap.maps.indexOf(map), 1);\n\n        if (isRootCacheKeyMap(map.parentMap)) {\n            return;\n        }\n\n        this._removeMap(map.parentMap);\n    }\n}\n","module.exports = require(\"@bigcommerce/bigpay-client\");","module.exports = require(\"messageformat\");","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if a request fails to complete within its required timeframe\n * because of a network issue.\n */\nexport default class TimeoutError extends RequestError<{}> {\n    constructor(response?: Response) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to successfully submit a server request\n * using a payment method because the method has invalid configuration or is in\n * an invalid state.\n */\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, { message: 'There is a problem processing your payment. Please try again later.' });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { createSelector as defaultSelectorCreator } from 'reselect';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\n/**\n * This is a decorated version of Reselect's default `createSelector` function.\n * If the return value of the combiner function is a function, it will create a\n * memorized version of that function and return it instead.\n */\nexport default withMemoizedCombiner(defaultSelectorCreator);\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes(includes: string[]): string {\n    return uniq(includes).join(',');\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to synchronize the checkout details of a\n * shopper with a hosted / remote checkout provider (i.e.: Amazon).\n */\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.name = 'RemoteCheckoutSynchronizationError';\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport { GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return {\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        };\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport { GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return {\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            };\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': initializationData.stripeVersion,\n                        'stripe:publishableKey': initializationData.stripePublishableKey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n        customerGroupName: customer.customerGroup && customer.customerGroup.name,\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { mapToInternalLineItems, LineItem } from '../cart';\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInternalOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInternalOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && find(lineItem.socialMedia, item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","import { IFrameComponent, IFrameOptions } from 'iframe-resizer';\n\nexport {\n    HeightCalculationMethod,\n    IFrameComponent,\n    IFrameMessageData,\n    IFrameObject,\n    IFrameOptions,\n    IFramePage,\n    IFramePageOptions,\n    IFrameResizedData,\n    IFrameScrollData,\n    PageInfo,\n    WidthCalculationMethod,\n} from 'iframe-resizer';\n\n// The reason why we are wrapping the original `iframeResizer` function imported\n// from the package is because the package sets up event listeners (window\n// resize etc...) as soon as the package is imported. Therefore, to defer the\n// side effect from happening until the function is actually being used, we are\n// importing the package inside this function. To minimise the chance of\n// importing the original package inadvertently, we are also re-exporting all of\n// its public interfaces. The re-exports do not cause any side effect because\n// they are plain TypeScript interfaces; meaning they are only used for type\n// checks rather than for code output.\nexport function iframeResizer(options: IFrameOptions, target: string | HTMLElement): IFrameComponent[] {\n    const { iframeResizer: originalIframeResizer } = require('iframe-resizer');\n\n    return originalIframeResizer(options, target);\n}\n\n// We also need to wrap the original `iframeResizer.contentWindow` because\n// similarly the package sets up event listeners as soon as the package gets\n// imported. Another reason is that if it is imported at the top level using a\n// regular import statement, it will be stripped out by Webpack as it is\n// considered as \"unused\", unless we explicitly mark it as a package that\n// produces side effects.\nexport function setupContentWindowForIframeResizer(): void {\n    /* eslint-disable-next-line import/no-internal-modules */\n    require('iframe-resizer/js/iframeResizer.contentWindow');\n}\n","import { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default class ErrorActionCreator {\n    clearError(error: Error): ClearErrorAction {\n        return {\n            type: ErrorActionType.ClearError,\n            payload: error,\n        };\n    }\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console?: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutIncludes, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable ,  Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport { CustomerStrategyActionType, CustomerStrategyDeinitializeAction, CustomerStrategyInitializeAction, CustomerStrategySignInAction, CustomerStrategySignOutAction, CustomerStrategyWidgetAction } from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): ThunkAction<CustomerStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): ThunkAction<CustomerStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && !state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<void> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport { VisaCheckoutAddress, VisaCheckoutInitOptions, VisaCheckoutPaymentSuccessPayload, VisaCheckoutTokenizedPayload } from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            },\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { ChasePayHostWindow, JPMC } from './chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params?: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteBillingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteShippingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params?: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemotePaymentFailed, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.LoadRemoteSettingsFailed, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.SignOutRemoteCustomerFailed, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we try to call a method that is only a stub and has not\n * been fully implemented.\n */\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport AmazonPayCustomerInitializeOptions from './amazon-pay-customer-initialize-options';\n\nexport default class AmazonPayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor, VisaCheckoutPaymentSuccessPayload, VisaCheckoutScriptLoader } from '../../../payment/strategies/braintree';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategyActionCreator from '../../customer-strategy-action-creator';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (_, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { ChasePayScriptLoader, ChasePaySuccessPayload } from '../../../payment/strategies/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class ChasePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: {\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            },\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport CustomerActionCreator from '../../customer-action-creator';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class DefaultCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport GooglePayCustomerInitializeOptions from './googlepay-customer-initialize-options';\n\nexport default class GooglePayCustomerStrategy implements CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId }  = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(methodId)\n            .then(() => {\n                this._walletButton = this._createSignInButton(googlePayOptions.container);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _getGooglePayOptions(options: CustomerInitializeOptions): GooglePayCustomerInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { getCallbackUrl, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class MasterpassCustomerStrategy implements CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                    suppressShippingAddress: false,\n                    callbackUrl: getCallbackUrl('checkout'),\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotImplementedError } from '../../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class SquareCustomerStrategy implements CustomerStrategy {\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {}\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport { CountryActionType } from './country-actions';\nimport CountryRequestSender from './country-request-sender';\n\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(CountryActionType.LoadCountriesRequested));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(CountryActionType.LoadCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CountryActionType.LoadCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\nimport OrderParams from './order-params';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout, params }: RequestOptions<OrderParams> = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const include = [\n            'payments',\n            'lineItems.physicalItems.socialMedia',\n            'lineItems.physicalItems.options',\n            'lineItems.digitalItems.socialMedia',\n            'lineItems.digitalItems.options',\n        ];\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...include,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, from, of, Observable, Observer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\nimport { SpamProtectionAction, SpamProtectionActionCreator } from './spam-protection';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction | SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n                const orderMeta = state.order.getOrderMeta();\n                const storeConfig = state.config.getStoreConfig();\n                const spamProtectionToken = orderMeta && orderMeta.spamProtectionToken;\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { isSpamProtectionEnabled } = storeConfig.checkoutSettings;\n\n                if (isSpamProtectionEnabled && !spamProtectionToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingSpamProtectionToken);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(\n                            payload,\n                            checkout.customerMessage,\n                            externalSource,\n                            spamProtectionToken\n                        ), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    executeSpamProtection(): ThunkAction<SpamProtectionAction> {\n        return store => {\n            const storeConfig = store.getState().config.getStoreConfig();\n\n            if (!storeConfig) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n            }\n\n            const { isSpamProtectionEnabled } = storeConfig.checkoutSettings;\n\n            if (!isSpamProtectionEnabled) {\n                return empty();\n            }\n\n            return this._spamProtectionActionCreator.execute();\n        };\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(\n        payload: OrderRequestBody,\n        customerMessage: string,\n        externalSource?: string,\n        spamProtectionToken?: string\n    ): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n                spamProtectionToken,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            spamProtectionToken,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","export interface MutationObeserverCreator {\n    prototype: MutationObserver;\n    new(callback: MutationCallback): MutationObserver;\n}\n\nexport interface MutationObserverWindow extends Window {\n    MutationObserver: MutationObeserverCreator;\n}\n\nexport class MutationObserverFactory {\n    constructor(\n        private _window: MutationObserverWindow = window as MutationObserverWindow\n    ) {}\n\n    create(callback: MutationCallback): MutationObserver {\n        return new this._window.MutationObserver(callback);\n    }\n}\n","import { StandardError } from '../../../common/error/errors';\n\n/**\n * Throw this error if we fail to complete the required spam protection\n * verification due to an unknown reason.\n */\nexport default class SpamProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to complete our spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionFailedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { StandardError } from '../../../common/error/errors';\n\n/**\n * Throw this error if spam protection is not loaded when trying to\n * complete the required spam protection verification.\n */\nexport default class SpamProtectionNotLoadedError extends StandardError {\n    constructor() {\n        super('Spam protection is not loaded. Please try again.');\n\n        this.name = 'SpamProtectionNotLoadedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { StandardError } from '../../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam protection\n * challenge (i.e.: they close the reCaptcha window).\n */\nexport default class SpamProtectionNotCompletedError extends StandardError {\n    constructor() {\n        super('You haven\\'t complete our spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionNotCompletedError';\n        this.type = 'spam_protection_not_completed';\n    }\n}\n","import { defer, of, throwError, Observable, Subject } from 'rxjs';\nimport { catchError, delay, retryWhen, switchMap } from 'rxjs/operators';\n\nimport { MutationObserverFactory } from '../../common/dom';\nimport { NotInitializedError, NotInitializedErrorType } from '../../common/error/errors';\n\nimport { SpamProtectionFailedError, SpamProtectionNotCompletedError, SpamProtectionNotLoadedError } from './errors';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport interface RecaptchaResult {\n    error?: Error;\n    token?: string;\n}\n\nexport default class GoogleRecaptcha {\n    private _event$?: Subject<RecaptchaResult>;\n    private _recaptcha?: ReCaptchaV2.ReCaptcha;\n\n    constructor(\n        private googleRecaptchaScriptLoader: GoogleRecaptchaScriptLoader,\n        private mutationObserverFactory: MutationObserverFactory\n    ) {}\n\n    load(containerId: string, sitekey: string): Promise<void> {\n        const event$ = new Subject<RecaptchaResult>();\n        this._event$ = event$;\n\n        return this.googleRecaptchaScriptLoader.load()\n            .then(recaptcha => {\n                recaptcha.render(containerId, {\n                    sitekey,\n                    size: 'invisible',\n                    callback: () => {\n                        event$.next({\n                            token: recaptcha.getResponse(),\n                        });\n                        recaptcha.reset();\n                    },\n                    'error-callback': () => {\n                        event$.next({\n                            error: new SpamProtectionFailedError(),\n                        });\n                    },\n                });\n\n                this._recaptcha = recaptcha;\n            });\n    }\n\n    execute(): Observable<RecaptchaResult> {\n        const event$ = this._event$;\n        const recaptcha = this._recaptcha;\n\n        if (!event$ || !recaptcha) {\n            throw new NotInitializedError(NotInitializedErrorType.SpamProtectionNotInitialized);\n        }\n\n        const timeout = 7000;\n        const retryInterval = 250;\n        const maxRetries = timeout / retryInterval;\n\n        return defer(() => {\n            const element = document.querySelector('iframe[src*=\"bframe\"]');\n\n            return element ?\n                of(element) :\n                throwError(new SpamProtectionNotLoadedError());\n        })\n            .pipe(\n                retryWhen(errors => errors.pipe(\n                    delay(retryInterval),\n                    switchMap((error, index) =>\n                        index < maxRetries ? of(error) : throwError(error)\n                    )\n                )),\n                switchMap(element => {\n                    this._watchRecaptchaChallengeWindow(event$, element);\n                    recaptcha.execute();\n\n                    return event$;\n                }),\n                catchError(error => of({ error }))\n            );\n    }\n\n    private _watchRecaptchaChallengeWindow(event: Subject<RecaptchaResult>, element: Element) {\n        const iframeContainer = element.parentElement;\n\n        if (!iframeContainer) {\n            throw new SpamProtectionNotLoadedError();\n        }\n\n        const container = iframeContainer.parentElement;\n\n        if (!container) {\n            throw new SpamProtectionNotLoadedError();\n        }\n\n        this.mutationObserverFactory.create(() => {\n            // When customer closes the Google ReCaptcha challenge window, throw SpamProtectionNotCompletedError\n            if (container.style.visibility === 'hidden') {\n                event.next({\n                    error: new SpamProtectionNotCompletedError(),\n                });\n            }\n        }).observe(container, { attributes: true, attributeFilter: ['style'] });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nexport default class GoogleRecaptchaScriptLoader {\n    private _loadPromise?: Promise<ReCaptchaV2.ReCaptcha>;\n\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GoogleRecaptchaWindow = window\n    ) {}\n\n    load(): Promise<ReCaptchaV2.ReCaptcha> {\n        if (!this._loadPromise) {\n            this._loadPromise = this._loadScript();\n        }\n\n        return this._loadPromise;\n    }\n\n    private _loadScript(): Promise<ReCaptchaV2.ReCaptcha> {\n        const callbackName = 'initRecaptcha';\n        const params = [\n            `onload=${callbackName}`,\n            'render=explicit',\n        ].join('&');\n\n        return new Promise((resolve, reject) => {\n            this._window[callbackName] = () => resolve(this._window.grecaptcha);\n\n            this._scriptLoader.loadScript(`//www.google.com/recaptcha/api.js?${params}`)\n                .catch(error => {\n                    this._loadPromise = undefined;\n                    reject(error);\n                });\n        });\n    }\n}\n\nexport interface GoogleRecaptchaWindow extends Window {\n    grecaptcha?: ReCaptchaV2.ReCaptcha;\n    initRecaptcha?(): void;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable, Observer } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection-actions';\nimport { SpamProtectionOptions } from './spam-protection-options';\n\nexport default class SpamProtectionActionCreator {\n    constructor(\n        private _googleRecaptcha: GoogleRecaptcha\n    ) {}\n\n    initialize(options: SpamProtectionOptions): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<SpamProtectionAction>) => {\n            const state = store.getState();\n            const config = state.config.getConfig();\n            const { containerId } = options;\n\n            if (!config) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n            }\n\n            observer.next(createAction(SpamProtectionActionType.InitializeRequested, undefined));\n\n            const recaptchaSitekey = config.storeConfig.checkoutSettings.googleRecaptchaSitekey;\n\n            return this._googleRecaptcha.load(containerId, recaptchaSitekey)\n                .then(() => {\n                    observer.next(createAction(SpamProtectionActionType.InitializeSucceeded));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(SpamProtectionActionType.InitializeFailed, error, containerId));\n                });\n        });\n    }\n\n    execute(): Observable<SpamProtectionAction> {\n        return concat(\n            of(createAction(SpamProtectionActionType.ExecuteRequested, undefined)),\n            this._googleRecaptcha.execute()\n                .pipe(take(1))\n                .pipe(switchMap(({ error, token }) => {\n                    return error ?\n                        throwError(createErrorAction(SpamProtectionActionType.SubmitFailed, error)) :\n                        of(createAction(SpamProtectionActionType.Completed, token));\n                }))\n        );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","enum PaymentStrategyType {\n    ADYENV2 = 'adyenv2',\n    AFFIRM = 'affirm',\n    AFTERPAY = 'afterpay',\n    AMAZON = 'amazon',\n    BARCLAYCARD = 'Card',\n    CREDIT_CARD = 'creditcard',\n    CYBERSOURCE = 'cybersource',\n    KLARNA = 'klarna',\n    LEGACY = 'legacy',\n    OFFLINE = 'offline',\n    OFFSITE = 'offsite',\n    PAYPAL = 'paypal',\n    PAYPAL_EXPRESS = 'paypalexpress',\n    PAYPAL_EXPRESS_CREDIT = 'paypalexpresscredit',\n    SAGE_PAY = 'sagepay',\n    SQUARE = 'squarev2',\n    STRIPEV3 = 'stripev3',\n    NO_PAYMENT_DATA_REQUIRED = 'nopaymentdatarequired',\n    BRAINTREE = 'braintree',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    BRAINTREE_VISA_CHECKOUT = 'braintreevisacheckout',\n    BRAINTREE_GOOGLE_PAY = 'googlepaybraintree',\n    CHASE_PAY = 'chasepay',\n    WE_PAY = 'wepay',\n    MASTERPASS = 'masterpass',\n    STRIPE_GOOGLE_PAY = 'googlepaystripe',\n    ZIP = 'zip',\n    CONVERGE = 'converge',\n}\n\nexport default PaymentStrategyType;\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\nimport { SpamProtectionAction } from '../order/spam-protection';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport { PaymentStrategyActionType, PaymentStrategyDeinitializeAction, PaymentStrategyExecuteAction, PaymentStrategyFinalizeAction, PaymentStrategyInitializeAction, PaymentStrategyWidgetAction } from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction | SpamProtectionAction, InternalCheckoutSelectors> {\n        const { payment = {} as OrderPaymentRequestBody, useStoreCredit } = payload;\n        const meta = { methodId: payment.methodId };\n\n        return store => concat(\n            this._orderActionCreator.executeSpamProtection()(store),\n            of(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta)),\n            defer(() => {\n                const state = store.getState();\n\n                let strategy: PaymentStrategy;\n\n                if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                    const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                    if (!method) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    strategy = this._strategyRegistry.getByMethod(method);\n                } else {\n                    strategy = this._strategyRegistry.get(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED);\n                }\n\n                return strategy\n                    .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                    .then(() => createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta))\n        );\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const { providerId = '', gatewayId = '' } = state.payment.getPaymentId() || {};\n                const method = state.paymentMethods.getPaymentMethod(providerId, gatewayId);\n\n                if (!method) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: method.id }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        const { methodId, gatewayId } = options;\n\n        return store => defer(() => {\n            const state = store.getState();\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && state.paymentStrategies.isInitialized(methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId })),\n                this._strategyRegistry.getByMethod(method)\n                    .initialize({ ...options, methodId, gatewayId })\n                    .then(() => createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }))\n            );\n        }).pipe(\n            catchError(error => throwErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }))\n        );\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        const { methodId, gatewayId } = options;\n\n        return store => defer(() => {\n            const state = store.getState();\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && !state.paymentStrategies.isInitialized(methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId })),\n                this._strategyRegistry.getByMethod(method)\n                    .deinitialize({ ...options, methodId, gatewayId })\n                    .then(() => createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }))\n            );\n        }).pipe(\n            catchError(error => throwErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }))\n        );\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): Observable<PaymentStrategyWidgetAction> {\n        const methodId = options && options.methodId;\n        const meta = { methodId };\n\n        return concat(\n            of(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta)),\n            defer(() =>\n                method().then(() => createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta))\n        );\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                    })),\n                giftCertificates: cart.lineItems.giftCertificates\n                    .slice()\n                    .sort((itemA, itemB) => `${itemA.id}`.localeCompare(`${itemB.id}`))\n                    .map(item => ({\n                        amount: item.amount,\n                        recipient: item.recipient,\n                    })),\n                physicalItems: cart.lineItems.physicalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                        giftWrapping: item.giftWrapping,\n                    })),\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.name = 'CartChangedError';\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.outstandingBalance === response.body.outstandingBalance\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditRequestSender from './store-credit-request-sender';\n\nexport default class StoreCreditActionCreator {\n    constructor(\n        private _storeCreditRequestSender: StoreCreditRequestSender\n    ) {}\n\n    applyStoreCredit(useStoreCredit: boolean, options?: RequestOptions): ThunkAction<StoreCreditAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(StoreCreditActionType.ApplyStoreCreditRequested)),\n            defer(async () => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { body } = await (useStoreCredit ?\n                    this._storeCreditRequestSender.applyStoreCredit(checkout.id, options) :\n                    this._storeCreditRequestSender.removeStoreCredit(checkout.id, options));\n\n                return createAction(StoreCreditActionType.ApplyStoreCreditSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(StoreCreditActionType.ApplyStoreCreditFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class StoreCreditRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyStoreCredit(checkoutId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/store-credit`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n\n    removeStoreCredit(checkoutId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/store-credit`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { OrderActionCreator } from '../order';\n\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentRequestTransformer: PaymentRequestTransformer\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._paymentRequestTransformer.transform(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(\n        methodId: string,\n        gatewayId?: string,\n        target?: string\n    ): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store => {\n            const payload = this._paymentRequestTransformer.transform({ gatewayId, methodId }, store.getState());\n\n            return concat(\n                of(createAction(PaymentActionType.InitializeOffsitePaymentRequested)),\n                this._paymentRequestSender.initializeOffsitePayment(payload, target)\n                    .then(() => createAction(PaymentActionType.InitializeOffsitePaymentSucceeded))\n            ).pipe(\n                catchError(error => throwErrorAction(PaymentActionType.InitializeOffsitePaymentFailed, error))\n            );\n        };\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody, target?: string): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload, undefined, target);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: response.headers,\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","import { pick } from 'lodash';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\n\nexport default class PaymentRequestTransformer {\n    transform(payment: Payment, checkoutState: InternalCheckoutSelectors): PaymentRequestBody {\n        const billingAddress = checkoutState.billingAddress.getBillingAddress();\n        const checkout = checkoutState.checkout.getCheckout();\n        const customer = checkoutState.customer.getCustomer();\n        const order = checkoutState.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(checkoutState.paymentMethods, payment.methodId, payment.gatewayId);\n        const shippingAddress = checkoutState.shippingAddress.getShippingAddress();\n        const consignments = checkoutState.consignments.getConsignments();\n        const shippingOption = checkoutState.consignments.getShippingOption();\n        const storeConfig = checkoutState.config.getStoreConfig();\n        const contextConfig = checkoutState.config.getContextConfig();\n        const instrumentMeta = checkoutState.instruments.getInstrumentsMeta();\n        const paymentMeta = checkoutState.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = checkoutState.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && payment.paymentData && isVaultedInstrument(payment.paymentData) ?\n            `${checkoutState.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            checkoutState.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(\n        paymentMethodSelector: PaymentMethodSelector,\n        methodId: string,\n        gatewayId?: string\n    ): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(methodId, gatewayId);\n\n        if (!paymentMethod) {\n            return;\n        }\n\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n}\n","export interface AdyenComponentCallbacks {\n    onChange?(state: AdyenCardState): void;\n}\n\nexport interface AdyenHostWindow extends Window {\n    AdyenCheckout?: new(configuration: AdyenConfiguration) => AdyenCheckout;\n}\n\nexport interface AdyenConfiguration {\n    /*\n     * Use test, and then change this to live when you're ready to accept live payments.\n     */\n    environment?: string;\n\n    /*\n     * The shopper's locale. This is used to set the language rendered in the Components.\n     */\n    locale?: string;\n\n    /*\n     * The Origin Key of your website.\n     */\n    originKey: string;\n\n    /*\n     * Supported from Components version 3.0.0 and later. The full paymentMethods response,\n     * returned in step 1. We recommend that you pass this on the AdyenCheckout instance.\n     * Otherwise, you need to pass the specific payment method details separately for each\n     * Component.\n     */\n    paymentMethodsResponse?: PaymentMethodsResponse;\n\n    /*\n     * Specify the function that you created, for example, handleOnChange. If you wish\n     * to override this function, you can also define an onChange event on the Component\n     * level.\n     */\n    onChange?(state: AdyenCardState, component: AdyenComponent): void;\n}\n\nexport interface PaymentMethodsResponse {\n    /**\n     * Groups of payment methods.\n     */\n    groups?: AdyenPaymentMethodGroup[];\n\n    /**\n     * Detailed list of one-click payment methods.\n     */\n    oneClickPaymentMethods?: RecurringDetail;\n\n    /**\n     * Detailed list of payment methods required to generate payment forms.\n     */\n    paymentMethods?: AdyenPaymentMethod[];\n\n    /**\n     * List of all stored payment methods.\n     */\n    storedPaymentMethods?: AdyenStoredPaymentMethod[];\n}\n\nexport interface AdyenPaymentMethod {\n    /**\n     * List of possible brands. For example: visa, mc.\n     */\n    brands?: string[];\n\n    /**\n     * The configuration of the payment method.\n     */\n    configuration?: object;\n\n    /**\n     * All input details to be provided to complete the payment with this payment\n     * method.\n     */\n    details?: InputDetail[];\n\n    /**\n     * The group where this payment method belongs to.\n     */\n    group?: Group;\n\n    /**\n     * The displayable name of this payment method.\n     */\n    name?: string;\n\n    /**\n     * Echo data required to send in next calls.\n     */\n    paymentMethodData?: string;\n\n    /**\n     * Indicates whether this payment method supports tokenization or not.\n     */\n    supportsRecurring?: boolean;\n\n    /**\n     * The unique payment method code.\n     */\n    type?: string;\n}\n\nexport interface AdyenPaymentMethodGroup {\n    /**\n     * The type to submit for any payment method in this group.\n     */\n    groupType?: string;\n\n    /**\n     * The human-readable name of this group.\n     */\n    name?: string;\n\n    /**\n     * The types of payment methods that belong in this group.\n     */\n    types?: string[];\n}\n\nexport interface InputDetail {\n    /**\n     * Configuration parameters for the required input.\n     */\n    configuration?: object;\n\n    /**\n     * Input details can also be provided recursively.\n     */\n    details?: SubInputDetail[];\n\n    /**\n     * In case of a select, the URL from which to query the items.\n     */\n    itemSearchUrl?: string;\n\n    /**\n     * In case of a select, the items to choose from.\n     */\n    items?: Item[];\n\n    /**\n     * The value to provide in the result.\n     */\n    key?: string;\n\n    /**\n     * True if this input value is optional.\n     */\n    optional?: boolean;\n\n    /**\n     * The type of the required input.\n     */\n    type?: string;\n\n    /**\n     * The value can be pre-filled, if available.\n     */\n    value?: string;\n}\n\nexport interface AdyenThreeDS2Options {\n    /**\n     * Specify Three3DS2Challenge Widget Size\n     */\n    widgetSize?: string;\n\n    /**\n     * A callback that gets called when adyen component is mounted\n     */\n    onLoad(cancel: () => void): void;\n\n    /**\n     * A callback that gets called when adyen component verification\n     * is completed\n     */\n    onComplete(): void;\n}\n\nexport enum ThreeDS2ComponentType {\n    ThreeDS2DeviceFingerprint = 'threeDS2DeviceFingerprint',\n    ThreeDS2Challenge = 'threeDS2Challenge',\n}\n\nexport interface ThreeDS2Result {\n    payment_data: string;\n    result_code: string;\n    token: string;\n}\n\nexport interface ThreeDS1Result {\n    acs_url: string;\n    payer_auth_request: string;\n    callback_url: string;\n    merchant_data: string;\n}\n\nexport interface SubInputDetail {\n    /**\n     * Configuration parameters for the required input.\n     */\n    configuration?: object;\n\n    /**\n     * In case of a select, the items to choose from.\n     */\n    items?: Item[];\n\n    /**\n     * The value to provide in the result.\n     */\n    key?: string;\n\n    /**\n     * True if this input is optional to provide.\n     */\n    optional?: boolean;\n\n    /**\n     * The type of the required input.\n     */\n    type?: string;\n\n    /**\n     * The value can be pre-filled, if available.\n     */\n    value?: string;\n}\n\nexport interface Item {\n    /**\n     * The value to provide in the result.\n     */\n    id?: string;\n\n    /**\n     * The display name.\n     */\n    name?: string;\n}\n\nexport interface Group {\n    /**\n     * The name of the group.\n     */\n    name?: string;\n\n    /**\n     * Echo data to be used if the payment method is displayed as part of this group.\n     */\n    paymentMethodData?: string;\n\n    /**\n     * The unique code of the group.\n     */\n    type?: string;\n}\n\nexport interface AdyenStoredPaymentMethod {\n    /**\n     * The brand of the card.\n     */\n    brand?: string;\n\n    /**\n     * The month the card expires.\n     */\n    expiryMonth?: string;\n\n    /**\n     * The year the card expires.\n     */\n    expiryYear?: string;\n\n    /**\n     * The unique payment method code.\n     */\n    holderName?: string;\n\n    /**\n     * A unique identifier of this stored payment method.\n     */\n    id?: string;\n\n    /**\n     * The last four digits of the PAN.\n     */\n    lastFour?: string;\n\n    /**\n     * The display name of the stored payment method.\n     */\n    name: string;\n\n    /**\n     * The shopper’s email address.\n     */\n    shopperEmail?: string;\n\n    /**\n     * The supported shopper interactions for this stored payment method.\n     */\n    supportedShopperInteractions?: string[];\n\n    /**\n     * The type of payment method.\n     */\n    type?: string;\n}\n\nexport interface RecurringDetail extends AdyenPaymentMethod {\n    /**\n     * The reference that uniquely identifies the recurring detail.\n     */\n    recurringDetailReference?: string;\n\n    /**\n     * Contains information on previously stored payment details.\n     */\n    storedDetails?: StoredDetails;\n}\n\nexport interface StoredDetails {\n    /**\n     * The stored bank account.\n     */\n    bank?: Bank;\n\n    /**\n     * The stored card information.\n     */\n    card?: Card;\n\n    /**\n     * The email associated with stored payment details.\n     */\n    emailAddress?: string;\n}\n\nexport interface Bank {\n    /**\n     * The bank account number (without separators).\n     */\n    bankAccountNumber?: string;\n\n    /**\n     * The bank city.\n     */\n    bankCity?: string;\n\n    /**\n     * The location id of the bank. The field value is nil in most cases.\n     */\n    bankLocationId?: string;\n\n    /**\n     * The name of the bank.\n     */\n    bankName?: string;\n\n    /**\n     * The Business Identifier Code (BIC) is the SWIFT address assigned to\n     * a bank. The field value is nil in most cases.\n     */\n    bic?: string;\n\n    /**\n     * Country code where the bank is located.\n     * A valid value is an ISO two-character country code (e.g. 'NL').\n     */\n    countryCode?: string;\n\n    /**\n     * The International Bank Account Number (IBAN).\n     */\n    iban?: string;\n\n    /**\n     * The name of the bank account holder. If you submit a name with non-Latin\n     * characters, we automatically replace some of them with corresponding Latin\n     * characters to meet the FATF recommendations. For example:\n     * χ12 is converted to ch12.\n     * üA is converted to euA.\n     * Peter Møller is converted to Peter Mller, because banks don't accept 'ø'.\n     * After replacement, the ownerName must have at least three alphanumeric characters\n     * (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character\n     * (A-Z, a-z). For example:\n     * John17 - allowed.\n     * J17 - allowed.\n     * 171 - not allowed.\n     * John-7 - allowed.\n     */\n    ownerName?: string;\n\n    /**\n     * The bank account holder's tax ID.\n     */\n    taxId?: string;\n}\n\nexport interface Card {\n    /**\n     * The card verification code (1-20 characters). Depending on the card brand, it\n     * is known also as:\n     * CVV2/CVC2 – length: 3 digits\n     * CID – length: 4 digits\n     */\n    cvc?: string;\n\n    /**\n     * The card expiry month. Format: 2 digits, zero-padded for single digits. For example:\n     * 03 = March\n     * 11 = November\n     * Required\n     */\n    expiryMonth: string;\n\n    /**\n     * The card expiry year. Format: 4 digits. For example: 2020\n     * Required\n     */\n    expiryYear: string;\n\n    /**\n     * The name of the cardholder, as printed on the card.\n     * Required\n     */\n    holderName: string;\n\n    /**\n     * The issue number of the card (for some UK debit cards only).\n     */\n    issueNumber?: string;\n\n    /**\n     * The card number (4-19 characters). Do not use any separators. When this value is\n     * returned in a response, only the last 4 digits of the card number are returned.\n     * Required\n     */\n    number: string;\n\n    /**\n     * The month component of the start date (for some UK debit cards only).\n     */\n    startNumnber?: string;\n\n    /**\n     * The year component of the start date (for some UK debit cards only).\n     */\n    startYear?: string;\n}\n\nexport interface CreditCardPlaceHolder {\n    encryptedCardNumber?: string;\n    encryptedExpiryDate?: string;\n    encryptedSecurityCode: string;\n}\n\nexport interface SepaPlaceHolder {\n    ownerName?: string;\n    ibanNumber?: string;\n}\n\nexport interface AdyenComponent {\n    mount(containerId: string): HTMLElement;\n    unmount(): void;\n}\n\nexport interface AdyenCheckout {\n    create(type: string, componentOptions?: AdyenCreditCardComponentOptions |\n        ThreeDS2DeviceFingerprintComponentOptions | ThreeDS2ChallengeComponentOptions): AdyenComponent;\n}\n\nexport interface AdyenCreditCardComponentOptions {\n    /**\n     * Set an object containing the details array for type: scheme from\n     * the /paymentMethods response.\n     */\n    details?: InputDetail[];\n\n    /**\n     * Set to true to show the checkbox to save card details for the next payment.\n     */\n    enableStoreDetails?: boolean;\n\n    /**\n     * Set to true to request the name of the card holder.\n     */\n    hasHolderName?: boolean;\n\n    /**\n     * Set to true to require the card holder name.\n     */\n    holderNameRequired?: boolean;\n\n    /**\n     * Prefill the card holder name field. Supported from Card component\n     */\n    holderName?: string;\n\n    /**\n     * Defaults to ['mc','visa','amex']. Configure supported card types to\n     * facilitate brand recognition used in the Secured Fields onBrand callback.\n     * See list of available card types. If a shopper enters a card type not\n     * specified in the GroupTypes configuration, the onBrand callback will not be invoked.\n     */\n    groupTypes?: string[];\n    /**\n     * Set a style object to customize the input fields. See Styling Secured Fields\n     * for a list of supported properties.\n     */\n    styles?: AdyenStyleOptions;\n\n    /**\n     * Specify the sample values you want to appear for card detail input fields.\n     */\n    placeholders?: CreditCardPlaceHolder | SepaPlaceHolder;\n\n    /**\n     * Called when the shopper enters data in the card input fields.\n     * Here you have the option to override your main Adyen Checkout configuration.\n     */\n    onChange?(state: AdyenCardState, component: AdyenComponent): void;\n}\n\nexport interface AdyenCardState {\n    data: AdyenCardDataPaymentMethodState;\n    isValid?: boolean;\n}\n\nexport interface AdyenCardDataPaymentMethodState {\n    paymentMethod: AdyenCardPaymentMethodState;\n}\nexport interface AdyenCardPaymentMethodState {\n    encryptedCardNumber: string;\n    encryptedExpiryMonth: string;\n    encryptedExpiryYear: string;\n    encryptedSecurityCode: string;\n    holderName?: string;\n    type: string;\n}\nexport interface ThreeDS2DeviceFingerprintComponentOptions {\n    fingerprintToken: string;\n    onComplete(fingerprintData: any): void;\n    onError(error: AdyenError): void;\n}\n\nexport enum ResultCode {\n    AuthenticationFinished = 'AuthenticationFinished',\n    Authorised = 'Authorised',\n    Cancelled = 'Cancelled',\n    ChallengeShopper = 'ChallengeShopper',\n    Error = 'Error',\n    IdentifyShopper = 'IdentifyShopper',\n    Pending = 'Pending',\n    Received = 'Received',\n    RedirectShopper = 'RedirectShopper',\n    Refused = 'Refused',\n}\n\nexport interface ThreeDS2ChallengeComponentOptions {\n    challengeToken: string;\n    size?: string;\n    onComplete(fingerprintData: any): void;\n    onError(error: AdyenError): void;\n}\n\nexport interface AdyenStyleOptions {\n    /**\n     * Base styling applied to the iframe. All styling extends from this style.\n     */\n    base?: CssProperties;\n\n    /**\n     * Styling applied when a field fails validation.\n     */\n    error?: CssProperties;\n\n    /**\n     * Styling applied to the field's placeholder values.\n     */\n    placeholder?: CssProperties;\n\n    /**\n     * Styling applied once a field passes validation.\n     */\n    validated?: CssProperties;\n}\n\nexport interface AdyenError {\n    errorCode: string;\n    message: string;\n}\n\nexport interface CssProperties {\n    background?: string;\n    color?: string;\n    display?: string;\n    font?: string;\n    fontFamily?: string;\n    fontSize?: string;\n    fontSizeAdjust?: string;\n    fontSmoothing?: string;\n    fontStretch?: string;\n    fontStyle?: string;\n    fontVariant?: string;\n    fontVariantAlternates?: string;\n    fontVariantCaps?: string;\n    fontVariantEastAsian?: string;\n    fontVariantLigatures?: string;\n    fontVariantNumeric?: string;\n    fontWeight?: string;\n    letterSpacing?: string;\n    lineHeight?: string;\n    mozOsxFontSmoothing?: string;\n    mozTransition?: string;\n    outline?: string;\n    opacity?: string | number;\n    padding?: string;\n    textAlign?: string;\n    textShadow?: string;\n    transition?: string;\n    webkitFontSmoothing?: string;\n    webkitTransition?: string;\n}\n\nexport interface ThreeDS2OnComplete {\n    data: {\n        details: {\n            'threeds2.challengeResult'?: string;\n            'threeds2.fingerprint'?: string;\n            paymentData: string;\n        };\n    };\n}\n\nexport interface ThreeDSRequiredErrorResponse {\n    errors: [\n        { code: string }\n    ];\n    three_ds_result: {\n        result_code: ResultCode;\n        token?: string;\n        payment_data?: string;\n        acs_url?: string;\n        callback_url?: string;\n        payer_auth_request?: string;\n        merchant_data?: string;\n    };\n    status: string;\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry, RegistryOptions } from '../common/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy, PaymentStrategyType> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n\n        const cacheToken = [paymentMethod.gateway, paymentMethod.id]\n            .filter(value => value !== undefined && value !== null)\n            .join('-');\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): PaymentStrategyType {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this._hasFactoryForMethod(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return PaymentStrategyType.OFFLINE;\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return PaymentStrategyType.LEGACY;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return PaymentStrategyType.OFFSITE;\n        }\n\n        return PaymentStrategyType.CREDIT_CARD;\n    }\n\n    private _hasFactoryForMethod(\n        methodId: string\n    ): methodId is PaymentStrategyType {\n        return this._hasFactory(methodId);\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen' || paymentMethod.gateway === 'barclaycard') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { HostedInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { AdyenCardState, AdyenCheckout, AdyenComponent, AdyenConfiguration, AdyenError, ResultCode, ThreeDS2ComponentType, ThreeDS2OnComplete, ThreeDS2Result } from './adyenv2';\nimport AdyenV2PaymentInitializeOptions from './adyenv2-initialize-options';\nimport AdyenV2ScriptLoader from './adyenv2-script-loader';\n\nexport default class AdyenV2PaymentStrategy implements PaymentStrategy {\n    private _adyenCheckout?: AdyenCheckout;\n    private _stateContainer?: string;\n    private _adyenv2?: AdyenV2PaymentInitializeOptions;\n    private _adyenComponent?: AdyenComponent;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _adyenV2ScriptLoader: AdyenV2ScriptLoader,\n        private _formPoster: FormPoster,\n        private _locale: string\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { adyenv2 } = options;\n\n        if (!adyenv2) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.adyenv2\" argument is not provided.');\n        }\n\n        const paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._adyenv2 = adyenv2;\n\n        const configuration: AdyenConfiguration = {\n            environment:  paymentMethod.initializationData.environment,\n            locale: this._locale,\n            originKey: paymentMethod.initializationData.originKey,\n            paymentMethodsResponse: paymentMethod.initializationData.paymentMethodsResponse,\n        };\n\n        return this._adyenV2ScriptLoader.load(configuration)\n            .then(adyenCheckout => {\n                this._adyenCheckout = adyenCheckout;\n\n                const adyenComponent = this._adyenCheckout.create(\n                    paymentMethod.method,\n                    {\n                        ...adyenv2.options,\n                        onChange: (state: AdyenCardState) => {\n                            this._updateStateContainer(state);\n                        },\n                    }\n                );\n\n                adyenComponent.mount(`#${adyenv2.containerId}`);\n\n                this._adyenComponent = adyenComponent;\n\n                return Promise.resolve(this._store.getState());\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const shouldSaveInstrument = paymentData && (paymentData as HostedInstrument).shouldSaveInstrument;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (paymentData && isVaultedInstrument(paymentData)) {\n                    return this._store.dispatch(this._paymentActionCreator.submitPayment({...payment, paymentData}));\n                }\n\n                const paymentPayload = {\n                    methodId: payment.methodId,\n                    paymentData: {\n                        nonce: this._getStateContainer(),\n                        shouldSaveInstrument,\n                    },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n            })\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                if (error.body.three_ds_result.result_code === ResultCode.IdentifyShopper) {\n                    return this._handle3DS2Fingerprint(error.body.three_ds_result, payment.methodId)\n                        .then((payment: Payment) =>\n                            this._store.dispatch(this._paymentActionCreator.submitPayment({\n                                ...payment,\n                                paymentData: {\n                                    ...payment.paymentData,\n                                    shouldSaveInstrument,\n                                },\n                            })))\n                        .catch(error => {\n                            if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                                return Promise.reject(error);\n                            }\n\n                            if (error.body.three_ds_result.result_code === ResultCode.ChallengeShopper) {\n                                return this._handle3DS2Challenge(error.body.three_ds_result, payment.methodId)\n                                    .then((payment: Payment) =>\n                                        this._store.dispatch(this._paymentActionCreator.submitPayment({\n                                            ...payment,\n                                            paymentData: {\n                                                ...payment.paymentData,\n                                                shouldSaveInstrument,\n                                            },\n                                        }))\n                                    );\n                            }\n\n                            return Promise.reject(error);\n                        });\n                }\n\n                if (error.body.three_ds_result.result_code === ResultCode.ChallengeShopper) {\n                    return this._handle3DS2Challenge(error.body.three_ds_result, payment.methodId)\n                        .then((payment: Payment) =>\n                            this._store.dispatch(this._paymentActionCreator.submitPayment({\n                                ...payment,\n                                paymentData: {\n                                    ...payment.paymentData,\n                                    shouldSaveInstrument,\n                                },\n                            }))\n                        );\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._adyenComponent) {\n            this._adyenComponent.unmount();\n            this._adyenComponent = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _getAdyenV2PaymentInitializeOptions(): AdyenV2PaymentInitializeOptions {\n        if (!this._adyenv2) {\n            throw new InvalidArgumentError('\"options.adyenv2\" argument was not provided during initialization.');\n        }\n\n        return this._adyenv2;\n    }\n\n    private _getStateContainer(): string {\n        if (!this._stateContainer) {\n            return '{}';\n        }\n\n        return this._stateContainer;\n    }\n\n    private _getThreeDS2ChallengeWidgetSize(): string {\n        const { widgetSize } = this._getAdyenV2PaymentInitializeOptions().threeDS2Options;\n\n        if (!widgetSize) {\n            return '01';\n        }\n\n        return widgetSize;\n    }\n\n    private _handle3DS2Challenge(resultObject: ThreeDS2Result, paymentMethodId: string): Promise<Payment> {\n        return new Promise((resolve, reject) => {\n            if (!this._adyenCheckout) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const { onComplete, onLoad } = this._getAdyenV2PaymentInitializeOptions().threeDS2Options;\n\n            const threeDS2Component = this._adyenCheckout\n                .create(ThreeDS2ComponentType.ThreeDS2Challenge, {\n                    challengeToken: resultObject.token,\n                    onComplete: (challengeData: ThreeDS2OnComplete) => {\n                        const challengePaymentPayload = {\n                            ...challengeData.data,\n                            paymentData: resultObject.payment_data,\n                        };\n\n                        const paymentPayload = {\n                            methodId: paymentMethodId,\n                            paymentData: {\n                                nonce: JSON.stringify(challengePaymentPayload),\n                            },\n                        };\n\n                        onComplete();\n\n                        resolve(paymentPayload);\n                    },\n                    onError: (error: AdyenError) => reject(error),\n                    size: this._getThreeDS2ChallengeWidgetSize(),\n                });\n\n            const threeDS2Container = this._getAdyenV2PaymentInitializeOptions().threeDS2ContainerId;\n\n            onLoad(() => {\n                threeDS2Component.unmount();\n                reject();\n            });\n\n            threeDS2Component.mount(`#${threeDS2Container}`);\n        });\n    }\n\n    private _handle3DS2Fingerprint(resultObject: ThreeDS2Result, paymentMethodId: string): Promise<Payment> {\n        return new Promise((resolve, reject) => {\n            if (!this._adyenCheckout) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const { onComplete, onLoad } = this._getAdyenV2PaymentInitializeOptions().threeDS2Options;\n\n            const threeDS2Component = this._adyenCheckout\n                .create(ThreeDS2ComponentType.ThreeDS2DeviceFingerprint, {\n                    fingerprintToken: resultObject.token,\n                    onComplete: (fingerprintData: ThreeDS2OnComplete) => {\n                        const fingerprintPaymentPayload = {\n                            ...fingerprintData.data,\n                            paymentData: resultObject.payment_data,\n                        };\n\n                        const paymentPayload = {\n                            methodId: paymentMethodId,\n                            paymentData: {\n                                nonce: JSON.stringify(fingerprintPaymentPayload),\n                            },\n                        };\n\n                        onComplete();\n\n                        resolve(paymentPayload);\n                    },\n                    onError: (error: AdyenError) => reject(error),\n                });\n\n            const threeDS2Container = this._getAdyenV2PaymentInitializeOptions().threeDS2ContainerId;\n\n            onLoad(() => {\n                threeDS2Component.unmount();\n                reject();\n            });\n\n            threeDS2Component.mount(`#${threeDS2Container}`);\n        });\n    }\n\n    private _updateStateContainer(newState: AdyenCardState) {\n        if (newState.isValid) {\n            const state = {\n                ...newState.data.paymentMethod,\n                origin: window.location.origin,\n            };\n\n            this._stateContainer = JSON.stringify(state);\n        }\n    }\n}\n","export enum OrderIncludes {\n    DigitalItemsCategories = 'lineItems.digitalItems.categories',\n    PhysicalItemsCategories = 'lineItems.physicalItems.categories',\n}\n\nexport default interface OrderParams {\n    include?: OrderIncludes[];\n}\n","import { ScriptLoader, StylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { AdyenCheckout, AdyenConfiguration, AdyenHostWindow } from './adyenv2';\n\nexport default class AdyenV2ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _stylesheetLoader: StylesheetLoader,\n        private _window: AdyenHostWindow = window\n    ) {}\n\n    load(configuration: AdyenConfiguration): Promise<AdyenCheckout> {\n        return Promise.all([\n            this._stylesheetLoader.loadStylesheet(`https://checkoutshopper-${configuration.environment}.adyen.com/checkoutshopper/sdk/3.0.0/adyen.css`),\n            this._scriptLoader.loadScript(`https://checkoutshopper-${configuration.environment}.adyen.com/checkoutshopper/sdk/3.0.0/adyen.js`),\n        ])\n        .then(() => {\n            if (!this._window.AdyenCheckout) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return new this._window.AdyenCheckout(configuration);\n        })\n        .catch(() => {\n            throw new PaymentMethodClientUnavailableError();\n        });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import { LineItemCategory } from '../../../cart';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { AmountTransformer } from '../../../common/utility';\nimport { Order, OrderActionCreator, OrderIncludes, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { Consignment } from '../../../shipping';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Affirm, AffirmAddress, AffirmDiscount, AffirmFailResponse, AffirmItem, AffirmRequestData, AffirmSuccessResponse } from './affirm';\nimport AffirmScriptLoader from './affirm-script-loader';\n\nexport default class AffirmPaymentStrategy implements PaymentStrategy {\n    private _affirm?: Affirm;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _affirmScriptLoader: AffirmScriptLoader\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { config: { testMode }, clientToken: publicKey } = paymentMethod;\n\n                return this._affirmScriptLoader.load(publicKey, testMode);\n            })\n            .then(affirm => {\n                this._affirm = affirm;\n\n                return this._store.getState();\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const methodId = payload.payment && payload.payment.methodId;\n        const { useStoreCredit } = payload;\n        const { _affirm } = this;\n\n        if (!_affirm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        const requestOptions = {\n            ...options,\n            params: {\n                include: [\n                    OrderIncludes.PhysicalItemsCategories,\n                    OrderIncludes.DigitalItemsCategories,\n                ],\n            },\n        };\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, requestOptions))\n            .then<AffirmSuccessResponse>(() => {\n                _affirm.checkout(this._getCheckoutInformation());\n\n                return new Promise((resolve, reject) => {\n                    _affirm.checkout.open({\n                        onFail: (failObject: AffirmFailResponse) => {\n                            failObject.reason === 'canceled' ? reject(new PaymentMethodCancelledError()) : reject(new PaymentMethodInvalidError());\n                        },\n                        onSuccess: successObject => { resolve(successObject); },\n                    });\n                    _affirm.ui.error.on('close', () => {\n                        reject(new PaymentMethodCancelledError());\n                    });\n                });\n            })\n            .then(result => {\n                const paymentPayload = {\n                    methodId,\n                    paymentData: { nonce: result.checkout_token },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._affirm) {\n            this._affirm = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getCheckoutInformation(): AffirmRequestData {\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const consignments = state.consignments.getConsignments();\n        const order = state.order.getOrder();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const amountTransformer = new AmountTransformer(order.currency.decimalPlaces);\n        const billingAddress = this._getBillingAddress();\n\n        return {\n            merchant: {\n                user_confirmation_url: config.links.checkoutLink,\n                user_cancel_url: config.links.checkoutLink,\n                user_confirmation_url_action: 'POST',\n            },\n            shipping: this._getShippingAddress() || billingAddress,\n            billing: billingAddress,\n            items: this._getItems(amountTransformer, order),\n            metadata: {\n                shipping_type: this._getShippingType(consignments),\n                mode: 'modal',\n                platform_type: 'BigCommerce',\n                platform_version: '',\n                platform_affirm: '',\n            },\n            discounts: this._getDiscounts(amountTransformer, order),\n            order_id: order.orderId ? order.orderId.toString() : '',\n            shipping_amount: amountTransformer.toInteger(order.shippingCostTotal),\n            tax_amount: amountTransformer.toInteger(order.taxTotal),\n            total: amountTransformer.toInteger(order.orderAmount),\n        };\n    }\n\n    private _getShippingType(consignments?: Consignment[]): string {\n        if (!consignments) {\n            return '';\n        }\n\n        const consignment = consignments[0];\n\n        return consignment && consignment.selectedShippingOption ?\n            consignment.selectedShippingOption.type : '';\n    }\n\n    private _getBillingAddress(): AffirmAddress {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const billingInformation = {\n            name: {\n                first: billingAddress.firstName,\n                last: billingAddress.lastName,\n                full: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            },\n            address: {\n                line1: billingAddress.address1,\n                line2: billingAddress.address2,\n                city: billingAddress.city,\n                state: billingAddress.stateOrProvinceCode,\n                zipcode: billingAddress.postalCode,\n                country: billingAddress.countryCode,\n            },\n            phone_number: billingAddress.phone,\n            email: billingAddress.email,\n        };\n\n        return billingInformation;\n    }\n\n    private _getShippingAddress(): AffirmAddress | undefined {\n        const state = this._store.getState();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n\n        if (!shippingAddress) {\n            return;\n        }\n\n        const shippingInformation = {\n            name: {\n                first: shippingAddress.firstName,\n                last: shippingAddress.lastName,\n                full: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            },\n            address: {\n                line1: shippingAddress.address1,\n                line2: shippingAddress.address2,\n                city: shippingAddress.city,\n                state: shippingAddress.stateOrProvinceCode,\n                zipcode: shippingAddress.postalCode,\n                country: shippingAddress.countryCode,\n            },\n            phone_number: shippingAddress.phone,\n        };\n\n        return shippingInformation;\n    }\n\n    private _getItems(amountTransformer: AmountTransformer, order: Order): AffirmItem[] {\n        const items: AffirmItem[] = [];\n\n        for (const item of order.lineItems.physicalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.digitalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.giftCertificates) {\n            items.push({\n                display_name: item.name,\n                sku: '',\n                unit_price: amountTransformer.toInteger(item.amount),\n                qty: 1,\n                item_image_url: '',\n                item_url: '',\n            });\n        }\n\n        if (order.lineItems.customItems) {\n            for (const item of order.lineItems.customItems) {\n                items.push({\n                    display_name: item.name,\n                    sku: item.sku,\n                    unit_price: amountTransformer.toInteger(item.listPrice),\n                    qty: item.quantity,\n                    item_image_url: '',\n                    item_url: '',\n                });\n            }\n        }\n\n        return items;\n    }\n\n    private _getDiscounts(amountTransformer: AmountTransformer, order: Order): AffirmDiscount {\n        const discounts: AffirmDiscount = {};\n\n        for (const line of order.coupons) {\n            if (line.discountedAmount > 0) {\n                discounts[line.code] = {\n                    discount_amount: amountTransformer.toInteger(line.discountedAmount),\n                    discount_display_name: line.displayName,\n                };\n            }\n        }\n\n        if (order.discountAmount > 0) {\n            discounts.DISCOUNTED_AMOUNT = {\n                discount_amount: amountTransformer.toInteger(order.discountAmount),\n                discount_display_name: 'discount',\n            };\n        }\n\n        return discounts;\n    }\n\n    private _getCategories(categories?: LineItemCategory[][]): string[][] {\n        if (!categories) {\n            return[[]];\n        }\n\n        return categories.map(categoryTree => categoryTree.map(category => category.name));\n    }\n}\n","/**\n * Used this approach as Affirm uses snipped for initializing. Please refer to Affirm documentation in: https://docs.affirm.com/Integrate_Affirm/Direct_API#1._Add_Affirm.js\n */\nexport default Function(`\n'use strict';\nreturn function loadAffirmJS(apiKey, scriptURL) {\n    var _affirm_config = {\n        public_api_key:  apiKey,\n        script:          scriptURL\n    };\n    (function(l,g,m,e,a,f,b){var d,c=l[m]||{},h=document.createElement(f),n=document.getElementsByTagName(f)[0],k=function(a,b,c){return function(){a[b]._.push([c,arguments])}};c[e]=k(c,e,\"set\");d=c[e];c[a]={};c[a]._=[];d._=[];c[a][b]=k(c,a,b);a=0;for(b=\"set add save post open empty reset on off trigger ready setProduct\".split(\" \");a<b.length;a++)d[b[a]]=k(c,e,b[a]);a=0;for(b=[\"get\",\"token\",\"url\",\"items\"];a<b.length;a++)d[b[a]]=function(){};h.async=!0;h.src=g[f];n.parentNode.insertBefore(h,n);delete g[f];d(g);l[m]=c})(window,_affirm_config,\"affirm\",\"checkout\",\"ui\",\"script\",\"ready\");\n}`)();\n","import { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { Affirm, AffirmHostWindow, AffirmScripts } from './affirm';\nimport loadAffirmJS from './affirmJs';\n\nexport default class AffirmScriptLoader {\n    constructor(\n        public _window: AffirmHostWindow = window\n    ) { }\n\n    load(apikey?: string, testMode?: boolean): Promise<Affirm> {\n        const scriptURI = this._getScriptURI(testMode);\n\n        loadAffirmJS(apikey, scriptURI);\n\n        if (!this._window.affirm) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return Promise.resolve(this._window.affirm);\n    }\n\n    private _getScriptURI(testMode: boolean = false): string {\n        const SCRIPTS_DEFAULT: AffirmScripts = {\n            PROD: '//cdn1.affirm.com/js/v2/affirm.js',\n            SANDBOX: '//cdn1-sandbox.affirm.com/js/v2/affirm.js',\n        };\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { StoreCreditActionCreator } from '../../../store-credit';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy implements PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._afterpaySdk = await this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName));\n\n        return this._store.getState();\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        let state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n        const { useStoreCredit } = payload;\n\n        if (useStoreCredit !== undefined) {\n            state = await this._store.dispatch(\n                this._storeCreditActionCreator.applyStoreCredit(useStoreCredit)\n            );\n        }\n\n        await this._checkoutValidator.validate(state.checkout.getCheckout(), options);\n\n        state = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n        );\n\n        await this._redirectToAfterpay(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId));\n\n        // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n        return new Promise<never>(() => {});\n    }\n\n    async finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n        const config = state.config.getContextConfig();\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config || !config.payment.token) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const paymentPayload = {\n            methodId: payment.providerId,\n            paymentData: { nonce: config.payment.token },\n        };\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder({}, options));\n\n        return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n    }\n\n    private _redirectToAfterpay(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.redirect({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as unknown as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (_: any, key: string) => isPrivate(key));\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { noop } from 'lodash';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, mapToInternalAddress } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayConfirmationFlow from './amazon-pay-confirmation-flow';\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayPaymentInitializeOptions from './amazon-pay-payment-initialize-options';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n    private _isPaymentMethodSelected: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n        this._isPaymentMethodSelected = false;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._walletOptions = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const sellerId = this._getMerchantId();\n\n        if (!referenceId || !sellerId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        if (!this._isPaymentMethodSelected) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        if (options && this._paymentMethod && this._paymentMethod.config.is3dsEnabled) {\n            return this._processPaymentWith3ds(\n                sellerId,\n                referenceId,\n                paymentPayload.methodId,\n                useStoreCredit,\n                options\n            );\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _getOrderReferenceIdFromInitializationData(): string | undefined {\n        return this._paymentMethod ? this._paymentMethod.initializationData.orderReferenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId() || this._getOrderReferenceIdFromInitializationData();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => {\n                            this._isPaymentMethodSelected = true;\n                            onPaymentSelect(orderReference);\n                        })\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!this._getOrderReferenceId()) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n\n    private _processPaymentWith3ds(sellerId: string, referenceId: string, methodId: string, useStoreCredit: boolean, options: PaymentRequestOptions): Promise<never> {\n        return new Promise((_, reject) => {\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            return this._window.OffAmazonPayments.initConfirmationFlow(\n                sellerId,\n                referenceId,\n                (confirmationFlow: AmazonPayConfirmationFlow) => {\n                    return this._store.dispatch(\n                        this._orderActionCreator.submitOrder({useStoreCredit}, options)\n                    )\n                        .then(() => this._store.dispatch(\n                            this._remoteCheckoutActionCreator.initializePayment(methodId, {\n                                referenceId,\n                                useStoreCredit,\n                            }))\n                        )\n                        .then(() => {\n                            confirmationFlow.success();\n\n                            return new Promise<never>(() => {});\n                        })\n                        .catch(error => {\n                            confirmationFlow.error();\n\n                            return reject(error);\n                        });\n                }\n            );\n        });\n    }\n}\n","export interface OverlayOptions {\n    background?: string;\n    id?: string;\n    transitionDuration?: number;\n    zIndex?: number;\n}\n\nexport interface OverlayShowOptions {\n    onClick?(event: MouseEvent): void;\n}\n\nexport default class Overlay {\n    private _element: HTMLElement;\n    private _unregisterClick?: () => void;\n\n    constructor(options?: OverlayOptions) {\n        this._element = this._createElement(options);\n    }\n\n    show(options?: OverlayShowOptions): void {\n        if (this._element.parentElement) {\n            return;\n        }\n\n        this._registerClick(options);\n\n        document.body.appendChild(this._element);\n\n        // Fade In\n        setTimeout(() => this._element.style.opacity = '1');\n    }\n\n    remove(): void {\n        if (!this._element.parentElement) {\n            return;\n        }\n\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        this._removeAfterTransition();\n\n        setTimeout(() => this._element.style.opacity = '0');\n    }\n\n    private _createElement(options?: OverlayOptions): HTMLElement {\n        const element = document.createElement('div');\n        const {\n            background = 'rgba(0, 0, 0, 0.8)',\n            id = null,\n            transitionDuration = 400,\n            zIndex = 2147483647,\n        } = options || {};\n\n        element.style.background = background;\n        element.style.display = 'block';\n        element.style.height = '100%';\n        element.style.left = '0px';\n        element.style.opacity = '0';\n        element.style.position = 'fixed';\n        element.style.top = '0px';\n        element.style.transition = `opacity ${transitionDuration}ms ease-out`;\n        element.style.width = '100%';\n        element.style.zIndex = zIndex.toString();\n\n        if (id) {\n            element.id = id;\n        }\n\n        return element;\n    }\n\n    private _registerClick(options?: OverlayShowOptions): void {\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        if (options && options.onClick) {\n            const { onClick } = options;\n\n            this._element.addEventListener('click', onClick);\n\n            this._unregisterClick = () => {\n                this._element.removeEventListener('click', onClick);\n                this._unregisterClick = undefined;\n            };\n        }\n    }\n\n    private _removeAfterTransition(): void {\n        const handeTransition: (event: Event) => void = event => {\n            // NOTE: `event` is not correctly typed in this version of TS\n            if ((event as TransitionEvent).propertyName !== 'opacity') {\n                return;\n            }\n\n            if (this._element.parentElement) {\n                this._element.parentElement.removeChild(this._element);\n            }\n\n            this._element.removeEventListener('transitionend', handeTransition);\n        };\n\n        this._element.addEventListener('transitionend', handeTransition);\n    }\n}\n","import { noop } from 'lodash';\n\nimport { Overlay } from '../overlay';\n\nexport interface ModalOptions {\n    style?: ModalStyleOptions;\n    id?: string;\n    transitionDuration?: number;\n    contentsId?: string;\n}\n\nexport interface ModalStyleOptions {\n    className?: string;\n}\n\nexport interface ModalShowOptions {\n    showCloseButton?: boolean;\n    openCallback?(): void;\n    closeCallback?(): void;\n}\n\nexport default class Modal {\n    private _element: HTMLElement;\n    private _closeCallback?: () => void;\n    private overlay: Overlay;\n    private _closeButton!: HTMLElement;\n\n    constructor(options?: ModalOptions) {\n        this._element = this._createElement(options);\n        this.overlay = new Overlay({ zIndex: 3000 });\n    }\n\n    open(options?: ModalShowOptions): void {\n        const { closeCallback, openCallback, showCloseButton  } = options || {};\n\n        if (!showCloseButton) {\n            this.hideCloseButton();\n        }\n\n        this._closeCallback = closeCallback || noop ;\n\n        if (openCallback) {\n            openCallback();\n        }\n\n        this.overlay.show();\n\n        setTimeout(() => this._element.style.opacity = '1');\n        setTimeout(() => this._element.style.display = 'block');\n    }\n\n    close(): void {\n        if (this._closeCallback) {\n            this._closeCallback();\n        }\n\n        this.overlay.remove();\n\n        setTimeout(() => this._element.style.opacity = '0');\n        setTimeout(() => this._element.style.display = 'none');\n    }\n\n    showCloseButton(): void {\n        this._closeButton.style.display = 'block';\n    }\n\n    hideCloseButton(): void {\n        this._closeButton.style.display = 'none';\n    }\n\n    unmount(): void {\n        if (this._closeButton && this._closeButton.parentElement) {\n            this._closeButton.removeEventListener('click', () => this.close());\n            this._closeButton.parentElement.removeChild(this._closeButton);\n        }\n\n        if (this._element.parentElement) {\n            this._element.parentElement.removeChild(this._element);\n        }\n\n        if (this._closeCallback) {\n            this._closeCallback = undefined;\n        }\n\n        if (this.overlay) {\n            this.overlay.remove();\n        }\n    }\n\n    private _createElement(options?: ModalOptions): HTMLElement {\n        const element = document.createElement('div');\n        const {\n            style = {},\n            id = null,\n            transitionDuration = 400,\n            contentsId = '',\n        } = options || {};\n\n        element.style.display = 'none';\n        element.style.opacity = '0';\n        element.style.position = 'fixed';\n        element.style.zIndex = '4000';\n\n        if (!style.className) {\n            element.style.transition = `opacity ${transitionDuration}ms ease-out`;\n            element.style.top = '50%';\n            element.style.left = '50%';\n            element.style.transform = 'translate(-50%, -50%)';\n            element.style.width = 'fit-content';\n            element.style.minWidth = '30%';\n            element.style.height = 'fit-content';\n            element.style.minHeight = '100px';\n            element.style.backgroundColor = 'white';\n            element.style.padding = '10px';\n        } else {\n            element.className = style.className || '';\n        }\n\n        if (id) {\n            element.id = id;\n        }\n\n        this._closeButton = this._createCloseButton();\n        const contents = this._createContents(contentsId);\n\n        element.appendChild(this._closeButton);\n        element.appendChild(contents);\n        document.body.appendChild(element);\n\n        return element;\n    }\n\n    private _createCloseButton(): HTMLElement {\n        const element = document.createElement('button');\n        element.style.width = '32px';\n        element.style.height = '32px';\n        element.style.top = '0px';\n        element.style.cssFloat = 'right';\n        // Where to get the icon?\n        element.innerText = 'close';\n        element.addEventListener('click', () => this.close());\n\n        return element;\n    }\n\n    private _createContents(id?: string): HTMLElement {\n        const element = document.createElement('div');\n        element.style.display = 'block';\n        element.style.width = '100%';\n        element.style.height = '100%';\n\n        if (id) {\n            element.id = id;\n        }\n\n        return element;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { Modal } from '../../../common/modal/';\nimport LoadingIndicator from '../../../embedded-checkout/loading-indicator';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { containerSuffix, iframeSuffix } from './barclaycard';\n\nexport default class BarclaycardPaymentStrategy implements PaymentStrategy {\n    private _methodId!: string;\n    private iframe!: HTMLIFrameElement;\n    private modal!: Modal;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _loadingIndicator: LoadingIndicator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        this.modal = new Modal({\n            style: { },\n            contentsId: `${this._methodId}${containerSuffix}`,\n        });\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = payload;\n\n        const iframeContainerId = `${this._methodId}${containerSuffix}`;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError([this._methodId]);\n        }\n\n        payment.gatewayId = 'barclaycard';\n        this._loadingIndicator.show(iframeContainerId);\n\n        return this._createPaymentIframe(iframeContainerId)\n        .then(() => {\n            return new Promise<InternalCheckoutSelectors>((resolve, reject) => {\n                this.modal.open({\n                    closeCallback: reject,\n                    showCloseButton: false,\n                });\n\n                // to be changed later\n                window.addEventListener('message', event => {\n                    if (event.data === 'closeModal') {\n                        this.modal.close();\n                        resolve();\n                    }\n                });\n\n                this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment(payment.methodId, payment.gatewayId, `${this._methodId}${iframeSuffix}`))\n                );\n            });\n        });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (options) {\n            // const { methodId } = options;\n            // TODO\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _createPaymentIframe(containerId: string): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const frameContainer = document.getElementById(containerId);\n\n            if (!frameContainer) {\n                return reject(new Error('Need a container to insert the iframe'));\n            }\n\n            const iframe = document.createElement('iframe');\n\n            iframe.style.border = 'none';\n            iframe.style.display = 'none';\n            iframe.style.minWidth = '500px';\n            iframe.style.minHeight = '450px';\n            iframe.name = `${this._methodId}${iframeSuffix}`;\n            this.iframe = iframe;\n            frameContainer.appendChild(this.iframe);\n\n            this.iframe.addEventListener('load', () => {\n                this.iframe.style.display = 'block';\n                this._loadingIndicator.hide();\n                this.modal.showCloseButton();\n            });\n\n            return resolve();\n        });\n    }\n}\n","export const containerSuffix = '_frame_container';\nexport const iframeSuffix = '_payment_frame';\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((_, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { Overlay } from '../../../common/overlay';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _overlay: Overlay\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => {\n                this._overlay.show({\n                    onClick: () => paypal.focusWindow(),\n                });\n\n                return paypal.tokenize({\n                    amount,\n                    currency,\n                    enableShippingAddress: true,\n                    flow: 'checkout',\n                    locale: storeLanguage,\n                    offerCredit,\n                    useraction: 'commit',\n                });\n            })\n            .then(response => {\n                this._overlay.remove();\n\n                return response;\n            })\n            .catch(error => {\n                this._overlay.remove();\n\n                throw error;\n            });\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed because the client library of a payment method has thrown an unexpected error.');\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodFailedError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy implements PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return this._store.getState();\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new PaymentMethodFailedError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const order = state.order.getOrder();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, order.orderAmount) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError, PaymentMethodFailedError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeError } from './braintree';\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport isBraintreeError from './is-braintree-error';\n\nexport default class BraintreePaypalPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => this._store.getState())\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment, order.useStoreCredit) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: BraintreeError | Error): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        if (error.code === 'PAYPAL_POPUP_CLOSED') {\n            throw new PaymentMethodCancelledError(error.message);\n        }\n\n        throw new PaymentMethodFailedError(error.message);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody, useStoreCredit?: boolean): Promise<Payment> {\n        const state = this._store.getState();\n        const grandTotal = state.checkout.getOutstandingBalance(useStoreCredit);\n        const config = state.config.getStoreConfig();\n\n        if (!grandTotal) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","export const CardinalSignatureValidationErrors = [100004, 1010, 1011, 1020];\n\nexport interface CardinalSDK {\n    configure(params: CardinalConfiguration): void;\n    on(params: CardinalEventType, callback: CardinalEventMap[CardinalEventType]): void;\n    off(params: CardinalEventType): void;\n    setup<K extends keyof CardinalInitializationDataMap>(initializationType: K, initializationData: CardinalInitializationDataMap[K]): void;\n    trigger(event: CardinalTriggerEvents, data?: string): Promise<CardinalBinProcessResponse | void>;\n    continue(paymentBrand: CardinalPaymentBrand, continueObject: CardinalContinue, order: CardinalPartialOrder): void;\n    start(paymentBrand: CardinalPaymentBrand, order: CardinalPartialOrder, jwt?: string): void;\n}\n\nexport interface CardinalWindow extends Window {\n    Cardinal?: CardinalSDK;\n}\n\nexport interface CardinalEventMap {\n    [CardinalEventType.SetupCompleted](setupCompleteData: CardinalSetupCompletedData): void;\n    [CardinalEventType.Validated](data: CardinalValidatedData, jwt?: string): void;\n}\n\nexport type CardinalConfiguration = Partial<{\n    logging: {\n        level: string;\n    };\n    payment: {\n        view: string;\n        framework: string;\n        displayLoading: boolean;\n    };\n}>;\n\nexport interface CardinalSetupCompletedData {\n    sessionId: string;\n    modules: CardinalModuleState[];\n}\n\nexport interface CardinalModuleState {\n    loaded: boolean;\n    module: string;\n}\n\nexport enum CardinalInitializationType {\n    Init = 'init',\n    Complete = 'complete',\n    Confirm = 'confirm',\n}\n\nexport interface CardinalInitializationDataMap {\n    [CardinalInitializationType.Init]: CardinalInitTypeData;\n    [CardinalInitializationType.Complete]: CardinalCompleteTypeData;\n    [CardinalInitializationType.Confirm]: CardinalConfirmTypeData;\n}\n\nexport interface CardinalInitTypeData {\n    jwt: string;\n}\n\nexport interface CardinalCompleteTypeData {\n    Status: string;\n}\n\nexport interface CardinalConfirmTypeData {\n    jwt: string;\n    cardinalResponseJwt: string;\n}\n\nexport interface CardinalValidatedData {\n    ActionCode?: CardinalValidatedAction;\n    ErrorDescription: string;\n    ErrorNumber: number;\n    Validated: boolean;\n    Payment?: CardinalPayment;\n}\n\nexport interface CardinalPayment {\n    ExtendedData?: CardinalCCAExtendedData;\n    ProcessorTransactionId: string;\n    Type: CardinalPaymentType;\n}\n\nexport interface CardinalBinProcessResponse {\n    Status: boolean;\n}\n\nexport interface CardinalContinue {\n    AcsUrl: string;\n    Payload: string;\n}\n\nexport interface CardinalPartialOrder {\n    OrderDetails: CardinalOrderDetails;\n    Consumer?: CardinalConsumer;\n}\n\nexport interface CardinalConsumer {\n    Email1?: string;\n    Email2?: string;\n    ShippingAddress?: CardinalAddress;\n    BillingAddress?: CardinalAddress;\n    Account?: CardinalAccount;\n}\n\nexport interface CardinalAccount {\n    AccountNumber: number;\n    ExpirationMonth: number;\n    ExpirationYear: number;\n    NameOnAccount: string;\n    CardCode: number;\n}\n\nexport interface CardinalAddress {\n    FullName?: string;\n    FirstName: string;\n    MiddleName?: string;\n    LastName: string;\n    Address1: string;\n    Address2?: string;\n    Address3?: string;\n    City: string;\n    State: string;\n    PostalCode: string;\n    CountryCode: string;\n    Phone1?: string;\n    Phone2?: string;\n}\n\nexport interface CardinalOrderDetails {\n    OrderNumber: string;\n    Amount: number;\n    CurrencyCode: string;\n    OrderDescription?: string;\n    OrderChannel: string;\n    TransactionId?: string;\n}\n\nexport type CardinalCCAExtendedData = Partial<{\n    CAVV: string;\n    ECIFlag: string;\n    PAResStatus: string;\n    SignatureVerification: string;\n    XID: string;\n    UCAFIndicator: string;\n}>;\n\nexport enum CardinalEventType {\n    SetupCompleted = 'payments.setupComplete',\n    Validated = 'payments.validated',\n}\n\nexport enum CardinalValidatedAction {\n    Success = 'SUCCESS',\n    NoAction = 'NOACTION',\n    Failure = 'FAILURE',\n    Error = 'ERROR',\n}\n\nexport enum CardinalPaymentType {\n    CCA = 'CCA',\n    Paypal = 'Paypal',\n    Wallet = 'Wallet',\n    VisaCheckout = 'VisaCheckout',\n    ApplePay = 'ApplePay',\n    DiscoverWallet = 'DiscoverWallet',\n}\n\nexport enum CardinalTriggerEvents {\n    BinProcess = 'bin.process',\n}\n\nexport enum CardinalPaymentBrand {\n    CCA = 'cca',\n}\n\nexport enum CardinalSignatureVerification {\n    Yes = 'Y',\n    No = 'N',\n}\n","import { BraintreeError } from './braintree';\n\nexport default function isBraintreeError(error: BraintreeError | Error): error is BraintreeError {\n    return error.name === 'BraintreeError';\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodFailedError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\nimport VisaCheckoutScriptLoader from './visacheckout-script-loader';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (_, error) => onError(error));\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new PaymentMethodFailedError(error.message);\n        }\n\n        throw error;\n    }\n}\n","import { find, some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, RequestError } from '../../../common/error/errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport { CardinalClient, CardinalOrderData, CardinalSupportedPaymentInstrument } from './index';\n\nexport default class CardinalThreeDSecureFlow {\n    private _paymentMethod?: PaymentMethod;\n    private _clientToken?: string;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _cardinalClient: CardinalClient\n    ) {}\n\n    prepare(methodId: string): Promise<void> {\n        if (this._clientToken) {\n            return Promise.resolve();\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._cardinalClient.initialize(methodId, this._paymentMethod.config.testMode);\n            })\n            .then(() => {\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._clientToken = this._paymentMethod.clientToken;\n\n                return this._cardinalClient.configure(this._clientToken);\n            });\n    }\n\n    start(payment: Payment): Promise<InternalCheckoutSelectors> {\n        if (!payment.paymentData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        if (!isCreditCardLike(payment.paymentData) && !isVaultedInstrument(payment.paymentData)) {\n            throw new InvalidArgumentError();\n        }\n\n        const paymentData = payment.paymentData;\n\n        return this._cardinalClient.runBinProcess(this._getBinNumber(paymentData))\n            .then(() => {\n                if (!this._clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                payment = {\n                    ...payment,\n                    paymentData: {\n                        ...paymentData,\n                        threeDSecure: { token: this._clientToken },\n                    },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            })\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, {code: 'three_d_secure_required'})) {\n                    return Promise.reject(error);\n                }\n\n                return this._cardinalClient.getThreeDSecureData(\n                    error.body.three_ds_result,\n                    this._getOrderData(paymentData)\n                )\n                .then(threeDSecure =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({\n                        ...payment,\n                        paymentData: {\n                            ...paymentData,\n                            threeDSecure,\n                        },\n                    }))\n                );\n            });\n    }\n\n    private _getBinNumber(payment: CardinalSupportedPaymentInstrument): string {\n        if (isVaultedInstrument(payment)) {\n            const instruments = this._store.getState().instruments.getInstruments();\n\n            const { instrumentId } = payment;\n\n            const entry = find(instruments, { bigpayToken: instrumentId });\n\n            return entry && entry.iin || '';\n        }\n\n        return payment.ccNumber;\n    }\n\n    private _getOrderData(paymentData: CardinalSupportedPaymentInstrument): CardinalOrderData {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const checkout = state.checkout.getCheckout();\n        const order = state.order.getOrder();\n\n        if (!billingAddress || !billingAddress.email) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        const payment: CardinalOrderData = {\n            billingAddress,\n            shippingAddress,\n            currencyCode: checkout.cart.currency.code,\n            id: order.orderId.toString(),\n            amount: checkout.cart.cartAmount,\n        };\n\n        if (isCreditCardLike(paymentData)) {\n            payment.paymentData = paymentData;\n        }\n\n        return payment;\n    }\n}\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethodFailedError } from '../../errors';\nimport { CreditCardInstrument, ThreeDSecureToken, VaultedInstrument } from '../../payment';\nimport { ThreeDsResult } from '../../payment-response-body';\n\nimport { CardinalAccount, CardinalAddress, CardinalConsumer, CardinalEventType, CardinalInitializationType, CardinalPartialOrder, CardinalPaymentBrand, CardinalSignatureValidationErrors, CardinalSignatureVerification, CardinalSDK, CardinalTriggerEvents, CardinalValidatedAction, CardinalValidatedData } from './cardinal';\nimport CardinalScriptLoader from './cardinal-script-loader';\n\nexport type CardinalSupportedPaymentInstrument = CreditCardInstrument | VaultedInstrument;\n\nexport interface CardinalOrderData {\n    billingAddress: BillingAddress;\n    shippingAddress?: Address;\n    currencyCode: string;\n    id: string;\n    amount: number;\n    paymentData?: CreditCardInstrument;\n}\n\nexport default class CardinalClient {\n    private _sdk?: Promise<CardinalSDK>;\n\n    constructor(\n        private _scriptLoader: CardinalScriptLoader\n    ) {}\n\n    initialize(provider: string, testMode?: boolean): Promise<void> {\n        if (!this._sdk) {\n            this._sdk = this._scriptLoader.load(provider, testMode);\n        }\n\n        return this._sdk.then(() => {});\n    }\n\n    configure(clientToken: string): Promise<void> {\n        return this._getClientSDK()\n            .then(client => new Promise<void>((resolve, reject) => {\n                client.on(CardinalEventType.SetupCompleted, () => {\n                    client.off(CardinalEventType.SetupCompleted);\n                    client.off(CardinalEventType.Validated);\n\n                    resolve();\n                });\n\n                client.on(CardinalEventType.Validated, (data: CardinalValidatedData) => {\n                    client.off(CardinalEventType.SetupCompleted);\n                    client.off(CardinalEventType.Validated);\n\n                    switch (data.ActionCode) {\n                        case CardinalValidatedAction.Error:\n                            if (includes(CardinalSignatureValidationErrors, data.ErrorNumber)) {\n                                reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n                            }\n                            reject(new PaymentMethodFailedError(data.ErrorDescription));\n                            break;\n                    }\n                });\n\n                client.setup(CardinalInitializationType.Init, {\n                    jwt: clientToken,\n                });\n            }));\n    }\n\n    runBinProcess(binNumber: string): Promise<void> {\n        return this._getClientSDK()\n            .then(client => client.trigger(CardinalTriggerEvents.BinProcess, binNumber).catch(() => {}))\n            .then(result => {\n                if (!result || !result.Status) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n            });\n    }\n\n    getThreeDSecureData(threeDSecureData: ThreeDsResult, orderData: CardinalOrderData): Promise<ThreeDSecureToken> {\n        return this._getClientSDK()\n            .then(client => {\n                return new Promise<ThreeDSecureToken>((resolve, reject) => {\n                    client.on(CardinalEventType.Validated, (data: CardinalValidatedData, jwt?: string) => {\n                        client.off(CardinalEventType.Validated);\n                        if (!jwt) {\n                            return reject(new PaymentMethodFailedError(data.ErrorDescription ? data.ErrorDescription : 'An error was encountered while processing the transaction.'));\n                        }\n\n                        if (!data.ActionCode) {\n                            return resolve({ token: jwt });\n                        }\n\n                        switch (data.ActionCode) {\n                            case CardinalValidatedAction.Success:\n                                return resolve({ token: jwt });\n                            case CardinalValidatedAction.NoAction:\n                                if (data.ErrorNumber > 0) {\n                                    return reject(new PaymentMethodFailedError(data.ErrorDescription));\n                                } else if (!data.Payment || !data.Payment.ExtendedData || data.Payment.ExtendedData.SignatureVerification !== CardinalSignatureVerification.Yes) {\n                                    return reject(new PaymentMethodFailedError('Transaction signature could not be validated.'));\n                                }\n\n                                return resolve({ token: jwt });\n                            case CardinalValidatedAction.Failure:\n                                return reject(new PaymentMethodFailedError('User failed authentication or an error was encountered while processing the transaction.'));\n                            case CardinalValidatedAction.Error:\n                                return reject(new PaymentMethodFailedError(data.ErrorDescription));\n                        }\n                    });\n\n                    const continueObject = {\n                        AcsUrl: threeDSecureData.acs_url,\n                        Payload: threeDSecureData.merchant_data,\n                    };\n\n                    const partialOrder = this._mapToPartialOrder(orderData, threeDSecureData.payer_auth_request);\n\n                    client.continue(CardinalPaymentBrand.CCA, continueObject, partialOrder);\n                });\n            });\n    }\n\n    private _mapToPartialOrder(orderData: CardinalOrderData, transactionId: string): CardinalPartialOrder {\n        const consumer: CardinalConsumer = {\n            BillingAddress: this._mapToCardinalAddress(orderData.billingAddress),\n        };\n\n        if (orderData.paymentData) {\n            consumer.Account = this._mapToCardinalAccount(orderData.paymentData);\n        }\n\n        if (orderData.billingAddress.email) {\n            consumer.Email1 = orderData.billingAddress.email;\n        }\n\n        if (orderData.shippingAddress) {\n            consumer.ShippingAddress = this._mapToCardinalAddress(orderData.shippingAddress);\n        }\n\n        return  {\n            Consumer: consumer,\n            OrderDetails: {\n                OrderNumber: orderData.id,\n                Amount: orderData.amount,\n                CurrencyCode: orderData.currencyCode,\n                OrderChannel: 'S',\n                TransactionId: transactionId,\n            },\n        };\n    }\n\n    private _mapToCardinalAccount(paymentData: CreditCardInstrument): CardinalAccount {\n        return {\n            AccountNumber: Number(paymentData.ccNumber),\n            ExpirationMonth: Number(paymentData.ccExpiry.month),\n            ExpirationYear: Number(paymentData.ccExpiry.year),\n            NameOnAccount: paymentData.ccName,\n            CardCode: Number(paymentData.ccCvv),\n        };\n    }\n\n    private _mapToCardinalAddress(address: Address): CardinalAddress {\n        const cardinalAddress: CardinalAddress = {\n            FirstName: address.firstName,\n            LastName: address.lastName,\n            Address1: address.address1,\n            City: address.city,\n            State: address.stateOrProvince,\n            PostalCode: address.postalCode,\n            CountryCode: address.countryCode,\n        };\n\n        if (address.address2) {\n            cardinalAddress.Address2 = address.address2;\n        }\n\n        if (address.phone) {\n            cardinalAddress.Phone1 = address.phone;\n        }\n\n        return cardinalAddress;\n    }\n\n    private _getClientSDK(): Promise<CardinalSDK> {\n        if (!this._sdk) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._sdk;\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { CardinalSDK, CardinalWindow } from './cardinal';\n\nconst SDK_TEST_URL = 'https://songbirdstag.cardinalcommerce.com/edge/v1/songbird.js';\nconst SDK_PROD_URL = 'https://songbird.cardinalcommerce.com/edge/v1/songbird.js';\n\nexport default class CardinalScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: CardinalWindow = window\n    ) {}\n\n    load(provider: string, testMode?: boolean): Promise<CardinalSDK> {\n        const url = testMode ? SDK_TEST_URL : SDK_PROD_URL;\n\n        return this._scriptLoader\n            .loadScript(url + '?v=' + provider)\n            .then(() => {\n                if (!this._window.Cardinal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.Cardinal;\n            });\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy implements PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$\n                    .pipe(take(1))\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: {\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            },\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport type SquarePaymentFormConstructor = new(options: SquareFormOptions) => SquarePaymentForm;\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class ConvergePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: FormPoster\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(_options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(_options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(_options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport { CardinalThreeDSecureFlow } from '../cardinal';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CyberSourcePaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _threeDSecureFlow: CardinalThreeDSecureFlow\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!this._paymentMethod.config.is3dsEnabled) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._threeDSecureFlow.prepare(methodId)\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._paymentMethod.config.is3dsEnabled ?\n                    this._threeDSecureFlow.start(payment) :\n                    this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { GooglePaymentData, PaymentMethodData } from './googlepay';\nimport GooglePayPaymentInitializeOptions from './googlepay-initialize-options';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\n\nexport default class GooglePayPaymentStrategy implements PaymentStrategy {\n    private _googlePayOptions?: GooglePayPaymentInitializeOptions;\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => {\n                this._googlePayOptions = this._getGooglePayOptions(options);\n\n                if (!this._googlePayOptions) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n                }\n\n                const walletButton = this._googlePayOptions.walletButton && document.getElementById(this._googlePayOptions.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return Promise.resolve(this._getPayment())\n            .then(payment => {\n                if (!payment.paymentData.nonce || !payment.paymentData.cardInformation) {\n                    // TODO: Find a way to share the code with _handleWalletButtonClick method\n                    return this._googlePayPaymentProcessor.displayWallet()\n                        .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                        .then(() => onPaymentSelect())\n                        .then(() => this._getPayment())\n                        .catch(error => {\n                            if (error.statusCode !== 'CANCELED') {\n                                onError(error);\n                            }\n                        });\n                }\n\n                return payment;\n            })\n            .then(() =>\n                this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit: payload.useStoreCredit }, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(this._getPayment())))\n            );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _paymentInstrumentSelected(paymentData: GooglePaymentData) {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        // TODO: Revisit how we deal with GooglePaymentData after receiving it from Google\n        return this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n    }\n\n    private _getGooglePayOptions(options: PaymentInitializeOptions): GooglePayPaymentInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _getPayment(): PaymentMethodData {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const paymentData = {\n            method: this._methodId,\n            nonce: paymentMethod.initializationData.nonce,\n            cardInformation: paymentMethod.initializationData.card_information,\n        };\n\n        return {\n            methodId: this._methodId,\n            paymentData,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<InternalCheckoutSelectors> {\n        event.preventDefault();\n\n        if (!this._methodId || !this._googlePayOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._googlePayPaymentProcessor.displayWallet()\n                .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                .then(() => onPaymentSelect())\n                .catch(error => {\n                    if (error.statusCode !== 'CANCELED') {\n                        onError(error);\n                    }\n                });\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n}\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaAddress, KlarnaLoadResponse, KlarnaUpdateSessionParams } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy implements PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n    private _supportedEUCountries = ['AT', 'DE', 'DK', 'FI', 'GB', 'NL', 'NO', 'SE', 'CH'];\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    state => {\n                        if (state.paymentStrategies.isInitialized(options.methodId)) {\n                            this._loadWidget(options);\n                        }\n                    },\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.outstandingBalance;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>(resolve => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n                    resolve(response);\n                });\n            }));\n    }\n\n    private _getUpdateSessionData(billingAddress: BillingAddress, shippingAddress?: Address): KlarnaUpdateSessionParams {\n        if (!includes(this._supportedEUCountries, billingAddress.countryCode)) {\n            return {};\n        }\n\n        const data: KlarnaUpdateSessionParams = {\n            billing_address: this._mapToKlarnaAddress(billingAddress, billingAddress.email),\n        };\n\n        if (shippingAddress) {\n            data.shipping_address = this._mapToKlarnaAddress(shippingAddress, billingAddress.email);\n        }\n\n        return data;\n    }\n\n    private _mapToKlarnaAddress(address: Address, email?: string): KlarnaAddress {\n        const klarnaAddress: KlarnaAddress = {\n            street_address: address.address1,\n            city: address.city,\n            country: address.countryCode,\n            given_name: address.firstName,\n            family_name: address.lastName,\n            postal_code: address.postalCode,\n            region: address.stateOrProvince,\n            email,\n        };\n\n        if (address.address2) {\n            klarnaAddress.street_address2 = address.address2;\n        }\n\n        if (address.phone) {\n            klarnaAddress.phone = address.phone;\n        }\n\n        return klarnaAddress;\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n            const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n            if (!billingAddress) {\n                throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n            }\n\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const updateSessionData = this._getUpdateSessionData(billingAddress, shippingAddress);\n\n            this._klarnaCredit.authorize(updateSessionData, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as unknown as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class LegacyPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport getCallbackUrl from './get-callback-url';\nimport { Masterpass, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy implements PaymentStrategy {\n    private _masterpassClient?: Masterpass;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n\n                if (!options.masterpass) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.masterpass\" argument is not provided.');\n                }\n\n                const walletButton  = options.masterpass.walletButton && document.getElementById(options.masterpass.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._masterpassClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = payload;\n        const order = { useStoreCredit: payload.useStoreCredit };\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.gateway) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        // TODO: Refactor the API endpoint to return nonce in the right place.\n        const paymentData = this._paymentMethod.initializationData.paymentData;\n\n        // TODO: Redirect to Masterpass if nonce has not been generated yet. And then finalise the order when the shopper is redirected back to the checkout page.\n        if (!paymentData) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.paymentData\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData })));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('checkout'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._masterpassClient) {\n            return;\n        }\n\n        const payload = this._createMasterpassPayload();\n        this._masterpassClient.checkout(payload);\n    }\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OfflinePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OffsitePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment(payment.methodId, payment.gatewayId))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.gatewayId === 'barclaycard' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport { CardinalThreeDSecureFlow } from '../cardinal';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _threeDSecureFlow: CardinalThreeDSecureFlow\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!this._paymentMethod.config.is3dsEnabled) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._threeDSecureFlow.prepare(methodId)\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._paymentMethod.config.is3dsEnabled ?\n                    this._threeDSecureFlow.start(payment) :\n                    this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy implements PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n    private _useRedirectFlow: boolean = false;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader,\n        private _window: PaypalHostWindow = window\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n        this._useRedirectFlow = (options.paypalexpress && options.paypalexpress.useRedirectFlow) === true;\n\n        if (!this._isInContextEnabled()) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled() || this._useRedirectFlow) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        this._window.top.location.href = redirectUrl;\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class SagePayPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if the shopper is using a browser version that is not\n * supported by us or any third party provider we use.\n */\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.name = 'UnsupportedBrowserError';\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\nimport { noop } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, TimeoutError, UnsupportedBrowserError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { NonceInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport SquarePaymentForm, { CardData, Contact, DigitalWalletType, NonceGenerationError, SquareFormElement, SquareFormOptions, SquarePaymentRequest } from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\nimport SquareScriptLoader from './square-script-loader';\n\nexport default class SquarePaymentStrategy implements PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact\n    ): void {\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n        const onPaymentSelect = this._squareOptions && this._squareOptions.onPaymentSelect || noop;\n\n        if (errors) {\n            onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(\n                this._paymentMethod.id,\n                nonce,\n                cardData,\n                billingContact,\n                shippingContact\n            )\n                .then(onPaymentSelect)\n                .catch(onError);\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (nonce && !errors) {\n            this._deferredRequestNonce.resolve({ nonce });\n\n            return;\n        }\n\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n\n        onError(errors);\n\n        this._deferredRequestNonce.reject(errors);\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            },\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as unknown as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { some } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError } from '../../../common/error/errors';\nimport { Customer } from '../../../customer';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodFailedError } from '../../errors';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport { HostedInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { StripeAddress, StripeBillingDetails, StripeCardElement, StripeHandleCardPaymentOptions, StripePaymentMethodData, StripeShippingDetails, StripeV3Client } from './stripev3';\nimport StripeV3ScriptLoader from './stripev3-script-loader';\n\nexport default class StripeV3PaymentStrategy implements PaymentStrategy {\n    private _stripeV3Client?: StripeV3Client;\n    private _cardElement?: StripeCardElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _stripeScriptLoader: StripeV3ScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const stripeOptions = options.stripev3;\n\n        if (!stripeOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.stripev3\" argument is not provided.');\n        }\n\n        const paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._stripeScriptLoader.load(paymentMethod.initializationData.stripePublishableKey)\n            .then(stripeJs => {\n                this._stripeV3Client = stripeJs;\n                const elements = this._stripeV3Client.elements();\n                const cardElement = elements.create('card', {\n                    style: stripeOptions.style,\n                });\n\n                cardElement.mount(`#${stripeOptions.containerId}`);\n\n                this._cardElement = cardElement;\n\n                return Promise.resolve(this._store.getState());\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const shouldSaveInstrument = Boolean(paymentData && (paymentData as HostedInstrument).shouldSaveInstrument);\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (paymentData && isVaultedInstrument(paymentData)) {\n                    return this._store.dispatch(this._paymentActionCreator.submitPayment({...payment, paymentData}))\n                        .catch(error => {\n                            if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                                return Promise.reject(error);\n                            }\n\n                            return this._getStripeJs().handleCardPayment(error.body.three_ds_result.token)\n                                .then(stripeResponse => {\n                                    if (stripeResponse.error || !stripeResponse.paymentIntent.id) {\n                                        throw new PaymentMethodFailedError(stripeResponse.error && stripeResponse.error.message);\n                                    }\n\n                                    const paymentPayload = {\n                                        methodId: payment.methodId,\n                                        paymentData: {\n                                            nonce: stripeResponse.paymentIntent.id,\n                                        },\n                                    };\n\n                                    return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n                                });\n                        });\n                }\n\n                return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId))\n                    .then(state => {\n                        const paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n                        const paymentIntent = paymentMethod && paymentMethod.clientToken;\n\n                        if (!this._cardElement) {\n                            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                        }\n\n                        return this._getStripeJs().createPaymentMethod('card', this._cardElement, this._mapStripePaymentMethodOptions())\n                            .then(stripePaymentMethod => {\n                                if (stripePaymentMethod.error || !stripePaymentMethod.paymentMethod.id) {\n                                    throw new PaymentMethodFailedError(stripePaymentMethod.error && stripePaymentMethod.error.message);\n                                }\n\n                                if (!paymentIntent) {\n                                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                                }\n\n                                const stripeCardPaymentOptions = {\n                                    ...this._mapStripeCardPaymentOptions(shouldSaveInstrument),\n                                    payment_method: stripePaymentMethod.paymentMethod.id,\n                                };\n\n                                return this._getStripeJs().handleCardPayment(paymentIntent, stripeCardPaymentOptions);\n                            })\n                            .then(stripeResponse => {\n                                if (stripeResponse.error || !stripeResponse.paymentIntent.id) {\n                                    throw new PaymentMethodFailedError(stripeResponse.error && stripeResponse.error.message);\n                                }\n\n                                const paymentPayload = {\n                                    methodId: payment.methodId,\n                                    paymentData: {\n                                        nonce: stripeResponse.paymentIntent.id,\n                                        shouldSaveInstrument,\n                                    },\n                                };\n\n                                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n                            });\n                    });\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._cardElement) {\n            this._cardElement.unmount();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _getStripeJs(): StripeV3Client {\n        if (!this._stripeV3Client) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._stripeV3Client;\n    }\n\n    private _mapStripeBillingAddress(billingAddress: BillingAddress | undefined): StripeAddress | undefined {\n        if (!billingAddress) {\n            return undefined;\n        }\n\n        return {\n            city: billingAddress.city,\n            country: billingAddress.countryCode,\n            line1: billingAddress.address1,\n            line2: billingAddress.address2,\n            postal_code: billingAddress.postalCode,\n            state: billingAddress.stateOrProvinceCode,\n        };\n    }\n\n    private _mapStripeShippingAddress(shippingAddress: Address | undefined): StripeAddress {\n        if (!shippingAddress) {\n            return { };\n        }\n\n        return {\n            city: shippingAddress.city,\n            country: shippingAddress.countryCode,\n            line1: shippingAddress.address1,\n            line2: shippingAddress.address2,\n            postal_code: shippingAddress.postalCode,\n            state: shippingAddress.stateOrProvinceCode,\n        };\n    }\n\n    private _mapStripeBillingDetails({ billingAddress, customer }: { billingAddress?: BillingAddress; customer?: Customer } = {}): StripeBillingDetails {\n        const stripeBillingDetails = {\n            address: this._mapStripeBillingAddress(billingAddress),\n        };\n\n        if (customer) {\n            return {\n                ...stripeBillingDetails,\n                email: customer.email,\n                name: `${customer.firstName} ${customer.lastName}`,\n            };\n        }\n\n        if (billingAddress) {\n            return {\n                ...stripeBillingDetails,\n                email: billingAddress.email,\n                name: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            };\n        }\n\n        return {\n            name: 'Guest',\n        };\n    }\n\n    private _mapStripeShippingDetails({ shippingAddress, customer }: { shippingAddress?: Address ; customer?: Customer } = {}): StripeShippingDetails {\n        const stripeShippingDetails = {\n            address: this._mapStripeShippingAddress(shippingAddress),\n        };\n\n        if (customer) {\n            return {\n                ...stripeShippingDetails,\n                name: `${customer.firstName} ${customer.lastName}`,\n            };\n        }\n\n        if (shippingAddress) {\n            return {\n                ...stripeShippingDetails,\n                name: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            };\n        }\n\n        return {\n            ...stripeShippingDetails,\n            name: 'Guest',\n        };\n    }\n\n    private _getCustomer(): Customer | undefined {\n        const customer = this._store.getState().customer.getCustomer();\n\n        if (customer) {\n            if (customer.firstName === '' || customer.lastName === '' || customer.email === '') {\n                return undefined;\n            }\n        }\n\n        return customer;\n    }\n\n    private _mapStripeCardPaymentOptions(shouldSaveInstrument: boolean): StripeHandleCardPaymentOptions {\n        const customer = this._getCustomer();\n        const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n        const shippingDetails = {\n            shipping: this._mapStripeShippingDetails({ shippingAddress, customer }),\n        };\n\n        if (customer) {\n            return {\n                ...shippingDetails,\n                receipt_email: customer.email,\n                save_payment_method: shouldSaveInstrument,\n            };\n        } else {\n            return {\n                ...shippingDetails,\n            };\n        }\n    }\n\n    private _mapStripePaymentMethodOptions(): StripePaymentMethodData {\n        const customer = this._getCustomer();\n        const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        return {\n            billing_details: this._mapStripeBillingDetails({ billingAddress, customer }),\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { StripeHostWindow, StripeV3Client } from './stripev3';\n\nexport default class StripeV3ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: StripeHostWindow = window\n    ) {}\n\n    load(publishableKey: string): Promise<StripeV3Client> {\n        return this._scriptLoader\n            .loadScript('https://js.stripe.com/v3/')\n            .then(() => {\n                if (!this._window.Stripe) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.Stripe(publishableKey, {\n                    betas: ['payment_intent_beta_3'],\n                });\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as unknown as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport { CreditCardPaymentStrategy } from '../credit-card';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if a payment method explicitly returns a declined error and\n * the shopper has to choose a different payment method if they wish to continue\n * their checkout process.\n */\nexport default class PaymentMethodDeclinedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'The selected payment method was declined. Please select another payment method.');\n\n        this.name = 'PaymentMethodDeclinedError';\n        this.type = 'payment_declined';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { ContentType, INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { StoreCreditActionCreator } from '../../../store-credit';\nimport { PaymentMethodCancelledError, PaymentMethodDeclinedError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Zip, ZipModalEvent } from './zip';\nimport ZipScriptLoader from './zip-script-loader';\n\nexport default class ZipPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _zipClient?: Zip;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _zipScriptLoader: ZipScriptLoader,\n        private _requestSender: RequestSender\n    ) { }\n\n    async initialize(): Promise<InternalCheckoutSelectors> {\n        const zip = await this._zipScriptLoader.load();\n        this._zipClient = zip;\n\n        return this._store.getState();\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n        this._zipClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const { _zipClient: zipClient } = this;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!zipClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n\n        const { useStoreCredit } = payload;\n\n        if (useStoreCredit !== undefined) {\n            await this._store.dispatch(this._storeCreditActionCreator.applyStoreCredit(useStoreCredit));\n        }\n\n        const state = await this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId, options));\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const nonce = await new Promise<string | undefined>((resolve, reject) => {\n            zipClient.Checkout.init({\n                onComplete: async ({ checkoutId, state }) => {\n                    if (state === ZipModalEvent.CancelCheckout) {\n                        return reject(new PaymentMethodCancelledError());\n                    }\n\n                    if (state === ZipModalEvent.CheckoutReferred && checkoutId) {\n                        await this._prepareForReferredRegistration(payment.methodId, checkoutId);\n\n                        return resolve();\n                    }\n\n                    if (state === ZipModalEvent.CheckoutApproved && checkoutId) {\n                        return resolve(checkoutId);\n                    }\n\n                    if (state === ZipModalEvent.CheckoutDeclined) {\n                        return reject(new PaymentMethodDeclinedError('Unfortunately your application was declined. Please select another payment method.'));\n                    }\n\n                    reject(new PaymentMethodInvalidError());\n                },\n                onCheckout: openModal => {\n                    if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    openModal(JSON.parse(this._paymentMethod.clientToken));\n                },\n            });\n        });\n\n        if (nonce !== undefined) {\n            return this._store.dispatch(this._paymentActionCreator.submitPayment({\n                methodId: payment.methodId,\n                paymentData: { nonce },\n            }));\n        }\n\n        return this._store.getState();\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _prepareForReferredRegistration(provider: string, externalId: string): Promise<Response> {\n        const url = `/api/storefront/payment/${provider}/save-external-id`;\n        const options = {\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n            body: {\n                externalId,\n                provider,\n            },\n        };\n\n        return this._requestSender.post(url, options);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { Zip, ZipHostWindow } from '../zip';\n\nexport default class ZipScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ZipHostWindow = window\n    ) {}\n\n    load(): Promise<Zip> {\n        return this._scriptLoader\n            .loadScript(`//static.zipmoney.com.au/checkout/checkout-v1.min.js`)\n            .then(() => {\n                if (!this._window.Zip) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.Zip;\n            });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader, getStylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport LoadingIndicator from '../embedded-checkout/loading-indicator';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { GoogleRecaptcha, SpamProtectionActionCreator } from '../order/spam-protection';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\nimport { StoreCreditActionCreator, StoreCreditRequestSender } from '../store-credit';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { AdyenV2PaymentStrategy, AdyenV2ScriptLoader } from './strategies/adyenv2';\nimport { AffirmPaymentStrategy, AffirmScriptLoader } from './strategies/affirm';\nimport { AfterpayPaymentStrategy, AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayPaymentStrategy, AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport { BarclaycardPaymentStrategy } from './strategies/barclaycard';\nimport {\n    createBraintreePaymentProcessor,\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    BraintreeVisaCheckoutPaymentStrategy,\n    VisaCheckoutScriptLoader\n} from './strategies/braintree';\nimport {\n    CardinalClient,\n    CardinalScriptLoader,\n    CardinalThreeDSecureFlow,\n} from './strategies/cardinal';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { ConvergePaymentStrategy } from './strategies/converge';\nimport { CreditCardPaymentStrategy } from './strategies/credit-card';\nimport { CyberSourcePaymentStrategy } from './strategies/cybersource/index';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayPaymentStrategy, GooglePayStripeInitializer } from './strategies/googlepay';\nimport { KlarnaPaymentStrategy, KlarnaScriptLoader } from './strategies/klarna';\nimport { LegacyPaymentStrategy } from './strategies/legacy';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { NoPaymentDataRequiredPaymentStrategy } from './strategies/no-payment';\nimport { OfflinePaymentStrategy } from './strategies/offline';\nimport { OffsitePaymentStrategy } from './strategies/offsite';\nimport { PaypalExpressPaymentStrategy, PaypalProPaymentStrategy, PaypalScriptLoader } from './strategies/paypal';\nimport { SagePayPaymentStrategy } from './strategies/sage-pay';\nimport { SquarePaymentStrategy, SquareScriptLoader } from './strategies/square';\nimport { StripeScriptLoader, StripeV3PaymentStrategy } from './strategies/stripev3';\nimport { WepayPaymentStrategy, WepayRiskClient } from './strategies/wepay';\nimport { ZipPaymentStrategy, ZipScriptLoader } from './strategies/zip';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender,\n    spamProtection: GoogleRecaptcha,\n    locale: string\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: PaymentStrategyType.CREDIT_CARD });\n    const scriptLoader = getScriptLoader();\n    const paymentRequestTransformer = new PaymentRequestTransformer();\n    const paymentRequestSender = new PaymentRequestSender(paymentClient);\n    const billingAddressActionCreator = new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender));\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(spamProtection);\n    const orderActionCreator = new OrderActionCreator(new OrderRequestSender(requestSender), checkoutValidator, spamProtectionActionCreator);\n    const storeCreditActionCreator = new StoreCreditActionCreator(new StoreCreditRequestSender(requestSender));\n    const paymentActionCreator = new PaymentActionCreator(paymentRequestSender, orderActionCreator, paymentRequestTransformer);\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender));\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n    const formPoster = createFormPoster();\n\n    registry.register(PaymentStrategyType.ADYENV2, () =>\n        new AdyenV2PaymentStrategy(\n            store,\n            paymentActionCreator,\n            orderActionCreator,\n            new AdyenV2ScriptLoader(scriptLoader, getStylesheetLoader()),\n            formPoster,\n            locale\n        )\n    );\n\n    registry.register(PaymentStrategyType.AFFIRM, () =>\n        new AffirmPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new AffirmScriptLoader()\n        )\n    );\n\n    registry.register(PaymentStrategyType.AFTERPAY, () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            storeCreditActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.AMAZON, () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            billingAddressActionCreator,\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CREDIT_CARD, () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.CYBERSOURCE, () =>\n        new CyberSourcePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new CardinalThreeDSecureFlow(\n                store,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                new CardinalClient(new CardinalScriptLoader(scriptLoader))\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.KLARNA, () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.LEGACY, () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFLINE, () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFSITE, () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL, () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new CardinalThreeDSecureFlow(\n                store,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                new CardinalClient(new CardinalScriptLoader(scriptLoader))\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS_CREDIT, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.SAGE_PAY, () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n        )\n    );\n\n    registry.register(PaymentStrategyType.SQUARE, () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED, () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE, () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_VISA_CHECKOUT, () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CHASE_PAY, () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(scriptLoader),\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.WE_PAY, () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.MASTERPASS, () =>\n        new MasterpassPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.STRIPE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.ZIP, () =>\n        new ZipPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            storeCreditActionCreator,\n            new ZipScriptLoader(scriptLoader),\n            requestSender\n        )\n    );\n\n    registry.register(PaymentStrategyType.CONVERGE, () =>\n        new ConvergePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n        )\n    );\n\n    registry.register(PaymentStrategyType.STRIPEV3, () =>\n        new StripeV3PaymentStrategy(\n            store,\n            paymentMethodActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            new StripeScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.BARCLAYCARD, () =>\n        new BarclaycardPaymentStrategy(\n            store,\n            orderActionCreator,\n            new LoadingIndicator(),\n            paymentActionCreator\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { Overlay } from '../../../common/overlay';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n    const overlay = new Overlay();\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator, overlay);\n}\n","import { createAction, createDataStore, Action, DataStore, ReadableDataStore } from '@bigcommerce/data-store';\n\nenum ProjectionActionType {\n    Synchronize = 'SYNCHRONIZE',\n}\n\ninterface SynchronizeAction<TState> extends Action<TState> {\n    type: ProjectionActionType.Synchronize;\n    payload: TState;\n}\n\nexport interface DataStoreProjection<TTransformedState> extends ReadableDataStore<TTransformedState> {\n    notifyState(): void;\n}\n\nexport default function createDataStoreProjection<TState, TTransformedState = TState>(\n    store: DataStore<any, Action, TState>,\n    stateTransformer: (state: TState) => TTransformedState\n): DataStoreProjection<TTransformedState> {\n    const projection = createDataStore<TState | undefined, SynchronizeAction<TState>, TTransformedState>(\n        (state, action) => action.type === ProjectionActionType.Synchronize ?\n            action.payload :\n            state,\n        store.getState(),\n        { stateTransformer }\n    );\n\n    store.subscribe(state => {\n        projection.dispatch(createAction(ProjectionActionType.Synchronize, state) as SynchronizeAction<TState>);\n    }, { initial: false });\n\n    return projection;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport { DeleteInstrumentAction, InstrumentActionType, LoadInstrumentsAction } from './instrument-actions';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<LoadInstrumentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadInstrumentsAction>) => {\n            observer.next(createAction(InstrumentActionType.LoadInstrumentsRequested));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(\n                                InstrumentActionType.LoadInstrumentsSucceeded,\n                                body,\n                                currentToken\n                            ));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.LoadInstrumentsFailed, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<DeleteInstrumentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteInstrumentAction>) => {\n            observer.next(createAction(InstrumentActionType.DeleteInstrumentRequested, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({\n                        ...session,\n                        authToken: currentToken.vaultAccessToken,\n                    }, instrumentId)\n                        .then(({ body }) => {\n                            observer.next(createAction(InstrumentActionType.DeleteInstrumentSucceeded, body, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.DeleteInstrumentFailed, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token) ?\n            Promise.resolve(token) :\n            this._instrumentRequestSender.getVaultAccessToken().then(({ body }) => body);\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n        const { code } = config.shopperCurrency.isTransactional ? config.shopperCurrency : config.currency;\n\n        return {\n            customerId,\n            storeId,\n            currencyCode: code,\n        };\n    }\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentResponse from '../payment-response';\n\nimport Instrument, { VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody, InstrumentErrorResponseBody, InternalInstrument, InternalInstrumentsResponseBody, InternalInstrumentErrorResponseBody, InternalVaultAccessTokenResponseBody } from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(\n        response: PaymentResponse<InternalInstrumentsResponseBody>\n    ): Response<InstrumentsResponseBody> {\n        const { body, ...payload } = this._transformResponse(response);\n\n        return {\n            ...payload,\n            body: {\n                vaultedInstruments: this._transformVaultedInstruments(body.vaulted_instruments),\n            },\n        };\n    }\n\n    transformErrorResponse(\n        response: PaymentResponse<InternalInstrumentErrorResponseBody>\n    ): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    transformVaultAccessResponse(\n        response: Response<InternalVaultAccessTokenResponseBody>\n    ): Response<VaultAccessToken> {\n        return {\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        };\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: InternalInstrument[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            defaultInstrument: instrument.default_instrument,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse<T>(response: PaymentResponse<T>): Response<T> {\n        const { data: body, ...payload } = response;\n\n        return {\n            ...payload,\n            body,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\nimport PaymentResponse from '../payment-response';\n\nimport { InstrumentRequestContext, VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody, InternalInstrumentsResponseBody, InternalInstrumentErrorResponseBody } from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken(\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<VaultAccessToken>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout }).then(response => ({\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        }));\n    }\n\n    loadInstruments(\n        requestContext: InstrumentRequestContext,\n        shippingAddress?: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(\n        requestContext: InstrumentRequestContext,\n        instrumentId: string\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) =>  errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstruments(\n        requestContext: InstrumentRequestContext\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(\n                requestContext, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstrumentsWithAddress(\n        requestContext: InstrumentRequestContext,\n        shippingAddress: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ShippingCountryActionType.LoadShippingCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport { ShippingStrategyActionType, ShippingStrategyDeinitializeAction, ShippingStrategyInitializeAction, ShippingStrategySelectOptionAction, ShippingStrategyUpdateAddressAction } from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: Partial<AddressRequestBody>, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            if (methodId && state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            if (methodId && !state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../../shipping-request-options';\nimport { ShippingStrategyActionType } from '../../shipping-strategy-actions';\nimport ShippingStrategy from '../shipping-strategy';\n\nimport AmazonPayShippingInitializeOptions from './amazon-pay-shipping-initialize-options';\n\nexport default class AmazonPayShippingStrategy implements ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    updateAddress(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","import { AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingRequestOptions } from '../../shipping-request-options';\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class DefaultShippingStrategy implements ShippingStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { memoize } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\n\nconst cloneDeep = memoize(<T>(input: T): T => {\n    if (Array.isArray(input)) {\n        return input.map((value: T[keyof T]) => (\n            cloneDeepSafe(value)\n        )) as any;\n    }\n\n    if (isPlainObject(input)) {\n        return (Object.keys(input) as Array<keyof T>)\n            .reduce((result, key) => ({\n                ...result,\n                [key]: cloneDeepSafe(input[key]),\n            }), {}) as T;\n    }\n\n    return input;\n});\n\n// Use WeakMap as the MapCache, this allows for better garbage collection\n// There's a deprecated `clear` method in the lodash implementation\n// of MapCache, hence the `any`\ncloneDeep.cache = new WeakMap() as any;\n\n/**\n * This is a wrapper function for `cloneDeep`. We need it because `cloneDeep` is\n * a memoized function using an instance of `WeakMap` as its cache. Without this\n * wrapper, the memoized function will throw an error if it is called with a\n * non-object argument.\n */\nconst cloneDeepSafe = <T>(input: T): T => {\n    return typeof input === 'object' && input !== null ?\n        cloneDeep(input) :\n        input;\n};\n\n/**\n * Clone the return value of a function. If the result is the same as previous\n * calls, return the previous clone instead of cloning it again.\n */\nexport default function cloneResult<T extends Func>(fn: T): T {\n    return ((...args: any[]) => cloneDeepSafe(fn(...args))) as T;\n}\n\nexport type Func = (...args: any[]) => any;\n","import { createSelectorCreator, defaultMemoize } from 'reselect';\nimport * as shallowEqual from 'shallowequal';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\nconst createShallowEqualSelector = createSelectorCreator(\n    defaultMemoize,\n    (a: any, b: any) => shallowEqual(a, b)\n);\n\nexport default withMemoizedCombiner(createShallowEqualSelector);\n","import { createCheckoutStoreErrorSelectorFactory, createCheckoutStoreSelectorFactory, createCheckoutStoreStatusSelectorFactory, CheckoutSelectors, InternalCheckoutSelectors } from '../checkout';\n\nexport type CheckoutSelectorsFactory = (selectors: InternalCheckoutSelectors) => CheckoutSelectors;\n\nexport function createCheckoutSelectorsFactory(): CheckoutSelectorsFactory {\n    const createCheckoutStoreSelector = createCheckoutStoreSelectorFactory();\n    const createCheckoutStoreErrorSelector = createCheckoutStoreErrorSelectorFactory();\n    const createCheckoutStoreStatusSelector = createCheckoutStoreStatusSelectorFactory();\n\n    return (selectors: InternalCheckoutSelectors) => {\n        const data = createCheckoutStoreSelector(selectors);\n        const errors = createCheckoutStoreErrorSelector(selectors);\n        const statuses = createCheckoutStoreStatusSelector(selectors);\n\n        return {\n            data,\n            errors,\n            statuses,\n        };\n    };\n}\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    return createCheckoutSelectorsFactory()(selectors);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { Address } from '../address';\nimport { BillingAddress } from '../billing';\nimport { Cart } from '../cart';\nimport { createSelector } from '../common/selector';\nimport { cloneResult as clone } from '../common/utility';\nimport { StoreConfig } from '../config';\nimport { Coupon, GiftCertificate } from '../coupon';\nimport { Customer } from '../customer';\nimport { FormField } from '../form';\nimport { Country } from '../geography';\nimport { Order } from '../order';\nimport { PaymentMethod } from '../payment';\nimport { Instrument } from '../payment/instrument';\nimport { Consignment, ShippingOption } from '../shipping';\n\nimport Checkout from './checkout';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\nexport default interface CheckoutStoreSelector {\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined;\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined;\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined;\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined;\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined;\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined;\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined;\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined;\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): BillingAddress | undefined;\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined;\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined;\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined;\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined;\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined;\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined;\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined;\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean;\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined;\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[];\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[];\n}\n\nexport type CheckoutStoreSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreSelector;\n\nexport function createCheckoutStoreSelectorFactory(): CheckoutStoreSelectorFactory {\n    const getCheckout = createSelector(\n        ({ checkout }: InternalCheckoutSelectors) => checkout.getCheckout,\n        getCheckout => clone(getCheckout)\n    );\n\n    const getOrder = createSelector(\n        ({ order }: InternalCheckoutSelectors) => order.getOrder,\n        getOrder => clone(getOrder)\n    );\n\n    const getConfig = createSelector(\n        ({ config }: InternalCheckoutSelectors) => config.getStoreConfig,\n        getStoreConfig => clone(getStoreConfig)\n    );\n\n    const getShippingAddress = createSelector(\n        ({ shippingAddress }: InternalCheckoutSelectors) => shippingAddress.getShippingAddress,\n        ({ config }: InternalCheckoutSelectors) => config.getContextConfig,\n        (getShippingAddress, getContextConfig) => clone(() => {\n            const shippingAddress = getShippingAddress();\n            const context = getContextConfig();\n\n            if (!shippingAddress) {\n                if (!context || !context.geoCountryCode) {\n                    return;\n                }\n\n                return {\n                    firstName: '',\n                    lastName: '',\n                    company: '',\n                    address1: '',\n                    address2: '',\n                    city: '',\n                    stateOrProvince: '',\n                    stateOrProvinceCode: '',\n                    postalCode: '',\n                    country: '',\n                    phone: '',\n                    customFields: [],\n                    countryCode: context.geoCountryCode,\n                };\n            }\n\n            return shippingAddress;\n        })\n    );\n\n    const getShippingOptions = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(() => {\n            const consignments = getConsignments();\n\n            if (consignments && consignments.length) {\n                return consignments[0].availableShippingOptions;\n            }\n        })\n    );\n\n    const getConsignments = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(getConsignments)\n    );\n\n    const getSelectedShippingOption = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(() => {\n            const consignments = getConsignments();\n\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return consignments[0].selectedShippingOption;\n        })\n    );\n\n    const getShippingCountries = createSelector(\n        ({ shippingCountries }: InternalCheckoutSelectors) => shippingCountries.getShippingCountries,\n        getShippingCountries => clone(getShippingCountries)\n    );\n\n    const getBillingAddress = createSelector(\n        ({ billingAddress }: InternalCheckoutSelectors) => billingAddress.getBillingAddress,\n        getBillingAddress => clone(getBillingAddress)\n    );\n\n    const getBillingCountries = createSelector(\n        ({ countries }: InternalCheckoutSelectors) => countries.getCountries,\n        getCountries => clone(getCountries)\n    );\n\n    const getPaymentMethods = createSelector(\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethods,\n        getPaymentMethods => clone(getPaymentMethods)\n    );\n\n    const getPaymentMethod = createSelector(\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        getPaymentMethod => clone(getPaymentMethod)\n    );\n\n    const getSelectedPaymentMethod = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.getPaymentId,\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        (getPaymentId, getPaymentMethod) => clone(() => {\n            const payment = getPaymentId();\n\n            return payment && getPaymentMethod(payment.providerId, payment.gatewayId);\n        })\n    );\n\n    const getCart = createSelector(\n        ({ cart }: InternalCheckoutSelectors) => cart.getCart,\n        getCart => clone(getCart)\n    );\n\n    const getCoupons = createSelector(\n        ({ coupons }: InternalCheckoutSelectors) => coupons.getCoupons,\n        getCoupons => clone(getCoupons)\n    );\n\n    const getGiftCertificates = createSelector(\n        ({ giftCertificates }: InternalCheckoutSelectors) => giftCertificates.getGiftCertificates,\n        getGiftCertificates => clone(getGiftCertificates)\n    );\n\n    const getCustomer = createSelector(\n        ({ customer }: InternalCheckoutSelectors) => customer.getCustomer,\n        getCustomer => clone(getCustomer)\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.isPaymentDataRequired,\n        isPaymentDataRequired => clone(isPaymentDataRequired)\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.isPaymentDataSubmitted,\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        (isPaymentDataSubmitted, getPaymentMethod) => clone((methodId: string, gatewayId?: string) => {\n            return isPaymentDataSubmitted(getPaymentMethod(methodId, gatewayId));\n        })\n    );\n\n    const getInstruments = createSelector(\n        ({ instruments }: InternalCheckoutSelectors) => instruments.getInstruments,\n        getInstruments => clone(getInstruments)\n    );\n\n    const getBillingAddressFields = createSelector(\n        ({ form }: InternalCheckoutSelectors) => form.getBillingAddressFields,\n        ({ countries }: InternalCheckoutSelectors) => countries.getCountries,\n        (getBillingAddressFields, getCountries) => clone((countryCode: string) => {\n            return getBillingAddressFields(getCountries(), countryCode);\n        })\n    );\n\n    const getShippingAddressFields = createSelector(\n        ({ form }: InternalCheckoutSelectors) => form.getShippingAddressFields,\n        ({ shippingCountries }: InternalCheckoutSelectors) => shippingCountries.getShippingCountries,\n        (getShippingAddressFields, getShippingCountries) => clone((countryCode: string) => {\n            return getShippingAddressFields(getShippingCountries(), countryCode);\n        })\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreSelector => {\n        return {\n            getCheckout: getCheckout(state),\n            getOrder: getOrder(state),\n            getConfig: getConfig(state),\n            getShippingAddress: getShippingAddress(state),\n            getShippingOptions: getShippingOptions(state),\n            getConsignments: getConsignments(state),\n            getSelectedShippingOption: getSelectedShippingOption(state),\n            getShippingCountries: getShippingCountries(state),\n            getBillingAddress: getBillingAddress(state),\n            getBillingCountries: getBillingCountries(state),\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getSelectedPaymentMethod: getSelectedPaymentMethod(state),\n            getCart: getCart(state),\n            getCoupons: getCoupons(state),\n            getGiftCertificates: getGiftCertificates(state),\n            getCustomer: getCustomer(state),\n            isPaymentDataRequired: isPaymentDataRequired(state),\n            isPaymentDataSubmitted: isPaymentDataSubmitted(state),\n            getInstruments: getInstruments(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n            getShippingAddressFields: getShippingAddressFields(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector, createShallowEqualSelector } from '../common/selector';\nimport { Omit } from '../common/types';\n\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\nexport default interface CheckoutStoreErrorSelector {\n    getError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to apply store credit.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyStoreCreditError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined;\n}\n\nexport type CheckoutStoreErrorSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreErrorSelector;\n\nexport function createCheckoutStoreErrorSelectorFactory(): CheckoutStoreErrorSelectorFactory {\n    const getError = createShallowEqualSelector(\n        (selector: Omit<CheckoutStoreErrorSelector, 'getError'>) => selector,\n        selector => () => {\n            for (const key of Object.keys(selector) as Array<keyof Omit<CheckoutStoreErrorSelector, 'getError'>>) {\n                const error = selector[key]();\n\n                if (error) {\n                    return error;\n                }\n            }\n        }\n    );\n\n    const getSelectShippingOptionError = createSelector(\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.getSelectOptionError,\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getUpdateShippingOptionError,\n        (getSelectOptionError, getUpdateShippingOptionError) => (consignmentId?: string) => {\n            return (\n                getSelectOptionError() ||\n                getUpdateShippingOptionError(consignmentId)\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreErrorSelector => {\n        const selector = {\n            getLoadCheckoutError: state.checkout.getLoadError,\n            getUpdateCheckoutError: state.checkout.getUpdateError,\n            getSubmitOrderError: state.paymentStrategies.getExecuteError,\n            getFinalizeOrderError: state.paymentStrategies.getFinalizeError,\n            getLoadOrderError: state.order.getLoadError,\n            getLoadCartError: state.cart.getLoadError,\n            getLoadBillingCountriesError: state.countries.getLoadError,\n            getLoadShippingCountriesError: state.shippingCountries.getLoadError,\n            getLoadPaymentMethodsError: state.paymentMethods.getLoadError,\n            getLoadPaymentMethodError: state.paymentMethods.getLoadMethodError,\n            getInitializePaymentError: state.paymentStrategies.getInitializeError,\n            getSignInError: state.customerStrategies.getSignInError,\n            getSignOutError: state.customerStrategies.getSignOutError,\n            getInitializeCustomerError: state.customerStrategies.getInitializeError,\n            getLoadShippingOptionsError: state.consignments.getLoadShippingOptionsError,\n            getSelectShippingOptionError: getSelectShippingOptionError(state),\n            getContinueAsGuestError: state.billingAddress.getContinueAsGuestError,\n            getUpdateBillingAddressError: state.billingAddress.getUpdateError,\n            getUpdateShippingAddressError: state.shippingStrategies.getUpdateAddressError,\n            getDeleteConsignmentError: state.consignments.getDeleteError,\n            getUpdateConsignmentError: state.consignments.getUpdateError,\n            getCreateConsignmentsError: state.consignments.getCreateError,\n            getInitializeShippingError: state.shippingStrategies.getInitializeError,\n            getApplyStoreCreditError: state.storeCredit.getApplyError,\n            getApplyCouponError: state.coupons.getApplyError,\n            getRemoveCouponError: state.coupons.getRemoveError,\n            getApplyGiftCertificateError: state.giftCertificates.getApplyError,\n            getRemoveGiftCertificateError: state.giftCertificates.getRemoveError,\n            getLoadInstrumentsError: state.instruments.getLoadError,\n            getDeleteInstrumentError: state.instruments.getDeleteError,\n            getLoadConfigError: state.config.getLoadError,\n        };\n\n        return {\n            getError: getError(selector),\n            ...selector,\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector, createShallowEqualSelector } from '../common/selector';\nimport { Omit } from '../common/types';\n\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\nexport default interface CheckoutStoreStatusSelector {\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean;\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean;\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean;\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean;\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean;\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean;\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean;\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean;\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean;\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean;\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean;\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean;\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean;\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean;\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean;\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean;\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean;\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean;\n\n    /**\n     * Checks whether the current customer is applying store credit.\n     *\n     * @returns True if applying store credit, otherwise false.\n     */\n    isApplyingStoreCredit(): boolean;\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean;\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean;\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean;\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean;\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean;\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean;\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean;\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean;\n}\n\nexport type CheckoutStoreStatusSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreStatusSelector;\n\nexport function createCheckoutStoreStatusSelectorFactory(): CheckoutStoreStatusSelectorFactory {\n    const isPending = createShallowEqualSelector(\n        (selector: Omit<CheckoutStoreStatusSelector, 'isPending'>) => selector,\n        selector => () => {\n            return (Object.keys(selector) as Array<keyof Omit<CheckoutStoreStatusSelector, 'isPending'>>)\n                .some(key => selector[key]());\n        }\n    );\n\n    const isSelectingShippingOption = createSelector(\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.isSelectingOption,\n        ({ consignments }: InternalCheckoutSelectors) => consignments.isUpdatingShippingOption,\n        (isSelectingOption, isUpdatingShippingOption) => (consignmentId?: string) => {\n            return (\n                isSelectingOption() ||\n                isUpdatingShippingOption(consignmentId)\n            );\n        }\n    );\n\n    const isCustomerStepPending = createSelector(\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isInitializing,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isSigningIn,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isSigningOut,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isWidgetInteracting,\n        (isInitializing, isSigningIn, isSigningOut, isWidgetInteracting) => (methodId?: string) => {\n            return (\n                isInitializing(methodId) ||\n                isSigningIn(methodId) ||\n                isSigningOut(methodId) ||\n                isWidgetInteracting(methodId)\n            );\n        }\n    );\n\n    const isPaymentStepPending = createSelector(\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isInitializing,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isExecuting,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isFinalizing,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isWidgetInteracting,\n        (isInitializing, isExecuting, isFinalizing, isWidgetInteracting) => (methodId?: string) => {\n            return (\n                isInitializing(methodId) ||\n                isExecuting(methodId) ||\n                isFinalizing(methodId) ||\n                isWidgetInteracting(methodId)\n            );\n        }\n    );\n\n    const isSubmittingOrder = createSelector(\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isExecuting,\n        ({ order }: InternalCheckoutSelectors) => order.isSpamProtectionExecuting,\n        (isExecuting, isSpamProtectionExecuting) => (methodId?: string) => {\n            return (\n                isExecuting(methodId) ||\n                isSpamProtectionExecuting()\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreStatusSelector => {\n        const selector = {\n            isLoadingCheckout: state.checkout.isLoading,\n            isUpdatingCheckout: state.checkout.isUpdating,\n            isSubmittingOrder: isSubmittingOrder(state),\n            isFinalizingOrder: state.paymentStrategies.isFinalizing,\n            isLoadingOrder: state.order.isLoading,\n            isLoadingCart: state.cart.isLoading,\n            isLoadingBillingCountries: state.countries.isLoading,\n            isLoadingShippingCountries: state.shippingCountries.isLoading,\n            isLoadingPaymentMethods: state.paymentMethods.isLoading,\n            isLoadingPaymentMethod: state.paymentMethods.isLoadingMethod,\n            isInitializingPayment: state.paymentStrategies.isInitializing,\n            isSigningIn: state.customerStrategies.isSigningIn,\n            isSigningOut: state.customerStrategies.isSigningOut,\n            isInitializingCustomer: state.customerStrategies.isInitializing,\n            isLoadingShippingOptions: state.consignments.isLoadingShippingOptions,\n            isSelectingShippingOption: isSelectingShippingOption(state),\n            isUpdatingBillingAddress: state.billingAddress.isUpdating,\n            isContinuingAsGuest: state.billingAddress.isContinuingAsGuest,\n            isUpdatingShippingAddress: state.shippingStrategies.isUpdatingAddress,\n            isUpdatingConsignment: state.consignments.isUpdating,\n            isDeletingConsignment: state.consignments.isDeleting,\n            isCreatingConsignments: state.consignments.isCreating,\n            isInitializingShipping: state.shippingStrategies.isInitializing,\n            isApplyingStoreCredit: state.storeCredit.isApplying,\n            isApplyingCoupon: state.coupons.isApplying,\n            isRemovingCoupon: state.coupons.isRemoving,\n            isApplyingGiftCertificate: state.giftCertificates.isApplying,\n            isRemovingGiftCertificate: state.giftCertificates.isRemoving,\n            isLoadingInstruments: state.instruments.isLoading,\n            isDeletingInstrument: state.instruments.isDeleting,\n            isLoadingConfig: state.config.isLoading,\n            isCustomerStepPending: isCustomerStepPending(state),\n            isPaymentStepPending: isPaymentStepPending(state),\n        };\n\n        return {\n            isPending: isPending(selector),\n            ...selector,\n        };\n    });\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { createDataStoreProjection, DataStoreProjection } from '../common/data-store';\nimport { ErrorActionCreator, ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { bindDecorator as bind } from '../common/utility';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { SpamProtectionActionCreator, SpamProtectionOptions } from '../order/spam-protection';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { StoreCreditActionCreator } from '../store-credit';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutParams from './checkout-params';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport { createCheckoutSelectorsFactory, CheckoutSelectorsFactory } from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\n@bind\nexport default class CheckoutService {\n    private _storeProjection: DataStoreProjection<CheckoutSelectors>;\n    private _errorTransformer: ErrorMessageTransformer;\n    private _selectorsFactory: CheckoutSelectorsFactory;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _errorActionCreator: ErrorActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator\n    ) {\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n        this._selectorsFactory = createCheckoutSelectorsFactory();\n        this._storeProjection = createDataStoreProjection(this._store, this._selectorsFactory);\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._storeProjection.getState();\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._storeProjection.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._storeProjection.subscribe(subscriber, ...filters);\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     payment: {\n     *         methodId: 'braintree',\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: Partial<AddressRequestBody>, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that unassigns items from a specific shipping address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and unassigns the specified items. If the consignment ends up with no line items\n     * after the unassignment, it will be deleted.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    unassignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.unassignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: Partial<BillingAddressRequestBody>, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies or removes customer's store credit code to the current checkout.\n     *\n     * Once the store credit gets applied, the outstanding balance will be adjusted accordingly.\n     *\n     * ```js\n     * const state = await service.applyStoreCredit(true);\n     *\n     * console.log(state.data.getCheckout().outstandingBalance);\n     * ```\n     *\n     * @param options - Options for applying store credit.\n     * @returns A promise that resolves to the current state.\n     */\n    applyStoreCredit(useStoreCredit: boolean, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._storeCreditActionCreator.applyStoreCredit(useStoreCredit, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Clear errors that have been collected from previous calls.\n     *\n     * ```js\n     * const state = await service.clearError(error);\n     *\n     * console.log(state.errors.getError());\n     * ```\n     *\n     * @param error - Specific error object to clear\n     * @returns A promise that resolves to the current state.\n     */\n    clearError(error: Error): Promise<CheckoutSelectors> {\n        const action = this._errorActionCreator.clearError(error);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the spam protection for order creation.\n     *\n     * With spam protection enabled, the customer has to be verified as\n     * a human. The order creation will fail if spam protection\n     * is enabled but verification fails.\n     *\n     * ```js\n     * await service.initializeSpamProtection({\n     *     containerId: 'spamProtectionContainer',\n     * });\n     * ```\n     *\n     * @param options - Options for initializing spam protection.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeSpamProtection(options: SpamProtectionOptions): Promise<CheckoutSelectors> {\n        const action = this._spamProtectionActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'spamProtection' });\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Action | Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { ErrorActionCreator } from '../common/error';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createSpamProtection, SpamProtectionActionCreator } from '../order/spam-protection';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\nimport { StoreCreditActionCreator, StoreCreditRequestSender } from '../store-credit';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * @remarks\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const spamProtection = createSpamProtection(createScriptLoader());\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(spamProtection);\n    const orderActionCreator = new OrderActionCreator(\n        orderRequestSender,\n        new CheckoutValidator(checkoutRequestSender),\n        spamProtectionActionCreator\n    );\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new ErrorActionCreator(),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender, spamProtection, locale),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender)),\n        spamProtectionActionCreator,\n        new StoreCreditActionCreator(new StoreCreditRequestSender(requestSender))\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { MutationObserverFactory } from '../../common/dom';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport default function createSpamProtection(scriptLoader: ScriptLoader) {\n    return new GoogleRecaptcha(\n        new GoogleRecaptchaScriptLoader(scriptLoader),\n        new MutationObserverFactory()\n    );\n}\n","// tslint:disable-next-line:no-reference\n/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { createBraintreeVisaCheckoutPaymentProcessor, BraintreeScriptLoader, BraintreeSDKCreator, VisaCheckoutScriptLoader } from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport { CustomerStrategy } from './strategies';\nimport { AmazonPayCustomerStrategy } from './strategies/amazon';\nimport { BraintreeVisaCheckoutCustomerStrategy } from './strategies/braintree';\nimport { ChasePayCustomerStrategy } from './strategies/chasepay';\nimport { DefaultCustomerStrategy } from './strategies/default';\nimport { GooglePayCustomerStrategy } from './strategies/googlepay';\nimport { MasterpassCustomerStrategy } from './strategies/masterpass';\nimport { SquareCustomerStrategy } from './strategies/square';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            formPoster\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            ),\n            formPoster\n    )\n);\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { ShippingStrategy } from './strategies';\nimport { AmazonPayShippingStrategy } from './strategies/amazon';\nimport { DefaultShippingStrategy } from './strategies/default';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            consignmentActionCreator,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            consignmentActionCreator\n        )\n    );\n\n    return registry;\n}\n","import { EmbeddedCheckoutFrameLoadedEvent } from '../embedded-checkout-events';\n\nexport default function handleFrameLoadedEvent(message: EmbeddedCheckoutFrameLoadedEvent): void {\n    if (!message.payload || !message.payload.contentId) {\n        return;\n    }\n\n    const body = document.getElementById(message.payload.contentId);\n\n    if (!body || body.hasAttribute('data-iframe-height')) {\n        return;\n    }\n\n    body.setAttribute('data-iframe-height', '');\n}\n","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: any): error is CustomError {\n    return (\n        typeof error.message === 'string' &&\n        typeof error.type === 'string' &&\n        (typeof error.subtype === 'string' || !error.subtype) &&\n        error instanceof Error\n    );\n}\n","import { isCustomError, CustomError } from '../../common/error/errors';\nimport { bindDecorator as bind } from '../../common/utility';\nimport EmbeddedCheckoutError from '../embedded-checkout-error';\nimport { EmbeddedCheckoutCompleteEvent, EmbeddedCheckoutErrorEvent, EmbeddedCheckoutEvent, EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType, EmbeddedCheckoutFrameErrorEvent, EmbeddedCheckoutFrameLoadedEvent, EmbeddedCheckoutLoadedEvent, EmbeddedCheckoutSignedOutEvent } from '../embedded-checkout-events';\nimport EmbeddedCheckoutStyles from '../embedded-checkout-styles';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport { EmbeddedContentEventMap, EmbeddedContentEventType } from './embedded-content-events';\nimport EmbeddedContentOptions from './embedded-content-options';\n\n@bind\nexport default class IframeEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    /**\n     * @internal\n     */\n    constructor(\n        private _messageListener: IframeEventListener<EmbeddedContentEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _untargetedMessagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _messageHandlers: EventCallbacks<EmbeddedCheckoutEventMap> = {}\n    ) {\n        this._messageListener.listen();\n    }\n\n    postComplete(): void {\n        const message: EmbeddedCheckoutCompleteEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutComplete,\n        };\n\n        this._postMessage(message);\n    }\n\n    postError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutErrorEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutFrameErrorEvent = {\n            type: EmbeddedCheckoutEventType.FrameError,\n            payload: this._transformError(payload),\n        };\n\n        // Ideally, all messages should be targeted at a specific origin.\n        // However, for `FrameError` message, we have to post it in an\n        // untargeted fashion. This is because the error could be caused by a\n        // missing cart. That makes it not possible to determine of site origin\n        // of the parent window. Nevertheless, we still want to notify the\n        // parent window about the error.\n        this._postMessage(message, { untargeted: true });\n    }\n\n    postFrameLoaded(payload?: EmbeddedContentOptions): void {\n        const message: EmbeddedCheckoutFrameLoadedEvent = {\n            type: EmbeddedCheckoutEventType.FrameLoaded,\n            payload,\n        };\n\n        this._postMessage(message);\n    }\n\n    postLoaded(): void {\n        const message: EmbeddedCheckoutLoadedEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutLoaded,\n        };\n\n        this._postMessage(message);\n    }\n\n    postSignedOut(): void {\n        const message: EmbeddedCheckoutSignedOutEvent = {\n            type: EmbeddedCheckoutEventType.SignedOut,\n        };\n\n        this._postMessage(message);\n    }\n\n    receiveStyles(handler: (styles: EmbeddedCheckoutStyles) => void): void {\n        this._messageListener.addListener(EmbeddedContentEventType.StyleConfigured, ({ payload }) => {\n            handler(payload);\n        });\n    }\n\n    private _postMessage(message: EmbeddedCheckoutEvent, options?: { untargeted?: boolean }): void {\n        this._notifyMessageHandlers(message);\n\n        if (options && options.untargeted) {\n            return this._untargetedMessagePoster.post(message);\n        }\n\n        this._messagePoster.post(message);\n    }\n\n    private _notifyMessageHandlers(message: EmbeddedCheckoutEvent): void {\n        Object.keys(this._messageHandlers)\n            .forEach(key => {\n                if (message.type !== key) {\n                    return;\n                }\n\n                const handler = this._messageHandlers[key];\n\n                if (handler) {\n                    (handler as (event: EmbeddedCheckoutEvent) => void).call(null, message);\n                }\n            });\n    }\n\n    private _transformError(error: Error | CustomError): EmbeddedCheckoutError {\n        return {\n            message: error.message,\n            type: isCustomError(error) ? error.type : undefined,\n            subtype: isCustomError(error) ? error.subtype : undefined,\n        };\n    }\n}\n\nexport type EventCallbacks<TEventMap> = {\n    [key in keyof TEventMap]?: (event: TEventMap[key]) => void;\n};\n","import { bindDecorator as bind } from '../../common/utility';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\n\n@bind\nexport default class NoopEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    postComplete(): void {}\n\n    postError(): void {}\n\n    postFrameError(): void {}\n\n    postFrameLoaded(): void {}\n\n    postLoaded(): void {}\n\n    postSignedOut(): void {}\n\n    receiveStyles(): void {}\n}\n","import { setupContentWindowForIframeResizer } from '../../common/iframe';\nimport { EmbeddedCheckoutEvent, EmbeddedCheckoutEventType } from '../embedded-checkout-events';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport EmbeddedCheckoutMessengerOptions from './embedded-checkout-messenger-options';\nimport { EmbeddedContentEventMap } from './embedded-content-events';\nimport handleFrameLoadedEvent from './handle-frame-loaded-event';\nimport IframeEmbeddedCheckoutMessenger from './iframe-embedded-checkout-messenger';\nimport NoopEmbeddedCheckoutMessenger from './noop-embedded-checkout-messenger';\n\n/**\n * Create an instance of `EmbeddedCheckoutMessenger`.\n *\n * @remarks\n * The object is responsible for posting messages to the parent window from the\n * iframe when certain events have occurred. For example, when the checkout\n * form is first loaded, you should notify the parent window about it.\n *\n * The iframe can only be embedded in domains that are allowed by the store.\n *\n * ```ts\n * const messenger = createEmbeddedCheckoutMessenger({\n *     parentOrigin: 'https://some/website',\n * });\n *\n * messenger.postFrameLoaded();\n * ```\n *\n * @alpha\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @param options - Options for creating `EmbeddedCheckoutMessenger`\n * @returns - An instance of `EmbeddedCheckoutMessenger`\n */\nexport default function createEmbeddedCheckoutMessenger(options: EmbeddedCheckoutMessengerOptions): EmbeddedCheckoutMessenger {\n    setupContentWindowForIframeResizer();\n\n    const parentWindow = options.parentWindow || window.parent;\n\n    // Return a No-op messenger if it is not called inside an iframe\n    if (window === parentWindow) {\n        return new NoopEmbeddedCheckoutMessenger();\n    }\n\n    return new IframeEmbeddedCheckoutMessenger(\n        new IframeEventListener<EmbeddedContentEventMap>(options.parentOrigin),\n        new IframeEventPoster<EmbeddedCheckoutEvent>(options.parentOrigin, parentWindow),\n        new IframeEventPoster<EmbeddedCheckoutEvent>('*', parentWindow),\n        { [EmbeddedCheckoutEventType.FrameLoaded]: handleFrameLoadedEvent }\n    );\n}\n","import { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport { Logger } from '../common/log';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\n@bind\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * @remarks\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = (this._toFixed(positiveAmount, this._decimalPlaces)).split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        return [\n            parsedIntegerAmount,\n            decimalAmount,\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n\n    private _toFixed(value: number, precision: number): string {\n        return (+(Math.round(+(value + 'e' + precision)) + 'e' + -precision)).toFixed(precision);\n    }\n}\n","import { bindDecorator as bind } from '../common/utility';\nimport { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\n@bind\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = this._storeConfig.shopperCurrency.exchangeRate;\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * @alpha\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","export { createTimeout } from '@bigcommerce/request-sender';\n\nexport { createCheckoutService } from './checkout';\nexport { createCheckoutButtonInitializer } from './checkout-buttons';\nexport { embedCheckout } from './embedded-checkout';\nexport { createEmbeddedCheckoutMessenger } from './embedded-checkout/iframe-content';\nexport { createLanguageService } from './locale';\nexport { createCurrencyService } from './currency';\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\ntype TokenizeType = 'AndroidPayCard' | 'CreditCard';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: new(options: GooglePayPaymentOptions) => GooglePayClient;\n        };\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        };\n        type: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string;\n        nonce: string;\n        cardInformation: {\n            type: string;\n            number: string;\n        };\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: string;\n                phoneNumberRequired?: boolean;\n            };\n        };\n        tokenizationSpecification?: {\n            type: string;\n            parameters: {\n                gateway: string;\n                gatewayMerchantId?: string;\n                'braintree:apiVersion'?: string;\n                'braintree:clientKey'?: string;\n                'braintree:merchantId'?: string;\n                'braintree:sdkVersion'?: string;\n                'braintree:authorizationFingerprint'?: string;\n                'stripe:version'?: string;\n                'stripe:publishableKey'?: string;\n            };\n        };\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport { PaymentMethodInvalidError } from '../../errors';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport { ButtonColor, ButtonType, EnvironmentType, GooglePaymentData, GooglePayAddress, GooglePayClient, GooglePayInitializer, GooglePayPaymentDataRequestV2, GooglePaySDK, TokenizePayload } from './googlepay';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consigmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._postForm(this._googlePayInitializer.parseResponse(paymentData))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consigmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(0, -1).join(' '),\n            lastName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(-1).join(' '),\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1: paymentData.paymentMethodData.info.billingAddress.address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city: paymentData.paymentMethodData.info.billingAddress.locality,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,\n            countryCode: paymentData.paymentMethodData.info.billingAddress.countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            },\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender)\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class UnableToContinueAsGuestError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to continue as a guest because the customer is already signed in.');\n\n        this.name = 'UnableToContinueAsGuestError';\n        this.type = 'unable_to_continue_as_guest';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\nimport { UnableToContinueAsGuestError } from './errors';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new UnableToContinueAsGuestError();\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n"],"sourceRoot":""}